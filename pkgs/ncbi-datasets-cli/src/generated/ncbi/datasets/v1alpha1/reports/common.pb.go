// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.2
// source: ncbi/datasets/v1alpha1/reports/common.proto

package reports

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Orientation int32

const (
	Orientation_none  Orientation = 0
	Orientation_plus  Orientation = 1
	Orientation_minus Orientation = 2
)

// Enum value maps for Orientation.
var (
	Orientation_name = map[int32]string{
		0: "none",
		1: "plus",
		2: "minus",
	}
	Orientation_value = map[string]int32{
		"none":  0,
		"plus":  1,
		"minus": 2,
	}
)

func (x Orientation) Enum() *Orientation {
	p := new(Orientation)
	*p = x
	return p
}

func (x Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_reports_common_proto_enumTypes[0].Descriptor()
}

func (Orientation) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_reports_common_proto_enumTypes[0]
}

func (x Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Orientation.Descriptor instead.
func (Orientation) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescGZIP(), []int{0}
}

type LineageOrganism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NCBI Taxonomy identifier
	TaxId uint32 `protobuf:"varint,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	// Scientific name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LineageOrganism) Reset() {
	*x = LineageOrganism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LineageOrganism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LineageOrganism) ProtoMessage() {}

func (x *LineageOrganism) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LineageOrganism.ProtoReflect.Descriptor instead.
func (*LineageOrganism) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescGZIP(), []int{0}
}

func (x *LineageOrganism) GetTaxId() uint32 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

func (x *LineageOrganism) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Organism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NCBI Taxonomy identifier
	TaxId uint32 `protobuf:"varint,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	// Scientific name
	//
	// Deprecated: Do not use.
	SciName string `protobuf:"bytes,2,opt,name=sci_name,json=sciName,proto3" json:"sci_name,omitempty"`
	// Scientific name
	OrganismName string `protobuf:"bytes,7,opt,name=organism_name,json=organismName,proto3" json:"organism_name,omitempty"`
	// Common name
	CommonName string `protobuf:"bytes,3,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Lineage ordered from superkingdom level to increasingly more specific taxonomic entries
	Lineage                []*LineageOrganism `protobuf:"bytes,5,rep,name=lineage,proto3" json:"lineage,omitempty"`
	Strain                 string             `protobuf:"bytes,6,opt,name=strain,proto3" json:"strain,omitempty"`
	PangolinClassification string             `protobuf:"bytes,8,opt,name=pangolin_classification,json=pangolinClassification,proto3" json:"pangolin_classification,omitempty"`
}

func (x *Organism) Reset() {
	*x = Organism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organism) ProtoMessage() {}

func (x *Organism) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organism.ProtoReflect.Descriptor instead.
func (*Organism) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescGZIP(), []int{1}
}

func (x *Organism) GetTaxId() uint32 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

// Deprecated: Do not use.
func (x *Organism) GetSciName() string {
	if x != nil {
		return x.SciName
	}
	return ""
}

func (x *Organism) GetOrganismName() string {
	if x != nil {
		return x.OrganismName
	}
	return ""
}

func (x *Organism) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *Organism) GetLineage() []*LineageOrganism {
	if x != nil {
		return x.Lineage
	}
	return nil
}

func (x *Organism) GetStrain() string {
	if x != nil {
		return x.Strain
	}
	return ""
}

func (x *Organism) GetPangolinClassification() string {
	if x != nil {
		return x.PangolinClassification
	}
	return ""
}

// A 1-based range on a sequence record.
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin       uint64      `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End         uint64      `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Orientation Orientation `protobuf:"varint,3,opt,name=orientation,proto3,enum=ncbi.datasets.v1alpha1.reports.Orientation" json:"orientation,omitempty"`
	// I don't think this needs to be included in gene reports but it is currently there
	// so it needs to be available in the spec until/unless it gets removed from that report
	Order uint32 `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescGZIP(), []int{2}
}

func (x *Range) GetBegin() uint64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *Range) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Range) GetOrientation() Orientation {
	if x != nil {
		return x.Orientation
	}
	return Orientation_none
}

func (x *Range) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type SeqRangeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NCBI Accession.version of the sequence
	AccessionVersion string `protobuf:"bytes,1,opt,name=accession_version,json=accessionVersion,proto3" json:"accession_version,omitempty"`
	// Series of intervals on above accession_version
	Range []*Range `protobuf:"bytes,2,rep,name=range,proto3" json:"range,omitempty"`
}

func (x *SeqRangeSet) Reset() {
	*x = SeqRangeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeqRangeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeqRangeSet) ProtoMessage() {}

func (x *SeqRangeSet) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeqRangeSet.ProtoReflect.Descriptor instead.
func (*SeqRangeSet) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescGZIP(), []int{3}
}

func (x *SeqRangeSet) GetAccessionVersion() string {
	if x != nil {
		return x.AccessionVersion
	}
	return ""
}

func (x *SeqRangeSet) GetRange() []*Range {
	if x != nil {
		return x.Range
	}
	return nil
}

var File_ncbi_datasets_v1alpha1_reports_common_proto protoreflect.FileDescriptor

var file_ncbi_datasets_v1alpha1_reports_common_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x2c, 0x6e,
	0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x0f, 0x4c,
	0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x22,
	0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0b,
	0xc2, 0xf3, 0x18, 0x07, 0x32, 0x05, 0x31, 0x31, 0x31, 0x31, 0x38, 0x52, 0x05, 0x74, 0x61, 0x78,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xc2, 0xf3, 0x18, 0x0f, 0x32, 0x0d, 0x43, 0x6f, 0x72, 0x6f, 0x6e, 0x61, 0x76, 0x69,
	0x72, 0x69, 0x64, 0x61, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x05, 0x0a, 0x08,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x40, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0xc2, 0xf3, 0x18, 0x25, 0x0a, 0x06,
	0x74, 0x61, 0x78, 0x2d, 0x69, 0x64, 0x12, 0x0c, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x20, 0x49, 0x44, 0x32, 0x04, 0x39, 0x36, 0x30, 0x36, 0x32, 0x07, 0x32, 0x36, 0x39, 0x37,
	0x30, 0x34, 0x39, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x63,
	0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x07, 0x73, 0x63, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0xea, 0x01, 0x0a, 0x0d, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0xc4, 0x01, 0xc2, 0xf3, 0x18, 0x5d, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73,
	0x6d, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0x48, 0x6f, 0x6d, 0x6f, 0x20, 0x73, 0x61, 0x70,
	0x69, 0x65, 0x6e, 0x73, 0x32, 0x2f, 0x53, 0x65, 0x76, 0x65, 0x72, 0x65, 0x20, 0x61, 0x63, 0x75,
	0x74, 0x65, 0x20, 0x72, 0x65, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x73,
	0x79, 0x6e, 0x64, 0x72, 0x6f, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x72, 0x6f, 0x6e, 0x61, 0x76, 0x69,
	0x72, 0x75, 0x73, 0x20, 0x32, 0xca, 0xf3, 0x18, 0x25, 0x12, 0x23, 0x54, 0x68, 0x65, 0x20, 0x73,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0xd2, 0xf3,
	0x18, 0x36, 0x0a, 0x0f, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xc2, 0xf3, 0x18,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0b,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x05, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x32, 0x08, 0x70, 0x61, 0x6e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x32, 0x04, 0x4d, 0x45,
	0x52, 0x53, 0x32, 0x05, 0x53, 0x41, 0x52, 0x53, 0x32, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x07, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x06,
	0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x32, 0x04, 0x53, 0x45, 0x31, 0x31, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x12, 0x69, 0x0a, 0x17, 0x70, 0x61, 0x6e, 0x67, 0x6f, 0x6c, 0x69, 0x6e,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc2, 0xf3, 0x18, 0x2c, 0x0a, 0x08, 0x70, 0x61, 0x6e,
	0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x12, 0x17, 0x50, 0x61, 0x6e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x20,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x07,
	0x42, 0x2e, 0x31, 0x2e, 0x31, 0x2e, 0x37, 0x52, 0x16, 0x70, 0x61, 0x6e, 0x67, 0x6f, 0x6c, 0x69,
	0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xda, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x62, 0x65, 0x67,
	0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x05, 0x62, 0x65,
	0x67, 0x69, 0x6e, 0x12, 0x22, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x04, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x6d, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xaa, 0x01, 0x0a,
	0x0b, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc2, 0xf3, 0x18, 0x1f, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x0c, 0xc2, 0xf3, 0x18, 0x08, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2d, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2a, 0x2c, 0x0a, 0x0b, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x6c, 0x75, 0x73, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x6d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x02, 0x42, 0x4b, 0x5a, 0x1e, 0x6e, 0x63, 0x62, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0xf8, 0x01, 0x01, 0xc2, 0xf3, 0x18, 0x24,
	0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x08, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescOnce sync.Once
	file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescData = file_ncbi_datasets_v1alpha1_reports_common_proto_rawDesc
)

func file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescGZIP() []byte {
	file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescOnce.Do(func() {
		file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescData)
	})
	return file_ncbi_datasets_v1alpha1_reports_common_proto_rawDescData
}

var file_ncbi_datasets_v1alpha1_reports_common_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ncbi_datasets_v1alpha1_reports_common_proto_goTypes = []interface{}{
	(Orientation)(0),        // 0: ncbi.datasets.v1alpha1.reports.Orientation
	(*LineageOrganism)(nil), // 1: ncbi.datasets.v1alpha1.reports.LineageOrganism
	(*Organism)(nil),        // 2: ncbi.datasets.v1alpha1.reports.Organism
	(*Range)(nil),           // 3: ncbi.datasets.v1alpha1.reports.Range
	(*SeqRangeSet)(nil),     // 4: ncbi.datasets.v1alpha1.reports.SeqRangeSet
}
var file_ncbi_datasets_v1alpha1_reports_common_proto_depIdxs = []int32{
	1, // 0: ncbi.datasets.v1alpha1.reports.Organism.lineage:type_name -> ncbi.datasets.v1alpha1.reports.LineageOrganism
	0, // 1: ncbi.datasets.v1alpha1.reports.Range.orientation:type_name -> ncbi.datasets.v1alpha1.reports.Orientation
	3, // 2: ncbi.datasets.v1alpha1.reports.SeqRangeSet.range:type_name -> ncbi.datasets.v1alpha1.reports.Range
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_ncbi_datasets_v1alpha1_reports_common_proto_init() }
func file_ncbi_datasets_v1alpha1_reports_common_proto_init() {
	if File_ncbi_datasets_v1alpha1_reports_common_proto != nil {
		return
	}
	file_ncbi_datasets_v1alpha1_reports_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LineageOrganism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeqRangeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ncbi_datasets_v1alpha1_reports_common_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ncbi_datasets_v1alpha1_reports_common_proto_goTypes,
		DependencyIndexes: file_ncbi_datasets_v1alpha1_reports_common_proto_depIdxs,
		EnumInfos:         file_ncbi_datasets_v1alpha1_reports_common_proto_enumTypes,
		MessageInfos:      file_ncbi_datasets_v1alpha1_reports_common_proto_msgTypes,
	}.Build()
	File_ncbi_datasets_v1alpha1_reports_common_proto = out.File
	file_ncbi_datasets_v1alpha1_reports_common_proto_rawDesc = nil
	file_ncbi_datasets_v1alpha1_reports_common_proto_goTypes = nil
	file_ncbi_datasets_v1alpha1_reports_common_proto_depIdxs = nil
}
