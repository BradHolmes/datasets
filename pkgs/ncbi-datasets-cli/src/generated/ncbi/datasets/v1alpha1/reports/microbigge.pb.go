// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.2
// source: ncbi/datasets/v1alpha1/reports/microbigge.proto

package reports

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol          string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length          int32  `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	ReferenceLength int32  `protobuf:"varint,4,opt,name=reference_length,json=referenceLength,proto3" json:"reference_length,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescGZIP(), []int{0}
}

func (x *Element) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Element) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Element) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Element) GetReferenceLength() int32 {
	if x != nil {
		return x.ReferenceLength
	}
	return 0
}

type ClosestReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accession        string  `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PercentCoverage  float32 `protobuf:"fixed32,3,opt,name=percent_coverage,json=percentCoverage,proto3" json:"percent_coverage,omitempty"`
	PercentIdentical float32 `protobuf:"fixed32,4,opt,name=percent_identical,json=percentIdentical,proto3" json:"percent_identical,omitempty"`
	AlignLength      int32   `protobuf:"varint,5,opt,name=align_length,json=alignLength,proto3" json:"align_length,omitempty"`
}

func (x *ClosestReference) Reset() {
	*x = ClosestReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosestReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosestReference) ProtoMessage() {}

func (x *ClosestReference) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosestReference.ProtoReflect.Descriptor instead.
func (*ClosestReference) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescGZIP(), []int{1}
}

func (x *ClosestReference) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *ClosestReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClosestReference) GetPercentCoverage() float32 {
	if x != nil {
		return x.PercentCoverage
	}
	return 0
}

func (x *ClosestReference) GetPercentIdentical() float32 {
	if x != nil {
		return x.PercentIdentical
	}
	return 0
}

func (x *ClosestReference) GetAlignLength() int32 {
	if x != nil {
		return x.AlignLength
	}
	return 0
}

type Taxonomy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group          string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	ScientificName string `protobuf:"bytes,2,opt,name=scientific_name,json=scientificName,proto3" json:"scientific_name,omitempty"`
}

func (x *Taxonomy) Reset() {
	*x = Taxonomy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taxonomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxonomy) ProtoMessage() {}

func (x *Taxonomy) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxonomy.ProtoReflect.Descriptor instead.
func (*Taxonomy) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescGZIP(), []int{2}
}

func (x *Taxonomy) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Taxonomy) GetScientificName() string {
	if x != nil {
		return x.ScientificName
	}
	return ""
}

type Biosample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeographicOrigin string `protobuf:"bytes,1,opt,name=geographic_origin,json=geographicOrigin,proto3" json:"geographic_origin,omitempty"`
	Source           string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Type             string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Accession        string `protobuf:"bytes,4,opt,name=accession,proto3" json:"accession,omitempty"`
	Assembly         string `protobuf:"bytes,5,opt,name=assembly,proto3" json:"assembly,omitempty"`
	CollectionDate   string `protobuf:"bytes,6,opt,name=collection_date,json=collectionDate,proto3" json:"collection_date,omitempty"`
}

func (x *Biosample) Reset() {
	*x = Biosample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Biosample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Biosample) ProtoMessage() {}

func (x *Biosample) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Biosample.ProtoReflect.Descriptor instead.
func (*Biosample) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescGZIP(), []int{3}
}

func (x *Biosample) GetGeographicOrigin() string {
	if x != nil {
		return x.GeographicOrigin
	}
	return ""
}

func (x *Biosample) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Biosample) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Biosample) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *Biosample) GetAssembly() string {
	if x != nil {
		return x.Assembly
	}
	return ""
}

func (x *Biosample) GetCollectionDate() string {
	if x != nil {
		return x.CollectionDate
	}
	return ""
}

type ReadToAssemblyCoverage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contig   uint32  `protobuf:"varint,1,opt,name=contig,proto3" json:"contig,omitempty"`
	Assembly uint32  `protobuf:"varint,2,opt,name=assembly,proto3" json:"assembly,omitempty"`
	Ratio    float32 `protobuf:"fixed32,3,opt,name=ratio,proto3" json:"ratio,omitempty"`
}

func (x *ReadToAssemblyCoverage) Reset() {
	*x = ReadToAssemblyCoverage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadToAssemblyCoverage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadToAssemblyCoverage) ProtoMessage() {}

func (x *ReadToAssemblyCoverage) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadToAssemblyCoverage.ProtoReflect.Descriptor instead.
func (*ReadToAssemblyCoverage) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescGZIP(), []int{4}
}

func (x *ReadToAssemblyCoverage) GetContig() uint32 {
	if x != nil {
		return x.Contig
	}
	return 0
}

func (x *ReadToAssemblyCoverage) GetAssembly() uint32 {
	if x != nil {
		return x.Assembly
	}
	return 0
}

func (x *ReadToAssemblyCoverage) GetRatio() float32 {
	if x != nil {
		return x.Ratio
	}
	return 0
}

type AmrFinderPlus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	DbVersion string `protobuf:"bytes,3,opt,name=db_version,json=dbVersion,proto3" json:"db_version,omitempty"`
}

func (x *AmrFinderPlus) Reset() {
	*x = AmrFinderPlus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmrFinderPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmrFinderPlus) ProtoMessage() {}

func (x *AmrFinderPlus) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmrFinderPlus.ProtoReflect.Descriptor instead.
func (*AmrFinderPlus) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescGZIP(), []int{5}
}

func (x *AmrFinderPlus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AmrFinderPlus) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AmrFinderPlus) GetDbVersion() string {
	if x != nil {
		return x.DbVersion
	}
	return ""
}

type MicroBiggeReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAcc string   `protobuf:"bytes,1,opt,name=target_acc,json=targetAcc,proto3" json:"target_acc,omitempty"`
	Element   *Element `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty"`
	// The range of the gene
	Location                           *SeqRangeSet            `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Type                               string                  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Subtype                            string                  `protobuf:"bytes,5,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Class                              string                  `protobuf:"bytes,6,opt,name=class,proto3" json:"class,omitempty"`
	Subclass                           string                  `protobuf:"bytes,7,opt,name=subclass,proto3" json:"subclass,omitempty"`
	AmrMethod                          string                  `protobuf:"bytes,8,opt,name=amr_method,json=amrMethod,proto3" json:"amr_method,omitempty"`
	IsPlus                             bool                    `protobuf:"varint,9,opt,name=is_plus,json=isPlus,proto3" json:"is_plus,omitempty"`
	ClosestReferenceSequenceComparison *ClosestReference       `protobuf:"bytes,10,opt,name=closest_reference_sequence_comparison,json=closestReferenceSequenceComparison,proto3" json:"closest_reference_sequence_comparison,omitempty"`
	Taxonomy                           *Taxonomy               `protobuf:"bytes,11,opt,name=taxonomy,proto3" json:"taxonomy,omitempty"`
	Biosample                          *Biosample              `protobuf:"bytes,12,opt,name=biosample,proto3" json:"biosample,omitempty"`
	ReadToAssemblyCoverage             *ReadToAssemblyCoverage `protobuf:"bytes,13,opt,name=read_to_assembly_coverage,json=readToAssemblyCoverage,proto3" json:"read_to_assembly_coverage,omitempty"`
	AmrFinderPlus                      *AmrFinderPlus          `protobuf:"bytes,14,opt,name=amr_finder_plus,json=amrFinderPlus,proto3" json:"amr_finder_plus,omitempty"`
	GenesOnContig                      []string                `protobuf:"bytes,15,rep,name=genes_on_contig,json=genesOnContig,proto3" json:"genes_on_contig,omitempty"`
	GenesOnIsolate                     []string                `protobuf:"bytes,16,rep,name=genes_on_isolate,json=genesOnIsolate,proto3" json:"genes_on_isolate,omitempty"`
}

func (x *MicroBiggeReport) Reset() {
	*x = MicroBiggeReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroBiggeReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroBiggeReport) ProtoMessage() {}

func (x *MicroBiggeReport) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroBiggeReport.ProtoReflect.Descriptor instead.
func (*MicroBiggeReport) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescGZIP(), []int{6}
}

func (x *MicroBiggeReport) GetTargetAcc() string {
	if x != nil {
		return x.TargetAcc
	}
	return ""
}

func (x *MicroBiggeReport) GetElement() *Element {
	if x != nil {
		return x.Element
	}
	return nil
}

func (x *MicroBiggeReport) GetLocation() *SeqRangeSet {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *MicroBiggeReport) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MicroBiggeReport) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *MicroBiggeReport) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *MicroBiggeReport) GetSubclass() string {
	if x != nil {
		return x.Subclass
	}
	return ""
}

func (x *MicroBiggeReport) GetAmrMethod() string {
	if x != nil {
		return x.AmrMethod
	}
	return ""
}

func (x *MicroBiggeReport) GetIsPlus() bool {
	if x != nil {
		return x.IsPlus
	}
	return false
}

func (x *MicroBiggeReport) GetClosestReferenceSequenceComparison() *ClosestReference {
	if x != nil {
		return x.ClosestReferenceSequenceComparison
	}
	return nil
}

func (x *MicroBiggeReport) GetTaxonomy() *Taxonomy {
	if x != nil {
		return x.Taxonomy
	}
	return nil
}

func (x *MicroBiggeReport) GetBiosample() *Biosample {
	if x != nil {
		return x.Biosample
	}
	return nil
}

func (x *MicroBiggeReport) GetReadToAssemblyCoverage() *ReadToAssemblyCoverage {
	if x != nil {
		return x.ReadToAssemblyCoverage
	}
	return nil
}

func (x *MicroBiggeReport) GetAmrFinderPlus() *AmrFinderPlus {
	if x != nil {
		return x.AmrFinderPlus
	}
	return nil
}

func (x *MicroBiggeReport) GetGenesOnContig() []string {
	if x != nil {
		return x.GenesOnContig
	}
	return nil
}

func (x *MicroBiggeReport) GetGenesOnIsolate() []string {
	if x != nil {
		return x.GenesOnIsolate
	}
	return nil
}

var File_ncbi_datasets_v1alpha1_reports_microbigge_proto protoreflect.FileDescriptor

var file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x62, 0x69, 0x67, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x1a, 0x2b, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x03, 0x0a,
	0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xc2, 0xf3, 0x18, 0x2b, 0x0a, 0x0b,
	0x65, 0x6c, 0x65, 0x6d, 0x2d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x0e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x32, 0x06, 0x76, 0x61, 0x6e,
	0x53, 0x2d, 0x41, 0x32, 0x04, 0x63, 0x6f, 0x70, 0x42, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x9a, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x85, 0x01, 0xc2, 0xf3, 0x18, 0x80, 0x01, 0x0a, 0x09, 0x65, 0x6c, 0x65, 0x6d, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0c, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x32, 0x35, 0x56, 0x61, 0x6e, 0x41, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x20, 0x76, 0x61, 0x6e,
	0x63, 0x6f, 0x6d, 0x79, 0x63, 0x69, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x20, 0x68, 0x69, 0x73, 0x74, 0x69, 0x64, 0x69, 0x6e, 0x65, 0x20, 0x6b, 0x69, 0x6e,
	0x61, 0x73, 0x65, 0x20, 0x56, 0x61, 0x6e, 0x53, 0x32, 0x2e, 0x63, 0x6f, 0x70, 0x70, 0x65, 0x72,
	0x2f, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x50, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x20, 0x41, 0x54, 0x50,
	0x61, 0x73, 0x65, 0x20, 0x43, 0x6f, 0x70, 0x42, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21,
	0xc2, 0xf3, 0x18, 0x1d, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x0e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x5a, 0x0a, 0x10, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x2f, 0xc2, 0xf3, 0x18, 0x2b, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x6d, 0x2d,
	0x72, 0x65, 0x66, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xef, 0x03, 0x0a, 0x10, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xc2,
	0xf3, 0x18, 0x34, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x66,
	0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2e, 0xc2, 0xf3, 0x18, 0x2a, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x2d,
	0x72, 0x65, 0x66, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73,
	0x74, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x6d, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x42, 0xc2, 0xf3, 0x18, 0x3e, 0x0a, 0x18, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x2d,
	0x72, 0x65, 0x66, 0x2d, 0x70, 0x63, 0x74, 0x2d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x11, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x42, 0x3f, 0xc2, 0xf3, 0x18, 0x3b, 0x0a, 0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x2d,
	0x72, 0x65, 0x66, 0x2d, 0x70, 0x63, 0x74, 0x2d, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x12, 0x62, 0x0a, 0x0c, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x5f, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x3f, 0xc2, 0xf3, 0x18, 0x3b, 0x0a,
	0x15, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65, 0x66, 0x2d, 0x61, 0x6c, 0x69,
	0x67, 0x6e, 0x2d, 0x6c, 0x65, 0x6e, 0x12, 0x22, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x20,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0b, 0x61, 0x6c, 0x69, 0x67,
	0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xc1, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x4c, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x36, 0xc2, 0xf3, 0x18, 0x32, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x2d, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x0f, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x32, 0x14, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x6f, 0x63, 0x6f, 0x63,
	0x63, 0x75, 0x73, 0x20, 0x66, 0x61, 0x65, 0x63, 0x69, 0x75, 0x6d, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x67, 0x0a, 0x0f, 0x73, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3e, 0xc2, 0xf3, 0x18,
	0x3a, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x32, 0x1e, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x6f, 0x63, 0x6f, 0x63, 0x63, 0x75, 0x73, 0x20, 0x66, 0x61, 0x65, 0x63, 0x69, 0x75,
	0x6d, 0x20, 0x45, 0x6e, 0x47, 0x65, 0x6e, 0x30, 0x31, 0x37, 0x32, 0x52, 0x0e, 0x73, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcb, 0x04, 0x0a, 0x09,
	0x42, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x11, 0x67, 0x65, 0x6f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x50, 0xc2, 0xf3, 0x18, 0x4c, 0x0a, 0x14, 0x62, 0x69, 0x6f, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x67, 0x65, 0x6f, 0x2d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x1b, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x67, 0x65, 0x6f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x32, 0x07, 0x44,
	0x65, 0x6e, 0x6d, 0x61, 0x72, 0x6b, 0x32, 0x0e, 0x6e, 0x6f, 0x74, 0x20, 0x64, 0x65, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x52, 0x10, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xc2, 0xf3, 0x18, 0x24, 0x0a, 0x10,
	0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x10, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xc2, 0xf3, 0x18, 0x3f, 0x0a, 0x0e,
	0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x32, 0x08,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x32, 0x13, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x5a, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xc2, 0xf3, 0x18, 0x38, 0x0a, 0x13, 0x62, 0x69,
	0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x13, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0x53, 0x41, 0x4d, 0x4e, 0x30, 0x30, 0x38, 0x30,
	0x38, 0x39, 0x39, 0x39, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x63, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x47, 0xc2, 0xf3, 0x18, 0x43, 0x0a, 0x12, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x1c, 0x42, 0x69, 0x6f,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0f, 0x47, 0x43, 0x41, 0x5f, 0x30,
	0x30, 0x30, 0x33, 0x39, 0x35, 0x37, 0x32, 0x35, 0x2e, 0x31, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x12, 0x63, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xc2,
	0xf3, 0x18, 0x36, 0x0a, 0x19, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19,
	0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x16, 0x52, 0x65,
	0x61, 0x64, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x43, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x59, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x41, 0xc2, 0xf3, 0x18, 0x3d, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x64,
	0x2d, 0x61, 0x73, 0x73, 0x6d, 0x2d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x67, 0x12, 0x20, 0x52, 0x65, 0x61, 0x64, 0x2d, 0x74, 0x6f, 0x2d, 0x41,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x12,
	0x61, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x45, 0xc2, 0xf3, 0x18, 0x41, 0x0a, 0x1b, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x61, 0x73,
	0x73, 0x6d, 0x2d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x12, 0x22, 0x52, 0x65, 0x61, 0x64, 0x2d, 0x74, 0x6f, 0x2d, 0x41, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x3f, 0xc2, 0xf3, 0x18, 0x3b, 0x0a, 0x18, 0x72, 0x65, 0x61, 0x64, 0x2d, 0x61, 0x73,
	0x73, 0x6d, 0x2d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x1f, 0x52, 0x65, 0x61, 0x64, 0x2d, 0x74, 0x6f, 0x2d, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x2d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x20, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x0d, 0x41, 0x6d,
	0x72, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xc2, 0xf3,
	0x18, 0x2e, 0x0a, 0x15, 0x61, 0x6d, 0x72, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x70, 0x6c, 0x75,
	0x73, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x41, 0x4d, 0x52, 0x46, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x73, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xc2, 0xf3, 0x18, 0x28, 0x0a, 0x12, 0x61,
	0x6d, 0x72, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x41, 0x4d, 0x52, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x73,
	0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x64,
	0x62, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3e, 0xc2, 0xf3, 0x18, 0x3a, 0x0a, 0x18, 0x61, 0x6d, 0x72, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x70, 0x6c, 0x75, 0x73, 0x2d, 0x64, 0x62, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x41, 0x4d, 0x52, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x75, 0x73, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x64, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x97, 0x09, 0x0a, 0x10, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x42, 0x69, 0x67, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x47, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x28, 0xc2, 0xf3, 0x18, 0x24, 0x0a, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x12, 0x41, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53,
	0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xc2, 0xf3, 0x18, 0x19, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x32, 0x03, 0x41, 0x4d, 0x52, 0x32, 0x06, 0x53, 0x54, 0x52, 0x45, 0x53,
	0x53, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xc2, 0xf3, 0x18, 0x1e, 0x0a, 0x07,
	0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x07, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65,
	0x32, 0x03, 0x41, 0x4d, 0x52, 0x32, 0x05, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xc2, 0xf3, 0x18, 0x2b, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x0c, 0x47, 0x4c, 0x59, 0x43, 0x4f, 0x50,
	0x45, 0x50, 0x54, 0x49, 0x44, 0x45, 0x32, 0x0d, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x2f, 0x53,
	0x49, 0x4c, 0x56, 0x45, 0x52, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x08,
	0x73, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x33,
	0xc2, 0xf3, 0x18, 0x2f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x08,
	0x53, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x32, 0x0a, 0x56, 0x41, 0x4e, 0x43, 0x4f, 0x4d,
	0x59, 0x43, 0x49, 0x4e, 0x32, 0x0d, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52, 0x2f, 0x53, 0x49, 0x4c,
	0x56, 0x45, 0x52, 0x52, 0x08, 0x73, 0x75, 0x62, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x43, 0x0a,
	0x0a, 0x61, 0x6d, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x24, 0xc2, 0xf3, 0x18, 0x20, 0x0a, 0x0a, 0x61, 0x6d, 0x72, 0x2d, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x0a, 0x41, 0x4d, 0x52, 0x20, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x32,
	0x06, 0x45, 0x58, 0x41, 0x43, 0x54, 0x50, 0x52, 0x09, 0x61, 0x6d, 0x72, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x16, 0xc2, 0xf3, 0x18, 0x12, 0x0a, 0x07, 0x69, 0x73, 0x2d, 0x70, 0x6c,
	0x75, 0x73, 0x12, 0x07, 0x49, 0x73, 0x20, 0x70, 0x6c, 0x75, 0x73, 0x52, 0x06, 0x69, 0x73, 0x50,
	0x6c, 0x75, 0x73, 0x12, 0x83, 0x01, 0x0a, 0x25, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x22, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x08, 0x74, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x63,
	0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12,
	0x47, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x42, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x09, 0x62,
	0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x71, 0x0a, 0x19, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x63,
	0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x52, 0x16, 0x72, 0x65, 0x61, 0x64, 0x54, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x61,
	0x6d, 0x72, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x6d, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x6c, 0x75, 0x73, 0x52, 0x0d, 0x61, 0x6d, 0x72, 0x46, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c,
	0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x67, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x65, 0x6e,
	0x65, 0x73, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x10,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x4f, 0x6e, 0x49, 0x73, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x42, 0xc6, 0x0a, 0x5a, 0x1e, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0xf8, 0x01, 0x01, 0xc2, 0xf3, 0x18, 0x9e, 0x0a, 0x0a,
	0x17, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x69, 0x47, 0x47, 0x2d, 0x45, 0x20, 0x44, 0x61, 0x74,
	0x61, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42,
	0x69, 0x67, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x4b, 0x3c, 0x70, 0x3e, 0x54,
	0x68, 0x65, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x42, 0x49, 0x47, 0x47, 0x2d, 0x45, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x4d, 0x69, 0x63,
	0x72, 0x6f, 0x42, 0x49, 0x47, 0x47, 0x2d, 0x45, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x1a, 0x3a, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
	0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x74, 0x68, 0x65, 0x64, 0x6f, 0x63, 0x73, 0x2e,
	0x69, 0x6f, 0x2f, 0x22, 0x3e, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x3c,
	0x2f, 0x61, 0x3e, 0x1a, 0x6a, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x61, 0x74, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x3a, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x65, 0x6d, 0x3e, 0x6e,
	0x63, 0x62, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6a, 0x73, 0x6f,
	0x6e, 0x6c, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x1a,
	0x75, 0x45, 0x61, 0x63, 0x68, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x49, 0x47, 0x47, 0x2d, 0x45, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20,
	0x69, 0x73, 0x20, 0x61, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61,
	0x6c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x2d, 0x65, 0x6e, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e, 0x4a, 0x53,
	0x4f, 0x4e, 0x3c, 0x2f, 0x61, 0x3e, 0x1a, 0x77, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61,
	0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x49, 0x47,
	0x47, 0x2d, 0x45, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x4d, 0x69,
	0x63, 0x72, 0x6f, 0x42, 0x49, 0x47, 0x47, 0x2d, 0x45, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x1a,
	0x6a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x6f, 0x77, 0x20,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x75, 0x62, 0x2d,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x1a, 0x47, 0x54, 0x68, 0x65,
	0x20, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x3c, 0x65, 0x6d, 0x3e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42,
	0x69, 0x67, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x2e,
	0x3c, 0x2f, 0x70, 0x3e, 0x1a, 0x51, 0x3c, 0x70, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x20, 0x61, 0x20, 0x3c, 0x65, 0x6d, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x20, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x3c, 0x2f, 0x65,
	0x6d, 0x3e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77,
	0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x1a, 0x51, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66,
	0x3d, 0x22, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2f, 0x22, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c,
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x27, 0x73, 0x1a, 0x37, 0x3c, 0x6e, 0x6f, 0x62,
	0x72, 0x3e, 0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x2d, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x3c, 0x2f, 0x6e, 0x6f, 0x62, 0x72, 0x3e, 0x20, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x1a, 0x5b, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x6f,
	0x63, 0x73, 0x2f, 0x63, 0x6c, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2f, 0x22, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3c, 0x2f,
	0x61, 0x3e, 0x20, 0x43, 0x4c, 0x49, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x20, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x65, 0x20, 0x68, 0x6f, 0x77,
	0x1a, 0x63, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x49, 0x47, 0x47, 0x2d, 0x45,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x72,
	0x6f, 0x6d, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x6f,
	0x20, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73,
	0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x22, 0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0x08, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x2a, 0x9a, 0x01, 0x7b, 0x7b, 0x3c, 0x20, 0x72, 0x65, 0x61, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x2d,
	0x63, 0x6f, 0x64, 0x65, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d,
	0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x3d, 0x22, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x62, 0x69, 0x67,
	0x67, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63,
	0x6c, 0x69, 0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x3d, 0x22, 0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0x20, 0x65, 0x6e, 0x64, 0x3d, 0x22, 0x45, 0x4e, 0x44, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3e, 0x7d, 0x7d, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescOnce sync.Once
	file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescData = file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDesc
)

func file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescGZIP() []byte {
	file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescOnce.Do(func() {
		file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescData = protoimpl.X.CompressGZIP(file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescData)
	})
	return file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDescData
}

var file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ncbi_datasets_v1alpha1_reports_microbigge_proto_goTypes = []interface{}{
	(*Element)(nil),                // 0: ncbi.datasets.v1alpha1.reports.Element
	(*ClosestReference)(nil),       // 1: ncbi.datasets.v1alpha1.reports.ClosestReference
	(*Taxonomy)(nil),               // 2: ncbi.datasets.v1alpha1.reports.Taxonomy
	(*Biosample)(nil),              // 3: ncbi.datasets.v1alpha1.reports.Biosample
	(*ReadToAssemblyCoverage)(nil), // 4: ncbi.datasets.v1alpha1.reports.ReadToAssemblyCoverage
	(*AmrFinderPlus)(nil),          // 5: ncbi.datasets.v1alpha1.reports.AmrFinderPlus
	(*MicroBiggeReport)(nil),       // 6: ncbi.datasets.v1alpha1.reports.MicroBiggeReport
	(*SeqRangeSet)(nil),            // 7: ncbi.datasets.v1alpha1.reports.SeqRangeSet
}
var file_ncbi_datasets_v1alpha1_reports_microbigge_proto_depIdxs = []int32{
	0, // 0: ncbi.datasets.v1alpha1.reports.MicroBiggeReport.element:type_name -> ncbi.datasets.v1alpha1.reports.Element
	7, // 1: ncbi.datasets.v1alpha1.reports.MicroBiggeReport.location:type_name -> ncbi.datasets.v1alpha1.reports.SeqRangeSet
	1, // 2: ncbi.datasets.v1alpha1.reports.MicroBiggeReport.closest_reference_sequence_comparison:type_name -> ncbi.datasets.v1alpha1.reports.ClosestReference
	2, // 3: ncbi.datasets.v1alpha1.reports.MicroBiggeReport.taxonomy:type_name -> ncbi.datasets.v1alpha1.reports.Taxonomy
	3, // 4: ncbi.datasets.v1alpha1.reports.MicroBiggeReport.biosample:type_name -> ncbi.datasets.v1alpha1.reports.Biosample
	4, // 5: ncbi.datasets.v1alpha1.reports.MicroBiggeReport.read_to_assembly_coverage:type_name -> ncbi.datasets.v1alpha1.reports.ReadToAssemblyCoverage
	5, // 6: ncbi.datasets.v1alpha1.reports.MicroBiggeReport.amr_finder_plus:type_name -> ncbi.datasets.v1alpha1.reports.AmrFinderPlus
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_ncbi_datasets_v1alpha1_reports_microbigge_proto_init() }
func file_ncbi_datasets_v1alpha1_reports_microbigge_proto_init() {
	if File_ncbi_datasets_v1alpha1_reports_microbigge_proto != nil {
		return
	}
	file_ncbi_datasets_v1alpha1_reports_common_proto_init()
	file_ncbi_datasets_v1alpha1_reports_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosestReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taxonomy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Biosample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadToAssemblyCoverage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmrFinderPlus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicroBiggeReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ncbi_datasets_v1alpha1_reports_microbigge_proto_goTypes,
		DependencyIndexes: file_ncbi_datasets_v1alpha1_reports_microbigge_proto_depIdxs,
		MessageInfos:      file_ncbi_datasets_v1alpha1_reports_microbigge_proto_msgTypes,
	}.Build()
	File_ncbi_datasets_v1alpha1_reports_microbigge_proto = out.File
	file_ncbi_datasets_v1alpha1_reports_microbigge_proto_rawDesc = nil
	file_ncbi_datasets_v1alpha1_reports_microbigge_proto_goTypes = nil
	file_ncbi_datasets_v1alpha1_reports_microbigge_proto_depIdxs = nil
}
