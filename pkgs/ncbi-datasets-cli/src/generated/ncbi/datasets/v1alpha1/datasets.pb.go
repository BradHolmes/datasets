// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.2
// source: ncbi/datasets/v1alpha1/datasets.proto

package v1alpha1

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SortDirection int32

const (
	SortDirection_SORT_DIRECTION_UNSPECIFIED SortDirection = 0 // same as SORT_DIRECTION_ASCENDING
	SortDirection_SORT_DIRECTION_ASCENDING   SortDirection = 1
	SortDirection_SORT_DIRECTION_DESCENDING  SortDirection = 2
)

// Enum value maps for SortDirection.
var (
	SortDirection_name = map[int32]string{
		0: "SORT_DIRECTION_UNSPECIFIED",
		1: "SORT_DIRECTION_ASCENDING",
		2: "SORT_DIRECTION_DESCENDING",
	}
	SortDirection_value = map[string]int32{
		"SORT_DIRECTION_UNSPECIFIED": 0,
		"SORT_DIRECTION_ASCENDING":   1,
		"SORT_DIRECTION_DESCENDING":  2,
	}
)

func (x SortDirection) Enum() *SortDirection {
	p := new(SortDirection)
	*p = x
	return p
}

func (x SortDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[0].Descriptor()
}

func (SortDirection) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[0]
}

func (x SortDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirection.Descriptor instead.
func (SortDirection) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{0}
}

type Fasta int32

const (
	Fasta_FASTA_UNSPECIFIED Fasta = 0 // Ignored if present in list.
	Fasta_FASTA_GENE        Fasta = 1
	Fasta_FASTA_RNA         Fasta = 2
	Fasta_FASTA_PROTEIN     Fasta = 3
	Fasta_FASTA_GENE_FLANK  Fasta = 4
)

// Enum value maps for Fasta.
var (
	Fasta_name = map[int32]string{
		0: "FASTA_UNSPECIFIED",
		1: "FASTA_GENE",
		2: "FASTA_RNA",
		3: "FASTA_PROTEIN",
		4: "FASTA_GENE_FLANK",
	}
	Fasta_value = map[string]int32{
		"FASTA_UNSPECIFIED": 0,
		"FASTA_GENE":        1,
		"FASTA_RNA":         2,
		"FASTA_PROTEIN":     3,
		"FASTA_GENE_FLANK":  4,
	}
)

func (x Fasta) Enum() *Fasta {
	p := new(Fasta)
	*p = x
	return p
}

func (x Fasta) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fasta) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[1].Descriptor()
}

func (Fasta) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[1]
}

func (x Fasta) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fasta.Descriptor instead.
func (Fasta) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{1}
}

type Orientation int32

const (
	Orientation_none  Orientation = 0
	Orientation_plus  Orientation = 1
	Orientation_minus Orientation = 2
)

// Enum value maps for Orientation.
var (
	Orientation_name = map[int32]string{
		0: "none",
		1: "plus",
		2: "minus",
	}
	Orientation_value = map[string]int32{
		"none":  0,
		"plus":  1,
		"minus": 2,
	}
)

func (x Orientation) Enum() *Orientation {
	p := new(Orientation)
	*p = x
	return p
}

func (x Orientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Orientation) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[2].Descriptor()
}

func (Orientation) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[2]
}

func (x Orientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Orientation.Descriptor instead.
func (Orientation) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{2}
}

type VirusTableField int32

const (
	VirusTableField_unspecified          VirusTableField = 0
	VirusTableField_nucleotide_accession VirusTableField = 1
	VirusTableField_species_tax_id       VirusTableField = 2
	VirusTableField_species_name         VirusTableField = 3
	VirusTableField_genus                VirusTableField = 4
	VirusTableField_family               VirusTableField = 5
	VirusTableField_nucleotide_length    VirusTableField = 7
	VirusTableField_isolate_name         VirusTableField = 8
	VirusTableField_sequence_type        VirusTableField = 9
	VirusTableField_nuc_completeness     VirusTableField = 10
	VirusTableField_geo_location         VirusTableField = 11
	VirusTableField_us_state             VirusTableField = 12
	VirusTableField_host_name            VirusTableField = 13
	VirusTableField_host_tax_id          VirusTableField = 14
	VirusTableField_collection_date      VirusTableField = 15
	VirusTableField_bioproject           VirusTableField = 16
	VirusTableField_biosample            VirusTableField = 17
	VirusTableField_polyprotein_name     VirusTableField = 19
	VirusTableField_protein_name         VirusTableField = 20
	VirusTableField_protein_accession    VirusTableField = 21
	VirusTableField_protein_synonym      VirusTableField = 22
	VirusTableField_cds_span             VirusTableField = 23
)

// Enum value maps for VirusTableField.
var (
	VirusTableField_name = map[int32]string{
		0:  "unspecified",
		1:  "nucleotide_accession",
		2:  "species_tax_id",
		3:  "species_name",
		4:  "genus",
		5:  "family",
		7:  "nucleotide_length",
		8:  "isolate_name",
		9:  "sequence_type",
		10: "nuc_completeness",
		11: "geo_location",
		12: "us_state",
		13: "host_name",
		14: "host_tax_id",
		15: "collection_date",
		16: "bioproject",
		17: "biosample",
		19: "polyprotein_name",
		20: "protein_name",
		21: "protein_accession",
		22: "protein_synonym",
		23: "cds_span",
	}
	VirusTableField_value = map[string]int32{
		"unspecified":          0,
		"nucleotide_accession": 1,
		"species_tax_id":       2,
		"species_name":         3,
		"genus":                4,
		"family":               5,
		"nucleotide_length":    7,
		"isolate_name":         8,
		"sequence_type":        9,
		"nuc_completeness":     10,
		"geo_location":         11,
		"us_state":             12,
		"host_name":            13,
		"host_tax_id":          14,
		"collection_date":      15,
		"bioproject":           16,
		"biosample":            17,
		"polyprotein_name":     19,
		"protein_name":         20,
		"protein_accession":    21,
		"protein_synonym":      22,
		"cds_span":             23,
	}
)

func (x VirusTableField) Enum() *VirusTableField {
	p := new(VirusTableField)
	*p = x
	return p
}

func (x VirusTableField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirusTableField) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[3].Descriptor()
}

func (VirusTableField) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[3]
}

func (x VirusTableField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirusTableField.Descriptor instead.
func (VirusTableField) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{3}
}

type TableFormat int32

const (
	TableFormat_tsv   TableFormat = 0
	TableFormat_csv   TableFormat = 1
	TableFormat_jsonl TableFormat = 2
)

// Enum value maps for TableFormat.
var (
	TableFormat_name = map[int32]string{
		0: "tsv",
		1: "csv",
		2: "jsonl",
	}
	TableFormat_value = map[string]int32{
		"tsv":   0,
		"csv":   1,
		"jsonl": 2,
	}
)

func (x TableFormat) Enum() *TableFormat {
	p := new(TableFormat)
	*p = x
	return p
}

func (x TableFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[4].Descriptor()
}

func (TableFormat) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[4]
}

func (x TableFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableFormat.Descriptor instead.
func (TableFormat) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{4}
}

type AssemblyDatasetDescriptorsFilter_AssemblySource int32

const (
	AssemblyDatasetDescriptorsFilter_all     AssemblyDatasetDescriptorsFilter_AssemblySource = 0
	AssemblyDatasetDescriptorsFilter_refseq  AssemblyDatasetDescriptorsFilter_AssemblySource = 1
	AssemblyDatasetDescriptorsFilter_genbank AssemblyDatasetDescriptorsFilter_AssemblySource = 2
)

// Enum value maps for AssemblyDatasetDescriptorsFilter_AssemblySource.
var (
	AssemblyDatasetDescriptorsFilter_AssemblySource_name = map[int32]string{
		0: "all",
		1: "refseq",
		2: "genbank",
	}
	AssemblyDatasetDescriptorsFilter_AssemblySource_value = map[string]int32{
		"all":     0,
		"refseq":  1,
		"genbank": 2,
	}
)

func (x AssemblyDatasetDescriptorsFilter_AssemblySource) Enum() *AssemblyDatasetDescriptorsFilter_AssemblySource {
	p := new(AssemblyDatasetDescriptorsFilter_AssemblySource)
	*p = x
	return p
}

func (x AssemblyDatasetDescriptorsFilter_AssemblySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssemblyDatasetDescriptorsFilter_AssemblySource) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[5].Descriptor()
}

func (AssemblyDatasetDescriptorsFilter_AssemblySource) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[5]
}

func (x AssemblyDatasetDescriptorsFilter_AssemblySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssemblyDatasetDescriptorsFilter_AssemblySource.Descriptor instead.
func (AssemblyDatasetDescriptorsFilter_AssemblySource) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{1, 0}
}

// The level of the genome assembly: Chromosome, Scaffold, Contig or Complete Genome
type AssemblyDatasetDescriptorsFilter_AssemblyLevel int32

const (
	AssemblyDatasetDescriptorsFilter_chromosome      AssemblyDatasetDescriptorsFilter_AssemblyLevel = 0
	AssemblyDatasetDescriptorsFilter_scaffold        AssemblyDatasetDescriptorsFilter_AssemblyLevel = 1
	AssemblyDatasetDescriptorsFilter_contig          AssemblyDatasetDescriptorsFilter_AssemblyLevel = 2
	AssemblyDatasetDescriptorsFilter_complete_genome AssemblyDatasetDescriptorsFilter_AssemblyLevel = 3
)

// Enum value maps for AssemblyDatasetDescriptorsFilter_AssemblyLevel.
var (
	AssemblyDatasetDescriptorsFilter_AssemblyLevel_name = map[int32]string{
		0: "chromosome",
		1: "scaffold",
		2: "contig",
		3: "complete_genome",
	}
	AssemblyDatasetDescriptorsFilter_AssemblyLevel_value = map[string]int32{
		"chromosome":      0,
		"scaffold":        1,
		"contig":          2,
		"complete_genome": 3,
	}
)

func (x AssemblyDatasetDescriptorsFilter_AssemblyLevel) Enum() *AssemblyDatasetDescriptorsFilter_AssemblyLevel {
	p := new(AssemblyDatasetDescriptorsFilter_AssemblyLevel)
	*p = x
	return p
}

func (x AssemblyDatasetDescriptorsFilter_AssemblyLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssemblyDatasetDescriptorsFilter_AssemblyLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[6].Descriptor()
}

func (AssemblyDatasetDescriptorsFilter_AssemblyLevel) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[6]
}

func (x AssemblyDatasetDescriptorsFilter_AssemblyLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssemblyDatasetDescriptorsFilter_AssemblyLevel.Descriptor instead.
func (AssemblyDatasetDescriptorsFilter_AssemblyLevel) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{1, 1}
}

type AssemblyMetadataRequest_ContentType int32

const (
	AssemblyMetadataRequest_COMPLETE AssemblyMetadataRequest_ContentType = 0
	AssemblyMetadataRequest_ASSM_ACC AssemblyMetadataRequest_ContentType = 1
)

// Enum value maps for AssemblyMetadataRequest_ContentType.
var (
	AssemblyMetadataRequest_ContentType_name = map[int32]string{
		0: "COMPLETE",
		1: "ASSM_ACC",
	}
	AssemblyMetadataRequest_ContentType_value = map[string]int32{
		"COMPLETE": 0,
		"ASSM_ACC": 1,
	}
)

func (x AssemblyMetadataRequest_ContentType) Enum() *AssemblyMetadataRequest_ContentType {
	p := new(AssemblyMetadataRequest_ContentType)
	*p = x
	return p
}

func (x AssemblyMetadataRequest_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssemblyMetadataRequest_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[7].Descriptor()
}

func (AssemblyMetadataRequest_ContentType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[7]
}

func (x AssemblyMetadataRequest_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssemblyMetadataRequest_ContentType.Descriptor instead.
func (AssemblyMetadataRequest_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{3, 0}
}

type AssemblyDatasetDescriptorsRequest_ContentType int32

const (
	AssemblyDatasetDescriptorsRequest_COMPLETE AssemblyDatasetDescriptorsRequest_ContentType = 0
	AssemblyDatasetDescriptorsRequest_ASSM_ACC AssemblyDatasetDescriptorsRequest_ContentType = 1
	AssemblyDatasetDescriptorsRequest_COUNTS   AssemblyDatasetDescriptorsRequest_ContentType = 2
)

// Enum value maps for AssemblyDatasetDescriptorsRequest_ContentType.
var (
	AssemblyDatasetDescriptorsRequest_ContentType_name = map[int32]string{
		0: "COMPLETE",
		1: "ASSM_ACC",
		2: "COUNTS",
	}
	AssemblyDatasetDescriptorsRequest_ContentType_value = map[string]int32{
		"COMPLETE": 0,
		"ASSM_ACC": 1,
		"COUNTS":   2,
	}
)

func (x AssemblyDatasetDescriptorsRequest_ContentType) Enum() *AssemblyDatasetDescriptorsRequest_ContentType {
	p := new(AssemblyDatasetDescriptorsRequest_ContentType)
	*p = x
	return p
}

func (x AssemblyDatasetDescriptorsRequest_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssemblyDatasetDescriptorsRequest_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[8].Descriptor()
}

func (AssemblyDatasetDescriptorsRequest_ContentType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[8]
}

func (x AssemblyDatasetDescriptorsRequest_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssemblyDatasetDescriptorsRequest_ContentType.Descriptor instead.
func (AssemblyDatasetDescriptorsRequest_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{4, 0}
}

type AnnotationForAssembly_Type int32

const (
	AnnotationForAssembly_DEFAULT     AnnotationForAssembly_Type = 0 // Ignored
	AnnotationForAssembly_GENOME_GFF  AnnotationForAssembly_Type = 1
	AnnotationForAssembly_GENOME_GBFF AnnotationForAssembly_Type = 2
	// Deprecated: Do not use.
	AnnotationForAssembly_GENOME_GB  AnnotationForAssembly_Type = 2
	AnnotationForAssembly_RNA_FASTA  AnnotationForAssembly_Type = 3
	AnnotationForAssembly_PROT_FASTA AnnotationForAssembly_Type = 4
	AnnotationForAssembly_GENOME_GTF AnnotationForAssembly_Type = 5
)

// Enum value maps for AnnotationForAssembly_Type.
var (
	AnnotationForAssembly_Type_name = map[int32]string{
		0: "DEFAULT",
		1: "GENOME_GFF",
		2: "GENOME_GBFF",
		// Duplicate value: 2: "GENOME_GB",
		3: "RNA_FASTA",
		4: "PROT_FASTA",
		5: "GENOME_GTF",
	}
	AnnotationForAssembly_Type_value = map[string]int32{
		"DEFAULT":     0,
		"GENOME_GFF":  1,
		"GENOME_GBFF": 2,
		"GENOME_GB":   2,
		"RNA_FASTA":   3,
		"PROT_FASTA":  4,
		"GENOME_GTF":  5,
	}
)

func (x AnnotationForAssembly_Type) Enum() *AnnotationForAssembly_Type {
	p := new(AnnotationForAssembly_Type)
	*p = x
	return p
}

func (x AnnotationForAssembly_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnotationForAssembly_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[9].Descriptor()
}

func (AnnotationForAssembly_Type) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[9]
}

func (x AnnotationForAssembly_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnotationForAssembly_Type.Descriptor instead.
func (AnnotationForAssembly_Type) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{9, 0}
}

type AssemblyDatasetRequest_Resolution int32

const (
	AssemblyDatasetRequest_FULLY_HYDRATED   AssemblyDatasetRequest_Resolution = 0 // default, by virtue of being '0'
	AssemblyDatasetRequest_DATA_REPORT_ONLY AssemblyDatasetRequest_Resolution = 1
)

// Enum value maps for AssemblyDatasetRequest_Resolution.
var (
	AssemblyDatasetRequest_Resolution_name = map[int32]string{
		0: "FULLY_HYDRATED",
		1: "DATA_REPORT_ONLY",
	}
	AssemblyDatasetRequest_Resolution_value = map[string]int32{
		"FULLY_HYDRATED":   0,
		"DATA_REPORT_ONLY": 1,
	}
)

func (x AssemblyDatasetRequest_Resolution) Enum() *AssemblyDatasetRequest_Resolution {
	p := new(AssemblyDatasetRequest_Resolution)
	*p = x
	return p
}

func (x AssemblyDatasetRequest_Resolution) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssemblyDatasetRequest_Resolution) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[10].Descriptor()
}

func (AssemblyDatasetRequest_Resolution) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[10]
}

func (x AssemblyDatasetRequest_Resolution) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssemblyDatasetRequest_Resolution.Descriptor instead.
func (AssemblyDatasetRequest_Resolution) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{12, 0}
}

type Organism_RankType int32

const (
	Organism_NO_RANK          Organism_RankType = 0
	Organism_SUPERKINGDOM     Organism_RankType = 1
	Organism_KINGDOM          Organism_RankType = 2
	Organism_SUBKINGDOM       Organism_RankType = 3
	Organism_SUPERPHYLUM      Organism_RankType = 4
	Organism_SUBPHYLUM        Organism_RankType = 5
	Organism_PHYLUM           Organism_RankType = 6
	Organism_CLADE            Organism_RankType = 31
	Organism_SUPERCLASS       Organism_RankType = 7
	Organism_CLASS            Organism_RankType = 8
	Organism_SUBCLASS         Organism_RankType = 9
	Organism_INFRACLASS       Organism_RankType = 10
	Organism_COHORT           Organism_RankType = 11
	Organism_SUBCOHORT        Organism_RankType = 12
	Organism_SUPERORDER       Organism_RankType = 13
	Organism_ORDER            Organism_RankType = 14
	Organism_SUBORDER         Organism_RankType = 15
	Organism_INFRAORDER       Organism_RankType = 16
	Organism_PARVORDER        Organism_RankType = 17
	Organism_SUPERFAMILY      Organism_RankType = 18
	Organism_FAMILY           Organism_RankType = 19
	Organism_SUBFAMILY        Organism_RankType = 20
	Organism_GENUS            Organism_RankType = 21
	Organism_SUBGENUS         Organism_RankType = 22
	Organism_SPECIES_GROUP    Organism_RankType = 23
	Organism_SPECIES_SUBGROUP Organism_RankType = 24
	Organism_SPECIES          Organism_RankType = 25
	Organism_SUBSPECIES       Organism_RankType = 26
	Organism_TRIBE            Organism_RankType = 27
	Organism_SUBTRIBE         Organism_RankType = 28
	Organism_FORMA            Organism_RankType = 29
	Organism_VARIETAS         Organism_RankType = 30
	Organism_STRAIN           Organism_RankType = 320
	Organism_SECTION          Organism_RankType = 330
	Organism_SUBSECTION       Organism_RankType = 340
	Organism_PATHOGROUP       Organism_RankType = 350
	Organism_SUBVARIETY       Organism_RankType = 360
	Organism_GENOTYPE         Organism_RankType = 370
	Organism_SEROTYPE         Organism_RankType = 380
	Organism_ISOLATE          Organism_RankType = 390
	Organism_MORPH            Organism_RankType = 400
	Organism_SERIES           Organism_RankType = 410
	Organism_FORMA_SPECIALIS  Organism_RankType = 420
	Organism_SEROGROUP        Organism_RankType = 430
	Organism_BIOTYPE          Organism_RankType = 440
)

// Enum value maps for Organism_RankType.
var (
	Organism_RankType_name = map[int32]string{
		0:   "NO_RANK",
		1:   "SUPERKINGDOM",
		2:   "KINGDOM",
		3:   "SUBKINGDOM",
		4:   "SUPERPHYLUM",
		5:   "SUBPHYLUM",
		6:   "PHYLUM",
		31:  "CLADE",
		7:   "SUPERCLASS",
		8:   "CLASS",
		9:   "SUBCLASS",
		10:  "INFRACLASS",
		11:  "COHORT",
		12:  "SUBCOHORT",
		13:  "SUPERORDER",
		14:  "ORDER",
		15:  "SUBORDER",
		16:  "INFRAORDER",
		17:  "PARVORDER",
		18:  "SUPERFAMILY",
		19:  "FAMILY",
		20:  "SUBFAMILY",
		21:  "GENUS",
		22:  "SUBGENUS",
		23:  "SPECIES_GROUP",
		24:  "SPECIES_SUBGROUP",
		25:  "SPECIES",
		26:  "SUBSPECIES",
		27:  "TRIBE",
		28:  "SUBTRIBE",
		29:  "FORMA",
		30:  "VARIETAS",
		320: "STRAIN",
		330: "SECTION",
		340: "SUBSECTION",
		350: "PATHOGROUP",
		360: "SUBVARIETY",
		370: "GENOTYPE",
		380: "SEROTYPE",
		390: "ISOLATE",
		400: "MORPH",
		410: "SERIES",
		420: "FORMA_SPECIALIS",
		430: "SEROGROUP",
		440: "BIOTYPE",
	}
	Organism_RankType_value = map[string]int32{
		"NO_RANK":          0,
		"SUPERKINGDOM":     1,
		"KINGDOM":          2,
		"SUBKINGDOM":       3,
		"SUPERPHYLUM":      4,
		"SUBPHYLUM":        5,
		"PHYLUM":           6,
		"CLADE":            31,
		"SUPERCLASS":       7,
		"CLASS":            8,
		"SUBCLASS":         9,
		"INFRACLASS":       10,
		"COHORT":           11,
		"SUBCOHORT":        12,
		"SUPERORDER":       13,
		"ORDER":            14,
		"SUBORDER":         15,
		"INFRAORDER":       16,
		"PARVORDER":        17,
		"SUPERFAMILY":      18,
		"FAMILY":           19,
		"SUBFAMILY":        20,
		"GENUS":            21,
		"SUBGENUS":         22,
		"SPECIES_GROUP":    23,
		"SPECIES_SUBGROUP": 24,
		"SPECIES":          25,
		"SUBSPECIES":       26,
		"TRIBE":            27,
		"SUBTRIBE":         28,
		"FORMA":            29,
		"VARIETAS":         30,
		"STRAIN":           320,
		"SECTION":          330,
		"SUBSECTION":       340,
		"PATHOGROUP":       350,
		"SUBVARIETY":       360,
		"GENOTYPE":         370,
		"SEROTYPE":         380,
		"ISOLATE":          390,
		"MORPH":            400,
		"SERIES":           410,
		"FORMA_SPECIALIS":  420,
		"SEROGROUP":        430,
		"BIOTYPE":          440,
	}
)

func (x Organism_RankType) Enum() *Organism_RankType {
	p := new(Organism_RankType)
	*p = x
	return p
}

func (x Organism_RankType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Organism_RankType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[11].Descriptor()
}

func (Organism_RankType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[11]
}

func (x Organism_RankType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Organism_RankType.Descriptor instead.
func (Organism_RankType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{16, 0}
}

type Organism_CountType int32

const (
	Organism_COUNT_TYPE_UNSPECIFIED Organism_CountType = 0
	Organism_COUNT_TYPE_ASSEMBLY    Organism_CountType = 1
	Organism_COUNT_TYPE_GENE        Organism_CountType = 2
)

// Enum value maps for Organism_CountType.
var (
	Organism_CountType_name = map[int32]string{
		0: "COUNT_TYPE_UNSPECIFIED",
		1: "COUNT_TYPE_ASSEMBLY",
		2: "COUNT_TYPE_GENE",
	}
	Organism_CountType_value = map[string]int32{
		"COUNT_TYPE_UNSPECIFIED": 0,
		"COUNT_TYPE_ASSEMBLY":    1,
		"COUNT_TYPE_GENE":        2,
	}
)

func (x Organism_CountType) Enum() *Organism_CountType {
	p := new(Organism_CountType)
	*p = x
	return p
}

func (x Organism_CountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Organism_CountType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[12].Descriptor()
}

func (Organism_CountType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[12]
}

func (x Organism_CountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Organism_CountType.Descriptor instead.
func (Organism_CountType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{16, 1}
}

type OrthologRequest_ContentType int32

const (
	OrthologRequest_COMPLETE OrthologRequest_ContentType = 0
	OrthologRequest_IDS_ONLY OrthologRequest_ContentType = 1
)

// Enum value maps for OrthologRequest_ContentType.
var (
	OrthologRequest_ContentType_name = map[int32]string{
		0: "COMPLETE",
		1: "IDS_ONLY",
	}
	OrthologRequest_ContentType_value = map[string]int32{
		"COMPLETE": 0,
		"IDS_ONLY": 1,
	}
)

func (x OrthologRequest_ContentType) Enum() *OrthologRequest_ContentType {
	p := new(OrthologRequest_ContentType)
	*p = x
	return p
}

func (x OrthologRequest_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrthologRequest_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[13].Descriptor()
}

func (OrthologRequest_ContentType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[13]
}

func (x OrthologRequest_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrthologRequest_ContentType.Descriptor instead.
func (OrthologRequest_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{20, 0}
}

type GeneDatasetRequest_ContentType int32

const (
	GeneDatasetRequest_COMPLETE GeneDatasetRequest_ContentType = 0
	GeneDatasetRequest_IDS_ONLY GeneDatasetRequest_ContentType = 1
)

// Enum value maps for GeneDatasetRequest_ContentType.
var (
	GeneDatasetRequest_ContentType_name = map[int32]string{
		0: "COMPLETE",
		1: "IDS_ONLY",
	}
	GeneDatasetRequest_ContentType_value = map[string]int32{
		"COMPLETE": 0,
		"IDS_ONLY": 1,
	}
)

func (x GeneDatasetRequest_ContentType) Enum() *GeneDatasetRequest_ContentType {
	p := new(GeneDatasetRequest_ContentType)
	*p = x
	return p
}

func (x GeneDatasetRequest_ContentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneDatasetRequest_ContentType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[14].Descriptor()
}

func (GeneDatasetRequest_ContentType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[14]
}

func (x GeneDatasetRequest_ContentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeneDatasetRequest_ContentType.Descriptor instead.
func (GeneDatasetRequest_ContentType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{22, 0}
}

type GeneDatasetRequest_SortField int32

const (
	GeneDatasetRequest_SORT_FIELD_UNSPECIFIED GeneDatasetRequest_SortField = 0 // same as SORT_FIELD_GENE_ID
	GeneDatasetRequest_SORT_FIELD_GENE_ID     GeneDatasetRequest_SortField = 1
	GeneDatasetRequest_SORT_FIELD_GENE_TYPE   GeneDatasetRequest_SortField = 2
	GeneDatasetRequest_SORT_FIELD_GENE_SYMBOL GeneDatasetRequest_SortField = 3
)

// Enum value maps for GeneDatasetRequest_SortField.
var (
	GeneDatasetRequest_SortField_name = map[int32]string{
		0: "SORT_FIELD_UNSPECIFIED",
		1: "SORT_FIELD_GENE_ID",
		2: "SORT_FIELD_GENE_TYPE",
		3: "SORT_FIELD_GENE_SYMBOL",
	}
	GeneDatasetRequest_SortField_value = map[string]int32{
		"SORT_FIELD_UNSPECIFIED": 0,
		"SORT_FIELD_GENE_ID":     1,
		"SORT_FIELD_GENE_TYPE":   2,
		"SORT_FIELD_GENE_SYMBOL": 3,
	}
)

func (x GeneDatasetRequest_SortField) Enum() *GeneDatasetRequest_SortField {
	p := new(GeneDatasetRequest_SortField)
	*p = x
	return p
}

func (x GeneDatasetRequest_SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneDatasetRequest_SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[15].Descriptor()
}

func (GeneDatasetRequest_SortField) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[15]
}

func (x GeneDatasetRequest_SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeneDatasetRequest_SortField.Descriptor instead.
func (GeneDatasetRequest_SortField) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{22, 1}
}

type Transcript_TranscriptType int32

const (
	Transcript_UNKNOWN              Transcript_TranscriptType = 0
	Transcript_PROTEIN_CODING       Transcript_TranscriptType = 1
	Transcript_NON_CODING           Transcript_TranscriptType = 2
	Transcript_PROTEIN_CODING_MODEL Transcript_TranscriptType = 3
	Transcript_NON_CODING_MODEL     Transcript_TranscriptType = 4
)

// Enum value maps for Transcript_TranscriptType.
var (
	Transcript_TranscriptType_name = map[int32]string{
		0: "UNKNOWN",
		1: "PROTEIN_CODING",
		2: "NON_CODING",
		3: "PROTEIN_CODING_MODEL",
		4: "NON_CODING_MODEL",
	}
	Transcript_TranscriptType_value = map[string]int32{
		"UNKNOWN":              0,
		"PROTEIN_CODING":       1,
		"NON_CODING":           2,
		"PROTEIN_CODING_MODEL": 3,
		"NON_CODING_MODEL":     4,
	}
)

func (x Transcript_TranscriptType) Enum() *Transcript_TranscriptType {
	p := new(Transcript_TranscriptType)
	*p = x
	return p
}

func (x Transcript_TranscriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transcript_TranscriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[16].Descriptor()
}

func (Transcript_TranscriptType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[16]
}

func (x Transcript_TranscriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transcript_TranscriptType.Descriptor instead.
func (Transcript_TranscriptType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{28, 0}
}

type GenomicRegion_GenomicRegionType int32

const (
	GenomicRegion_UNKNOWN           GenomicRegion_GenomicRegionType = 0
	GenomicRegion_REFSEQ_GENE       GenomicRegion_GenomicRegionType = 1
	GenomicRegion_PSEUDOGENE        GenomicRegion_GenomicRegionType = 2
	GenomicRegion_BIOLOGICAL_REGION GenomicRegion_GenomicRegionType = 3
	GenomicRegion_OTHER             GenomicRegion_GenomicRegionType = 4
)

// Enum value maps for GenomicRegion_GenomicRegionType.
var (
	GenomicRegion_GenomicRegionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "REFSEQ_GENE",
		2: "PSEUDOGENE",
		3: "BIOLOGICAL_REGION",
		4: "OTHER",
	}
	GenomicRegion_GenomicRegionType_value = map[string]int32{
		"UNKNOWN":           0,
		"REFSEQ_GENE":       1,
		"PSEUDOGENE":        2,
		"BIOLOGICAL_REGION": 3,
		"OTHER":             4,
	}
)

func (x GenomicRegion_GenomicRegionType) Enum() *GenomicRegion_GenomicRegionType {
	p := new(GenomicRegion_GenomicRegionType)
	*p = x
	return p
}

func (x GenomicRegion_GenomicRegionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenomicRegion_GenomicRegionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[17].Descriptor()
}

func (GenomicRegion_GenomicRegionType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[17]
}

func (x GenomicRegion_GenomicRegionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenomicRegion_GenomicRegionType.Descriptor instead.
func (GenomicRegion_GenomicRegionType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{29, 0}
}

type GeneDescriptor_GeneType int32

const (
	GeneDescriptor_UNKNOWN           GeneDescriptor_GeneType = 0
	GeneDescriptor_tRNA              GeneDescriptor_GeneType = 1
	GeneDescriptor_rRNA              GeneDescriptor_GeneType = 2
	GeneDescriptor_snRNA             GeneDescriptor_GeneType = 3
	GeneDescriptor_scRNA             GeneDescriptor_GeneType = 4
	GeneDescriptor_snoRNA            GeneDescriptor_GeneType = 5
	GeneDescriptor_PROTEIN_CODING    GeneDescriptor_GeneType = 6
	GeneDescriptor_PSEUDO            GeneDescriptor_GeneType = 7 // these will have NG or NR
	GeneDescriptor_TRANSPOSON        GeneDescriptor_GeneType = 8
	GeneDescriptor_miscRNA           GeneDescriptor_GeneType = 9
	GeneDescriptor_ncRNA             GeneDescriptor_GeneType = 10
	GeneDescriptor_BIOLOGICAL_REGION GeneDescriptor_GeneType = 11 // these will have NG
	GeneDescriptor_OTHER             GeneDescriptor_GeneType = 255
)

// Enum value maps for GeneDescriptor_GeneType.
var (
	GeneDescriptor_GeneType_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "tRNA",
		2:   "rRNA",
		3:   "snRNA",
		4:   "scRNA",
		5:   "snoRNA",
		6:   "PROTEIN_CODING",
		7:   "PSEUDO",
		8:   "TRANSPOSON",
		9:   "miscRNA",
		10:  "ncRNA",
		11:  "BIOLOGICAL_REGION",
		255: "OTHER",
	}
	GeneDescriptor_GeneType_value = map[string]int32{
		"UNKNOWN":           0,
		"tRNA":              1,
		"rRNA":              2,
		"snRNA":             3,
		"scRNA":             4,
		"snoRNA":            5,
		"PROTEIN_CODING":    6,
		"PSEUDO":            7,
		"TRANSPOSON":        8,
		"miscRNA":           9,
		"ncRNA":             10,
		"BIOLOGICAL_REGION": 11,
		"OTHER":             255,
	}
)

func (x GeneDescriptor_GeneType) Enum() *GeneDescriptor_GeneType {
	p := new(GeneDescriptor_GeneType)
	*p = x
	return p
}

func (x GeneDescriptor_GeneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneDescriptor_GeneType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[18].Descriptor()
}

func (GeneDescriptor_GeneType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[18]
}

func (x GeneDescriptor_GeneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeneDescriptor_GeneType.Descriptor instead.
func (GeneDescriptor_GeneType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{32, 0}
}

type GeneDescriptor_RnaType int32

const (
	GeneDescriptor_rna_UNKNOWN GeneDescriptor_RnaType = 0
	GeneDescriptor_premsg      GeneDescriptor_RnaType = 1
	GeneDescriptor_tmRna       GeneDescriptor_RnaType = 2
)

// Enum value maps for GeneDescriptor_RnaType.
var (
	GeneDescriptor_RnaType_name = map[int32]string{
		0: "rna_UNKNOWN",
		1: "premsg",
		2: "tmRna",
	}
	GeneDescriptor_RnaType_value = map[string]int32{
		"rna_UNKNOWN": 0,
		"premsg":      1,
		"tmRna":       2,
	}
)

func (x GeneDescriptor_RnaType) Enum() *GeneDescriptor_RnaType {
	p := new(GeneDescriptor_RnaType)
	*p = x
	return p
}

func (x GeneDescriptor_RnaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneDescriptor_RnaType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[19].Descriptor()
}

func (GeneDescriptor_RnaType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[19]
}

func (x GeneDescriptor_RnaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeneDescriptor_RnaType.Descriptor instead.
func (GeneDescriptor_RnaType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{32, 1}
}

type Error_AssemblyErrorCode int32

const (
	Error_UNKNOWN_ASSEMBLY_ERROR_CODE   Error_AssemblyErrorCode = 0
	Error_INVALID_BIOPROJECT_IDS        Error_AssemblyErrorCode = 1
	Error_NO_ASSEMBLIES_FOR_BIOPROJECTS Error_AssemblyErrorCode = 2
	Error_INVALID_TAXON                 Error_AssemblyErrorCode = 3
)

// Enum value maps for Error_AssemblyErrorCode.
var (
	Error_AssemblyErrorCode_name = map[int32]string{
		0: "UNKNOWN_ASSEMBLY_ERROR_CODE",
		1: "INVALID_BIOPROJECT_IDS",
		2: "NO_ASSEMBLIES_FOR_BIOPROJECTS",
		3: "INVALID_TAXON",
	}
	Error_AssemblyErrorCode_value = map[string]int32{
		"UNKNOWN_ASSEMBLY_ERROR_CODE":   0,
		"INVALID_BIOPROJECT_IDS":        1,
		"NO_ASSEMBLIES_FOR_BIOPROJECTS": 2,
		"INVALID_TAXON":                 3,
	}
)

func (x Error_AssemblyErrorCode) Enum() *Error_AssemblyErrorCode {
	p := new(Error_AssemblyErrorCode)
	*p = x
	return p
}

func (x Error_AssemblyErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_AssemblyErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[20].Descriptor()
}

func (Error_AssemblyErrorCode) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[20]
}

func (x Error_AssemblyErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_AssemblyErrorCode.Descriptor instead.
func (Error_AssemblyErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{34, 0}
}

type Error_GeneErrorCode int32

const (
	Error_UNKNOWN_GENE_ERROR_CODE  Error_GeneErrorCode = 0
	Error_INCOMPLETE_LOOKUP_SYMBOL Error_GeneErrorCode = 5
)

// Enum value maps for Error_GeneErrorCode.
var (
	Error_GeneErrorCode_name = map[int32]string{
		0: "UNKNOWN_GENE_ERROR_CODE",
		5: "INCOMPLETE_LOOKUP_SYMBOL",
	}
	Error_GeneErrorCode_value = map[string]int32{
		"UNKNOWN_GENE_ERROR_CODE":  0,
		"INCOMPLETE_LOOKUP_SYMBOL": 5,
	}
)

func (x Error_GeneErrorCode) Enum() *Error_GeneErrorCode {
	p := new(Error_GeneErrorCode)
	*p = x
	return p
}

func (x Error_GeneErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_GeneErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[21].Descriptor()
}

func (Error_GeneErrorCode) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[21]
}

func (x Error_GeneErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_GeneErrorCode.Descriptor instead.
func (Error_GeneErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{34, 1}
}

type Error_VirusErrorCode int32

const (
	Error_UNKNOWN_VIRUS_ERROR_CODE Error_VirusErrorCode = 0
)

// Enum value maps for Error_VirusErrorCode.
var (
	Error_VirusErrorCode_name = map[int32]string{
		0: "UNKNOWN_VIRUS_ERROR_CODE",
	}
	Error_VirusErrorCode_value = map[string]int32{
		"UNKNOWN_VIRUS_ERROR_CODE": 0,
	}
)

func (x Error_VirusErrorCode) Enum() *Error_VirusErrorCode {
	p := new(Error_VirusErrorCode)
	*p = x
	return p
}

func (x Error_VirusErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Error_VirusErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[22].Descriptor()
}

func (Error_VirusErrorCode) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[22]
}

func (x Error_VirusErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Error_VirusErrorCode.Descriptor instead.
func (Error_VirusErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{34, 2}
}

type Warning_GeneWarningCode int32

const (
	Warning_UNKNOWN_GENE_WARNING_CODE  Warning_GeneWarningCode = 0
	Warning_ACCESSION_VERSION_MISMATCH Warning_GeneWarningCode = 1
	Warning_REPLACED_GENE_ID           Warning_GeneWarningCode = 2
	Warning_DISCONTINUED_GENE_ID       Warning_GeneWarningCode = 3
	Warning_UNRECOGNIZED_GENE_ID       Warning_GeneWarningCode = 4
	Warning_UNRECOGNIZED_GENE_SYMBOL   Warning_GeneWarningCode = 5
	Warning_UNRECOGNIZED_ACCESSION     Warning_GeneWarningCode = 6
	Warning_UNRECOGNIZED_TAX_TOKEN     Warning_GeneWarningCode = 7
)

// Enum value maps for Warning_GeneWarningCode.
var (
	Warning_GeneWarningCode_name = map[int32]string{
		0: "UNKNOWN_GENE_WARNING_CODE",
		1: "ACCESSION_VERSION_MISMATCH",
		2: "REPLACED_GENE_ID",
		3: "DISCONTINUED_GENE_ID",
		4: "UNRECOGNIZED_GENE_ID",
		5: "UNRECOGNIZED_GENE_SYMBOL",
		6: "UNRECOGNIZED_ACCESSION",
		7: "UNRECOGNIZED_TAX_TOKEN",
	}
	Warning_GeneWarningCode_value = map[string]int32{
		"UNKNOWN_GENE_WARNING_CODE":  0,
		"ACCESSION_VERSION_MISMATCH": 1,
		"REPLACED_GENE_ID":           2,
		"DISCONTINUED_GENE_ID":       3,
		"UNRECOGNIZED_GENE_ID":       4,
		"UNRECOGNIZED_GENE_SYMBOL":   5,
		"UNRECOGNIZED_ACCESSION":     6,
		"UNRECOGNIZED_TAX_TOKEN":     7,
	}
)

func (x Warning_GeneWarningCode) Enum() *Warning_GeneWarningCode {
	p := new(Warning_GeneWarningCode)
	*p = x
	return p
}

func (x Warning_GeneWarningCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Warning_GeneWarningCode) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[23].Descriptor()
}

func (Warning_GeneWarningCode) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[23]
}

func (x Warning_GeneWarningCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Warning_GeneWarningCode.Descriptor instead.
func (Warning_GeneWarningCode) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{35, 0}
}

type AnnotationForVirus_Type int32

const (
	AnnotationForVirus_DEFAULT     AnnotationForVirus_Type = 0 // Ignored
	AnnotationForVirus_CDS_FASTA   AnnotationForVirus_Type = 1
	AnnotationForVirus_PROT_FASTA  AnnotationForVirus_Type = 2
	AnnotationForVirus_GENOME_GBFF AnnotationForVirus_Type = 3
	AnnotationForVirus_GENOME_GPFF AnnotationForVirus_Type = 4
	AnnotationForVirus_PDB_FILES   AnnotationForVirus_Type = 5
)

// Enum value maps for AnnotationForVirus_Type.
var (
	AnnotationForVirus_Type_name = map[int32]string{
		0: "DEFAULT",
		1: "CDS_FASTA",
		2: "PROT_FASTA",
		3: "GENOME_GBFF",
		4: "GENOME_GPFF",
		5: "PDB_FILES",
	}
	AnnotationForVirus_Type_value = map[string]int32{
		"DEFAULT":     0,
		"CDS_FASTA":   1,
		"PROT_FASTA":  2,
		"GENOME_GBFF": 3,
		"GENOME_GPFF": 4,
		"PDB_FILES":   5,
	}
)

func (x AnnotationForVirus_Type) Enum() *AnnotationForVirus_Type {
	p := new(AnnotationForVirus_Type)
	*p = x
	return p
}

func (x AnnotationForVirus_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnotationForVirus_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[24].Descriptor()
}

func (AnnotationForVirus_Type) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[24]
}

func (x AnnotationForVirus_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnotationForVirus_Type.Descriptor instead.
func (AnnotationForVirus_Type) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{42, 0}
}

type MicroBiggeDatasetRequest_FileType int32

const (
	MicroBiggeDatasetRequest_FILE_TYPE_UNSPECIFIED MicroBiggeDatasetRequest_FileType = 0 //Elide from docs.  Ignore in implementation.
	MicroBiggeDatasetRequest_element_fasta         MicroBiggeDatasetRequest_FileType = 1
	MicroBiggeDatasetRequest_element_flank_fasta   MicroBiggeDatasetRequest_FileType = 2
	MicroBiggeDatasetRequest_contig_fasta          MicroBiggeDatasetRequest_FileType = 3
	MicroBiggeDatasetRequest_protein_fasta         MicroBiggeDatasetRequest_FileType = 4
)

// Enum value maps for MicroBiggeDatasetRequest_FileType.
var (
	MicroBiggeDatasetRequest_FileType_name = map[int32]string{
		0: "FILE_TYPE_UNSPECIFIED",
		1: "element_fasta",
		2: "element_flank_fasta",
		3: "contig_fasta",
		4: "protein_fasta",
	}
	MicroBiggeDatasetRequest_FileType_value = map[string]int32{
		"FILE_TYPE_UNSPECIFIED": 0,
		"element_fasta":         1,
		"element_flank_fasta":   2,
		"contig_fasta":          3,
		"protein_fasta":         4,
	}
)

func (x MicroBiggeDatasetRequest_FileType) Enum() *MicroBiggeDatasetRequest_FileType {
	p := new(MicroBiggeDatasetRequest_FileType)
	*p = x
	return p
}

func (x MicroBiggeDatasetRequest_FileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MicroBiggeDatasetRequest_FileType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[25].Descriptor()
}

func (MicroBiggeDatasetRequest_FileType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes[25]
}

func (x MicroBiggeDatasetRequest_FileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MicroBiggeDatasetRequest_FileType.Descriptor instead.
func (MicroBiggeDatasetRequest_FileType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{47, 0}
}

type MethodPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These are a special form of base64 + special encoding to be suitable for a URI.
	Method  string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *MethodPayloadRequest) Reset() {
	*x = MethodPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodPayloadRequest) ProtoMessage() {}

func (x *MethodPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodPayloadRequest.ProtoReflect.Descriptor instead.
func (*MethodPayloadRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{0}
}

func (x *MethodPayloadRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *MethodPayloadRequest) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type AssemblyDatasetDescriptorsFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, only return reference and representative (GCF_ and GCA_) genome assemblies.
	ReferenceOnly bool `protobuf:"varint,1,opt,name=reference_only,json=referenceOnly,proto3" json:"reference_only,omitempty"`
	// If true, only return RefSeq (GCF_) genome assemblies.
	// Deprecated - use assembly_type instead.
	//
	// Deprecated: Do not use.
	RefseqOnly bool `protobuf:"varint,2,opt,name=refseq_only,json=refseqOnly,proto3" json:"refseq_only,omitempty"`
	// Return only RefSeq (GCF_) or GenBank (GCA_) genome assemblies
	AssemblySource AssemblyDatasetDescriptorsFilter_AssemblySource `protobuf:"varint,3,opt,name=assembly_source,json=assemblySource,proto3,enum=ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter_AssemblySource" json:"assembly_source,omitempty"`
	// Return only annotated genome assemblies
	HasAnnotation bool `protobuf:"varint,7,opt,name=has_annotation,json=hasAnnotation,proto3" json:"has_annotation,omitempty"`
	// Only return genome assemblies that have one of the specified assembly levels
	AssemblyLevel []AssemblyDatasetDescriptorsFilter_AssemblyLevel `protobuf:"varint,4,rep,packed,name=assembly_level,json=assemblyLevel,proto3,enum=ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter_AssemblyLevel" json:"assembly_level,omitempty"`
	// Only return genome assemblies that were released on or after the specified date
	FirstReleaseDate *timestamp.Timestamp `protobuf:"bytes,5,opt,name=first_release_date,json=firstReleaseDate,proto3" json:"first_release_date,omitempty"`
	// Only return genome assemblies that were released on or before to the specified date
	LastReleaseDate *timestamp.Timestamp `protobuf:"bytes,6,opt,name=last_release_date,json=lastReleaseDate,proto3" json:"last_release_date,omitempty"`
	// Only return results whose fields contain the specified search terms in their
	// taxon, infraspecific, assembly name or submitter fields
	SearchText []string `protobuf:"bytes,8,rep,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
}

func (x *AssemblyDatasetDescriptorsFilter) Reset() {
	*x = AssemblyDatasetDescriptorsFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyDatasetDescriptorsFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyDatasetDescriptorsFilter) ProtoMessage() {}

func (x *AssemblyDatasetDescriptorsFilter) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyDatasetDescriptorsFilter.ProtoReflect.Descriptor instead.
func (*AssemblyDatasetDescriptorsFilter) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{1}
}

func (x *AssemblyDatasetDescriptorsFilter) GetReferenceOnly() bool {
	if x != nil {
		return x.ReferenceOnly
	}
	return false
}

// Deprecated: Do not use.
func (x *AssemblyDatasetDescriptorsFilter) GetRefseqOnly() bool {
	if x != nil {
		return x.RefseqOnly
	}
	return false
}

func (x *AssemblyDatasetDescriptorsFilter) GetAssemblySource() AssemblyDatasetDescriptorsFilter_AssemblySource {
	if x != nil {
		return x.AssemblySource
	}
	return AssemblyDatasetDescriptorsFilter_all
}

func (x *AssemblyDatasetDescriptorsFilter) GetHasAnnotation() bool {
	if x != nil {
		return x.HasAnnotation
	}
	return false
}

func (x *AssemblyDatasetDescriptorsFilter) GetAssemblyLevel() []AssemblyDatasetDescriptorsFilter_AssemblyLevel {
	if x != nil {
		return x.AssemblyLevel
	}
	return nil
}

func (x *AssemblyDatasetDescriptorsFilter) GetFirstReleaseDate() *timestamp.Timestamp {
	if x != nil {
		return x.FirstReleaseDate
	}
	return nil
}

func (x *AssemblyDatasetDescriptorsFilter) GetLastReleaseDate() *timestamp.Timestamp {
	if x != nil {
		return x.LastReleaseDate
	}
	return nil
}

func (x *AssemblyDatasetDescriptorsFilter) GetSearchText() []string {
	if x != nil {
		return x.SearchText
	}
	return nil
}

type Accessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accessions []string `protobuf:"bytes,1,rep,name=accessions,proto3" json:"accessions,omitempty"`
}

func (x *Accessions) Reset() {
	*x = Accessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Accessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Accessions) ProtoMessage() {}

func (x *Accessions) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Accessions.ProtoReflect.Descriptor instead.
func (*Accessions) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{2}
}

func (x *Accessions) GetAccessions() []string {
	if x != nil {
		return x.Accessions
	}
	return nil
}

type AssemblyMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank
	Taxon string `protobuf:"bytes,1,opt,name=taxon,proto3" json:"taxon,omitempty"`
	// NCBI assembly accession
	Accessions *Accessions `protobuf:"bytes,2,opt,name=accessions,proto3" json:"accessions,omitempty"`
	// NCBI bioproject accessions
	Bioprojects *AssemblyMetadataRequest_Bioprojects `protobuf:"bytes,7,opt,name=bioprojects,proto3" json:"bioprojects,omitempty"`
	Filters     *AssemblyDatasetDescriptorsFilter    `protobuf:"bytes,4,opt,name=filters,proto3" json:"filters,omitempty"`
	// If true, only return assemblies with the given NCBI Taxonomy ID, or name.
	// Otherwise, assemblies from taxonomy subtree are included, too.
	// Ignored for assembly_accession request.
	TaxExactMatch bool `protobuf:"varint,5,opt,name=tax_exact_match,json=taxExactMatch,proto3" json:"tax_exact_match,omitempty"`
	// Return either assembly accessions, or entire assembly-metadata records
	ReturnedContent AssemblyMetadataRequest_ContentType `protobuf:"varint,6,opt,name=returned_content,json=returnedContent,proto3,enum=ncbi.datasets.v1alpha1.AssemblyMetadataRequest_ContentType" json:"returned_content,omitempty"`
	// Types that are assignable to Records:
	//	*AssemblyMetadataRequest_Limit
	//	*AssemblyMetadataRequest_PageSize
	Records isAssemblyMetadataRequest_Records `protobuf_oneof:"records"`
	// A page token is returned from an `AssemblyMetadataRequest` call with
	// more than `page_size` results. Use this token, along with the previous
	// `AssemblyMetadataRequest` parameters, to retrieve the next page of
	// results. When `page_token` is empty, all results have been retrieved.
	PageToken string `protobuf:"bytes,9,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *AssemblyMetadataRequest) Reset() {
	*x = AssemblyMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyMetadataRequest) ProtoMessage() {}

func (x *AssemblyMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyMetadataRequest.ProtoReflect.Descriptor instead.
func (*AssemblyMetadataRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{3}
}

func (x *AssemblyMetadataRequest) GetTaxon() string {
	if x != nil {
		return x.Taxon
	}
	return ""
}

func (x *AssemblyMetadataRequest) GetAccessions() *Accessions {
	if x != nil {
		return x.Accessions
	}
	return nil
}

func (x *AssemblyMetadataRequest) GetBioprojects() *AssemblyMetadataRequest_Bioprojects {
	if x != nil {
		return x.Bioprojects
	}
	return nil
}

func (x *AssemblyMetadataRequest) GetFilters() *AssemblyDatasetDescriptorsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *AssemblyMetadataRequest) GetTaxExactMatch() bool {
	if x != nil {
		return x.TaxExactMatch
	}
	return false
}

func (x *AssemblyMetadataRequest) GetReturnedContent() AssemblyMetadataRequest_ContentType {
	if x != nil {
		return x.ReturnedContent
	}
	return AssemblyMetadataRequest_COMPLETE
}

func (m *AssemblyMetadataRequest) GetRecords() isAssemblyMetadataRequest_Records {
	if m != nil {
		return m.Records
	}
	return nil
}

// Deprecated: Do not use.
func (x *AssemblyMetadataRequest) GetLimit() string {
	if x, ok := x.GetRecords().(*AssemblyMetadataRequest_Limit); ok {
		return x.Limit
	}
	return ""
}

func (x *AssemblyMetadataRequest) GetPageSize() int32 {
	if x, ok := x.GetRecords().(*AssemblyMetadataRequest_PageSize); ok {
		return x.PageSize
	}
	return 0
}

func (x *AssemblyMetadataRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type isAssemblyMetadataRequest_Records interface {
	isAssemblyMetadataRequest_Records()
}

type AssemblyMetadataRequest_Limit struct {
	// Deprecated - Limit the number of returned results ("all", "none", otherwise an integer value)
	//
	// Deprecated: Do not use.
	Limit string `protobuf:"bytes,3,opt,name=limit,proto3,oneof"`
}

type AssemblyMetadataRequest_PageSize struct {
	// The maximum number of genome assemblies to return. Default is 20 and
	// maximum is 1000. If the number of results exceeds the page size,
	// `page_token` can be used to retrieve the remaining results.
	PageSize int32 `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3,oneof"`
}

func (*AssemblyMetadataRequest_Limit) isAssemblyMetadataRequest_Records() {}

func (*AssemblyMetadataRequest_PageSize) isAssemblyMetadataRequest_Records() {}

type AssemblyDatasetDescriptorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//	*AssemblyDatasetDescriptorsRequest_TaxId
	//	*AssemblyDatasetDescriptorsRequest_OrgName
	//	*AssemblyDatasetDescriptorsRequest_TaxName
	//	*AssemblyDatasetDescriptorsRequest_AssemblyAccession
	Id isAssemblyDatasetDescriptorsRequest_Id `protobuf_oneof:"id"`
	// Types that are assignable to Records:
	//	*AssemblyDatasetDescriptorsRequest_Cutoff
	//	*AssemblyDatasetDescriptorsRequest_Limit
	Records isAssemblyDatasetDescriptorsRequest_Records `protobuf_oneof:"records"`
	Filters *AssemblyDatasetDescriptorsFilter           `protobuf:"bytes,3,opt,name=filters,proto3" json:"filters,omitempty"`
	// If true, only return assemblies with the given NCBI Taxonomy ID, or name.
	// Otherwise, assemblies from taxonomy subtree are included, too.
	// Ignored for assembly_accession request.
	TaxExactMatch bool `protobuf:"varint,6,opt,name=tax_exact_match,json=taxExactMatch,proto3" json:"tax_exact_match,omitempty"`
	// Return either assembly accessions, or entire assembly-metadata records
	ReturnedContent AssemblyDatasetDescriptorsRequest_ContentType `protobuf:"varint,9,opt,name=returned_content,json=returnedContent,proto3,enum=ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsRequest_ContentType" json:"returned_content,omitempty"`
}

func (x *AssemblyDatasetDescriptorsRequest) Reset() {
	*x = AssemblyDatasetDescriptorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyDatasetDescriptorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyDatasetDescriptorsRequest) ProtoMessage() {}

func (x *AssemblyDatasetDescriptorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyDatasetDescriptorsRequest.ProtoReflect.Descriptor instead.
func (*AssemblyDatasetDescriptorsRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{4}
}

func (m *AssemblyDatasetDescriptorsRequest) GetId() isAssemblyDatasetDescriptorsRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *AssemblyDatasetDescriptorsRequest) GetTaxId() uint32 {
	if x, ok := x.GetId().(*AssemblyDatasetDescriptorsRequest_TaxId); ok {
		return x.TaxId
	}
	return 0
}

// Deprecated: Do not use.
func (x *AssemblyDatasetDescriptorsRequest) GetOrgName() string {
	if x, ok := x.GetId().(*AssemblyDatasetDescriptorsRequest_OrgName); ok {
		return x.OrgName
	}
	return ""
}

func (x *AssemblyDatasetDescriptorsRequest) GetTaxName() string {
	if x, ok := x.GetId().(*AssemblyDatasetDescriptorsRequest_TaxName); ok {
		return x.TaxName
	}
	return ""
}

func (x *AssemblyDatasetDescriptorsRequest) GetAssemblyAccession() string {
	if x, ok := x.GetId().(*AssemblyDatasetDescriptorsRequest_AssemblyAccession); ok {
		return x.AssemblyAccession
	}
	return ""
}

func (m *AssemblyDatasetDescriptorsRequest) GetRecords() isAssemblyDatasetDescriptorsRequest_Records {
	if m != nil {
		return m.Records
	}
	return nil
}

// Deprecated: Do not use.
func (x *AssemblyDatasetDescriptorsRequest) GetCutoff() uint32 {
	if x, ok := x.GetRecords().(*AssemblyDatasetDescriptorsRequest_Cutoff); ok {
		return x.Cutoff
	}
	return 0
}

func (x *AssemblyDatasetDescriptorsRequest) GetLimit() string {
	if x, ok := x.GetRecords().(*AssemblyDatasetDescriptorsRequest_Limit); ok {
		return x.Limit
	}
	return ""
}

func (x *AssemblyDatasetDescriptorsRequest) GetFilters() *AssemblyDatasetDescriptorsFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *AssemblyDatasetDescriptorsRequest) GetTaxExactMatch() bool {
	if x != nil {
		return x.TaxExactMatch
	}
	return false
}

func (x *AssemblyDatasetDescriptorsRequest) GetReturnedContent() AssemblyDatasetDescriptorsRequest_ContentType {
	if x != nil {
		return x.ReturnedContent
	}
	return AssemblyDatasetDescriptorsRequest_COMPLETE
}

type isAssemblyDatasetDescriptorsRequest_Id interface {
	isAssemblyDatasetDescriptorsRequest_Id()
}

type AssemblyDatasetDescriptorsRequest_TaxId struct {
	// NCBI Taxonomy ID
	TaxId uint32 `protobuf:"varint,1,opt,name=tax_id,json=taxId,proto3,oneof"`
}

type AssemblyDatasetDescriptorsRequest_OrgName struct {
	// Common or scientific name at any taxonomic rank
	//
	// Deprecated: Do not use.
	OrgName string `protobuf:"bytes,5,opt,name=org_name,json=orgName,proto3,oneof"`
}

type AssemblyDatasetDescriptorsRequest_TaxName struct {
	TaxName string `protobuf:"bytes,7,opt,name=tax_name,json=taxName,proto3,oneof"`
}

type AssemblyDatasetDescriptorsRequest_AssemblyAccession struct {
	// NCBI Assembly accession
	AssemblyAccession string `protobuf:"bytes,4,opt,name=assembly_accession,json=assemblyAccession,proto3,oneof"`
}

func (*AssemblyDatasetDescriptorsRequest_TaxId) isAssemblyDatasetDescriptorsRequest_Id() {}

func (*AssemblyDatasetDescriptorsRequest_OrgName) isAssemblyDatasetDescriptorsRequest_Id() {}

func (*AssemblyDatasetDescriptorsRequest_TaxName) isAssemblyDatasetDescriptorsRequest_Id() {}

func (*AssemblyDatasetDescriptorsRequest_AssemblyAccession) isAssemblyDatasetDescriptorsRequest_Id() {
}

type isAssemblyDatasetDescriptorsRequest_Records interface {
	isAssemblyDatasetDescriptorsRequest_Records()
}

type AssemblyDatasetDescriptorsRequest_Cutoff struct {
	// Limit the number of results for the above query term.
	//
	// Deprecated: Do not use.
	Cutoff uint32 `protobuf:"varint,2,opt,name=cutoff,proto3,oneof"`
}

type AssemblyDatasetDescriptorsRequest_Limit struct {
	// Limit the number of returned results ("all", "none", otherwise an integer value)
	Limit string `protobuf:"bytes,8,opt,name=limit,proto3,oneof"`
}

func (*AssemblyDatasetDescriptorsRequest_Cutoff) isAssemblyDatasetDescriptorsRequest_Records() {}

func (*AssemblyDatasetDescriptorsRequest_Limit) isAssemblyDatasetDescriptorsRequest_Records() {}

type AssemblyDatasetDescriptors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of all datasets that match the request, up to the provided limit.
	Datasets []*AssemblyDatasetDescriptor `protobuf:"bytes,1,rep,name=datasets,proto3" json:"datasets,omitempty"`
	// The total count of available datasets (ignoring the cutoff parameter).
	TotalCount uint32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *AssemblyDatasetDescriptors) Reset() {
	*x = AssemblyDatasetDescriptors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyDatasetDescriptors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyDatasetDescriptors) ProtoMessage() {}

func (x *AssemblyDatasetDescriptors) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyDatasetDescriptors.ProtoReflect.Descriptor instead.
func (*AssemblyDatasetDescriptors) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{5}
}

func (x *AssemblyDatasetDescriptors) GetDatasets() []*AssemblyDatasetDescriptor {
	if x != nil {
		return x.Datasets
	}
	return nil
}

func (x *AssemblyDatasetDescriptors) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type BioProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accession        string   `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	Title            string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	ParentAccession  string   `protobuf:"bytes,3,opt,name=parent_accession,json=parentAccession,proto3" json:"parent_accession,omitempty"`
	ParentAccessions []string `protobuf:"bytes,4,rep,name=parent_accessions,json=parentAccessions,proto3" json:"parent_accessions,omitempty"`
}

func (x *BioProject) Reset() {
	*x = BioProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioProject) ProtoMessage() {}

func (x *BioProject) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioProject.ProtoReflect.Descriptor instead.
func (*BioProject) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{6}
}

func (x *BioProject) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *BioProject) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BioProject) GetParentAccession() string {
	if x != nil {
		return x.ParentAccession
	}
	return ""
}

func (x *BioProject) GetParentAccessions() []string {
	if x != nil {
		return x.ParentAccessions
	}
	return nil
}

type BioProjectLineage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In order, from most specific, up to the root.
	Bioprojects []*BioProject `protobuf:"bytes,1,rep,name=bioprojects,proto3" json:"bioprojects,omitempty"`
}

func (x *BioProjectLineage) Reset() {
	*x = BioProjectLineage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioProjectLineage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioProjectLineage) ProtoMessage() {}

func (x *BioProjectLineage) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioProjectLineage.ProtoReflect.Descriptor instead.
func (*BioProjectLineage) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{7}
}

func (x *BioProjectLineage) GetBioprojects() []*BioProject {
	if x != nil {
		return x.Bioprojects
	}
	return nil
}

type AssemblyDatasetDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The GenColl assembly accession
	// (e.g. GCF_000001405.39)
	AssemblyAccession string `protobuf:"bytes,1,opt,name=assembly_accession,json=assemblyAccession,proto3" json:"assembly_accession,omitempty"`
	// The bioproject(s) associated with this assembly
	BioprojectLineages []*BioProjectLineage `protobuf:"bytes,14,rep,name=bioproject_lineages,json=bioprojectLineages,proto3" json:"bioproject_lineages,omitempty"`
	// The name of the Assembly dataset to be displayed
	// in a user interface.
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Organism information
	Org *Organism `protobuf:"bytes,10,opt,name=org,proto3" json:"org,omitempty"`
	// Which chromosomes are included in this dataset.
	// NB: Mitochondria is encoded as 'MT'.
	Chromosomes []string `protobuf:"bytes,4,rep,name=chromosomes,proto3" json:"chromosomes,omitempty"`
	// Category of assembly, like reference.
	AssemblyCategory string `protobuf:"bytes,5,opt,name=assembly_category,json=assemblyCategory,proto3" json:"assembly_category,omitempty"`
	// Annotation available for this assembly
	AnnotationMetadata *AnnotationForAssembly `protobuf:"bytes,11,opt,name=annotation_metadata,json=annotationMetadata,proto3" json:"annotation_metadata,omitempty"`
	// The level of the assembly, e.g. Chromosome, Scaffold, Contig or Complete Genome
	AssemblyLevel string `protobuf:"bytes,7,opt,name=assembly_level,json=assemblyLevel,proto3" json:"assembly_level,omitempty"`
	// The submitting consortium or organization. Full submitter information is available in the BioProject
	Submitter string `protobuf:"bytes,15,opt,name=submitter,proto3" json:"submitter,omitempty"`
	// Date the assembly was provided to NCBI
	SubmissionDate string `protobuf:"bytes,8,opt,name=submission_date,json=submissionDate,proto3" json:"submission_date,omitempty"`
	// Minimum contig length needed to cover 50% of the genome
	ContigN50 uint32 `protobuf:"varint,9,opt,name=contig_n50,json=contigN50,proto3" json:"contig_n50,omitempty"`
	// Estimated size of all annotation and sequence files in download
	EstimatedSize uint64 `protobuf:"varint,12,opt,name=estimated_size,json=estimatedSize,proto3" json:"estimated_size,omitempty"`
	// Combined length of all sequence data
	SeqLength uint64 `protobuf:"varint,13,opt,name=seq_length,json=seqLength,proto3" json:"seq_length,omitempty"`
	// NCBI BioSample Accession for the BioSample from which the sequences in the genome
	// assembly were obtained.
	BiosampleAccession string `protobuf:"bytes,16,opt,name=biosample_accession,json=biosampleAccession,proto3" json:"biosample_accession,omitempty"`
}

func (x *AssemblyDatasetDescriptor) Reset() {
	*x = AssemblyDatasetDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyDatasetDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyDatasetDescriptor) ProtoMessage() {}

func (x *AssemblyDatasetDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyDatasetDescriptor.ProtoReflect.Descriptor instead.
func (*AssemblyDatasetDescriptor) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{8}
}

func (x *AssemblyDatasetDescriptor) GetAssemblyAccession() string {
	if x != nil {
		return x.AssemblyAccession
	}
	return ""
}

func (x *AssemblyDatasetDescriptor) GetBioprojectLineages() []*BioProjectLineage {
	if x != nil {
		return x.BioprojectLineages
	}
	return nil
}

func (x *AssemblyDatasetDescriptor) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *AssemblyDatasetDescriptor) GetOrg() *Organism {
	if x != nil {
		return x.Org
	}
	return nil
}

func (x *AssemblyDatasetDescriptor) GetChromosomes() []string {
	if x != nil {
		return x.Chromosomes
	}
	return nil
}

func (x *AssemblyDatasetDescriptor) GetAssemblyCategory() string {
	if x != nil {
		return x.AssemblyCategory
	}
	return ""
}

func (x *AssemblyDatasetDescriptor) GetAnnotationMetadata() *AnnotationForAssembly {
	if x != nil {
		return x.AnnotationMetadata
	}
	return nil
}

func (x *AssemblyDatasetDescriptor) GetAssemblyLevel() string {
	if x != nil {
		return x.AssemblyLevel
	}
	return ""
}

func (x *AssemblyDatasetDescriptor) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *AssemblyDatasetDescriptor) GetSubmissionDate() string {
	if x != nil {
		return x.SubmissionDate
	}
	return ""
}

func (x *AssemblyDatasetDescriptor) GetContigN50() uint32 {
	if x != nil {
		return x.ContigN50
	}
	return 0
}

func (x *AssemblyDatasetDescriptor) GetEstimatedSize() uint64 {
	if x != nil {
		return x.EstimatedSize
	}
	return 0
}

func (x *AssemblyDatasetDescriptor) GetSeqLength() uint64 {
	if x != nil {
		return x.SeqLength
	}
	return 0
}

func (x *AssemblyDatasetDescriptor) GetBiosampleAccession() string {
	if x != nil {
		return x.BiosampleAccession
	}
	return ""
}

type AnnotationForAssembly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Annotation name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Source of the annotation.  Possibly from a submitter.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// NCBI Annotation release number, if one exists.
	ReleaseNumber string `protobuf:"bytes,3,opt,name=release_number,json=releaseNumber,proto3" json:"release_number,omitempty"`
	// The date the annotation was released
	ReleaseDate string `protobuf:"bytes,4,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// NCBI annotation report website
	ReportUrl string `protobuf:"bytes,5,opt,name=report_url,json=reportUrl,proto3" json:"report_url,omitempty"`
	// List of annotation files available for this assembly.
	File []*AnnotationForAssembly_File `protobuf:"bytes,6,rep,name=file,proto3" json:"file,omitempty"`
	// Feature statistics
	Stats *FeatureCounts `protobuf:"bytes,7,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *AnnotationForAssembly) Reset() {
	*x = AnnotationForAssembly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationForAssembly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationForAssembly) ProtoMessage() {}

func (x *AnnotationForAssembly) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationForAssembly.ProtoReflect.Descriptor instead.
func (*AnnotationForAssembly) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{9}
}

func (x *AnnotationForAssembly) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnnotationForAssembly) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AnnotationForAssembly) GetReleaseNumber() string {
	if x != nil {
		return x.ReleaseNumber
	}
	return ""
}

func (x *AnnotationForAssembly) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *AnnotationForAssembly) GetReportUrl() string {
	if x != nil {
		return x.ReportUrl
	}
	return ""
}

func (x *AnnotationForAssembly) GetFile() []*AnnotationForAssembly_File {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *AnnotationForAssembly) GetStats() *FeatureCounts {
	if x != nil {
		return x.Stats
	}
	return nil
}

type FeatureCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counts of gene types
	GeneCounts *GeneCounts `protobuf:"bytes,1,opt,name=gene_counts,json=geneCounts,proto3" json:"gene_counts,omitempty"`
}

func (x *FeatureCounts) Reset() {
	*x = FeatureCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureCounts) ProtoMessage() {}

func (x *FeatureCounts) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureCounts.ProtoReflect.Descriptor instead.
func (*FeatureCounts) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{10}
}

func (x *FeatureCounts) GetGeneCounts() *GeneCounts {
	if x != nil {
		return x.GeneCounts
	}
	return nil
}

type GeneCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of annotated genes
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Count of annotated genes that encode a protein
	ProteinCoding uint32 `protobuf:"varint,2,opt,name=protein_coding,json=proteinCoding,proto3" json:"protein_coding,omitempty"`
}

func (x *GeneCounts) Reset() {
	*x = GeneCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneCounts) ProtoMessage() {}

func (x *GeneCounts) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneCounts.ProtoReflect.Descriptor instead.
func (*GeneCounts) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{11}
}

func (x *GeneCounts) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GeneCounts) GetProteinCoding() uint32 {
	if x != nil {
		return x.ProteinCoding
	}
	return 0
}

type AssemblyDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NCBI genome assembly accessions
	//
	// Deprecated: Do not use.
	AssemblyAccessions []string `protobuf:"bytes,1,rep,name=assembly_accessions,json=assemblyAccessions,proto3" json:"assembly_accessions,omitempty"`
	// NCBI genome assembly accessions
	Accessions []string `protobuf:"bytes,10,rep,name=accessions,proto3" json:"accessions,omitempty"`
	// The default setting is all chromosome.
	// Specify individual chromosome by string (1,2,MT or chr1,chr2.chrMT).
	// Unplaced sequences are treated like their own chromosome ('Un').
	// The filter only applies to fasta sequence.
	Chromosomes []string `protobuf:"bytes,2,rep,name=chromosomes,proto3" json:"chromosomes,omitempty"`
	// Deprecated: Do not use.
	IncludeAnnotation bool `protobuf:"varint,3,opt,name=include_annotation,json=includeAnnotation,proto3" json:"include_annotation,omitempty"`
	// Set to true to omit the genomic sequence.
	ExcludeSequence bool `protobuf:"varint,7,opt,name=exclude_sequence,json=excludeSequence,proto3" json:"exclude_sequence,omitempty"`
	// Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
	IncludeAnnotationType []AnnotationForAssembly_Type `protobuf:"varint,8,rep,packed,name=include_annotation_type,json=includeAnnotationType,proto3,enum=ncbi.datasets.v1alpha1.AnnotationForAssembly_Type" json:"include_annotation_type,omitempty"`
	// Set to DATA_REPORT_ONLY, to only retrieve data-reports.
	Hydrated AssemblyDatasetRequest_Resolution `protobuf:"varint,9,opt,name=hydrated,proto3,enum=ncbi.datasets.v1alpha1.AssemblyDatasetRequest_Resolution" json:"hydrated,omitempty"`
	// Set to true to include a TSV represention of the data-report.
	IncludeTsv bool `protobuf:"varint,11,opt,name=include_tsv,json=includeTsv,proto3" json:"include_tsv,omitempty"`
}

func (x *AssemblyDatasetRequest) Reset() {
	*x = AssemblyDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyDatasetRequest) ProtoMessage() {}

func (x *AssemblyDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyDatasetRequest.ProtoReflect.Descriptor instead.
func (*AssemblyDatasetRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Do not use.
func (x *AssemblyDatasetRequest) GetAssemblyAccessions() []string {
	if x != nil {
		return x.AssemblyAccessions
	}
	return nil
}

func (x *AssemblyDatasetRequest) GetAccessions() []string {
	if x != nil {
		return x.Accessions
	}
	return nil
}

func (x *AssemblyDatasetRequest) GetChromosomes() []string {
	if x != nil {
		return x.Chromosomes
	}
	return nil
}

// Deprecated: Do not use.
func (x *AssemblyDatasetRequest) GetIncludeAnnotation() bool {
	if x != nil {
		return x.IncludeAnnotation
	}
	return false
}

func (x *AssemblyDatasetRequest) GetExcludeSequence() bool {
	if x != nil {
		return x.ExcludeSequence
	}
	return false
}

func (x *AssemblyDatasetRequest) GetIncludeAnnotationType() []AnnotationForAssembly_Type {
	if x != nil {
		return x.IncludeAnnotationType
	}
	return nil
}

func (x *AssemblyDatasetRequest) GetHydrated() AssemblyDatasetRequest_Resolution {
	if x != nil {
		return x.Hydrated
	}
	return AssemblyDatasetRequest_FULLY_HYDRATED
}

func (x *AssemblyDatasetRequest) GetIncludeTsv() bool {
	if x != nil {
		return x.IncludeTsv
	}
	return false
}

type AssemblyDatasetAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidAssemblies   []string `protobuf:"bytes,1,rep,name=valid_assemblies,json=validAssemblies,proto3" json:"valid_assemblies,omitempty"`
	InvalidAssemblies []string `protobuf:"bytes,2,rep,name=invalid_assemblies,json=invalidAssemblies,proto3" json:"invalid_assemblies,omitempty"`
	Reason            string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *AssemblyDatasetAvailability) Reset() {
	*x = AssemblyDatasetAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyDatasetAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyDatasetAvailability) ProtoMessage() {}

func (x *AssemblyDatasetAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyDatasetAvailability.ProtoReflect.Descriptor instead.
func (*AssemblyDatasetAvailability) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{13}
}

func (x *AssemblyDatasetAvailability) GetValidAssemblies() []string {
	if x != nil {
		return x.ValidAssemblies
	}
	return nil
}

func (x *AssemblyDatasetAvailability) GetInvalidAssemblies() []string {
	if x != nil {
		return x.InvalidAssemblies
	}
	return nil
}

func (x *AssemblyDatasetAvailability) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type TaxidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgName string `protobuf:"bytes,1,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
}

func (x *TaxidRequest) Reset() {
	*x = TaxidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxidRequest) ProtoMessage() {}

func (x *TaxidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxidRequest.ProtoReflect.Descriptor instead.
func (*TaxidRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{14}
}

func (x *TaxidRequest) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type TaxidReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaxId uint32 `protobuf:"varint,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
}

func (x *TaxidReply) Reset() {
	*x = TaxidReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxidReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxidReply) ProtoMessage() {}

func (x *TaxidReply) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxidReply.ProtoReflect.Descriptor instead.
func (*TaxidReply) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{15}
}

func (x *TaxidReply) GetTaxId() uint32 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

type Organism struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//NCBI Taxonomy ID
	TaxId uint64 `protobuf:"varint,1,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	// Scientific Name
	SciName string `protobuf:"bytes,2,opt,name=sci_name,json=sciName,proto3" json:"sci_name,omitempty"`
	// Common Name of the organism
	CommonName string `protobuf:"bytes,3,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// True if a blast nodes
	BlastNode bool `protobuf:"varint,16,opt,name=blast_node,json=blastNode,proto3" json:"blast_node,omitempty"`
	// Infraspecies breed
	Breed string `protobuf:"bytes,10,opt,name=breed,proto3" json:"breed,omitempty"`
	// Infraspecies cultivar
	Cultivar string `protobuf:"bytes,11,opt,name=cultivar,proto3" json:"cultivar,omitempty"`
	// Infraspecies ecotype
	Ecotype string `protobuf:"bytes,12,opt,name=ecotype,proto3" json:"ecotype,omitempty"`
	// Infraspecies isolate
	Isolate string `protobuf:"bytes,13,opt,name=isolate,proto3" json:"isolate,omitempty"`
	// Infraspecies sex
	Sex string `protobuf:"bytes,14,opt,name=sex,proto3" json:"sex,omitempty"`
	// Infraspecies strain
	Strain string `protobuf:"bytes,15,opt,name=strain,proto3" json:"strain,omitempty"`
	// May include names from merged nodes
	SearchText []string `protobuf:"bytes,17,rep,name=search_text,json=searchText,proto3" json:"search_text,omitempty"`
	// The rank of the tax node.
	Rank Organism_RankType `protobuf:"varint,5,opt,name=rank,proto3,enum=ncbi.datasets.v1alpha1.Organism_RankType" json:"rank,omitempty"`
	// The parent taxnode ID
	ParentTaxId uint64 `protobuf:"varint,6,opt,name=parent_tax_id,json=parentTaxId,proto3" json:"parent_tax_id,omitempty"`
	// The number of assemblies at this node, and all children.
	//
	// Deprecated: Do not use.
	AssemblyCount uint64 `protobuf:"varint,7,opt,name=assembly_count,json=assemblyCount,proto3" json:"assembly_count,omitempty"`
	// assembly_counts will soon be deprecated
	AssemblyCounts *Organism_Counts        `protobuf:"bytes,19,opt,name=assembly_counts,json=assemblyCounts,proto3" json:"assembly_counts,omitempty"`
	Counts         []*Organism_CountByType `protobuf:"bytes,22,rep,name=counts,proto3" json:"counts,omitempty"`
	// List of all children tax nodes.
	Children []*Organism `protobuf:"bytes,8,rep,name=children,proto3" json:"children,omitempty"`
	// List of all merged tax nodes for the pruned taxonomic tree.
	Merged []*Organism `protobuf:"bytes,9,rep,name=merged,proto3" json:"merged,omitempty"`
	// List of merged (now deprecated) Taxonomy IDs for the current Organism.
	MergedTaxIds []uint64 `protobuf:"varint,18,rep,packed,name=merged_tax_ids,json=mergedTaxIds,proto3" json:"merged_tax_ids,omitempty"`
	// ordinal values for any node are the full range of the ordinal values
	// in the subtree underneath this node, and are used for faster range-based lookups
	MinOrd uint32 `protobuf:"varint,20,opt,name=min_ord,json=minOrd,proto3" json:"min_ord,omitempty"`
	MaxOrd uint32 `protobuf:"varint,21,opt,name=max_ord,json=maxOrd,proto3" json:"max_ord,omitempty"`
	Key    uint64 `protobuf:"varint,100,opt,name=key,proto3" json:"key,omitempty"`
	Title  string `protobuf:"bytes,101,opt,name=title,proto3" json:"title,omitempty"`
	Icon   bool   `protobuf:"varint,102,opt,name=icon,proto3" json:"icon,omitempty"`
}

func (x *Organism) Reset() {
	*x = Organism{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organism) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organism) ProtoMessage() {}

func (x *Organism) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organism.ProtoReflect.Descriptor instead.
func (*Organism) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{16}
}

func (x *Organism) GetTaxId() uint64 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

func (x *Organism) GetSciName() string {
	if x != nil {
		return x.SciName
	}
	return ""
}

func (x *Organism) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *Organism) GetBlastNode() bool {
	if x != nil {
		return x.BlastNode
	}
	return false
}

func (x *Organism) GetBreed() string {
	if x != nil {
		return x.Breed
	}
	return ""
}

func (x *Organism) GetCultivar() string {
	if x != nil {
		return x.Cultivar
	}
	return ""
}

func (x *Organism) GetEcotype() string {
	if x != nil {
		return x.Ecotype
	}
	return ""
}

func (x *Organism) GetIsolate() string {
	if x != nil {
		return x.Isolate
	}
	return ""
}

func (x *Organism) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *Organism) GetStrain() string {
	if x != nil {
		return x.Strain
	}
	return ""
}

func (x *Organism) GetSearchText() []string {
	if x != nil {
		return x.SearchText
	}
	return nil
}

func (x *Organism) GetRank() Organism_RankType {
	if x != nil {
		return x.Rank
	}
	return Organism_NO_RANK
}

func (x *Organism) GetParentTaxId() uint64 {
	if x != nil {
		return x.ParentTaxId
	}
	return 0
}

// Deprecated: Do not use.
func (x *Organism) GetAssemblyCount() uint64 {
	if x != nil {
		return x.AssemblyCount
	}
	return 0
}

func (x *Organism) GetAssemblyCounts() *Organism_Counts {
	if x != nil {
		return x.AssemblyCounts
	}
	return nil
}

func (x *Organism) GetCounts() []*Organism_CountByType {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *Organism) GetChildren() []*Organism {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Organism) GetMerged() []*Organism {
	if x != nil {
		return x.Merged
	}
	return nil
}

func (x *Organism) GetMergedTaxIds() []uint64 {
	if x != nil {
		return x.MergedTaxIds
	}
	return nil
}

func (x *Organism) GetMinOrd() uint32 {
	if x != nil {
		return x.MinOrd
	}
	return 0
}

func (x *Organism) GetMaxOrd() uint32 {
	if x != nil {
		return x.MaxOrd
	}
	return 0
}

func (x *Organism) GetKey() uint64 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *Organism) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Organism) GetIcon() bool {
	if x != nil {
		return x.Icon
	}
	return false
}

type TaxTreeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Taxonomy:
	//	*TaxTreeRequest_TaxId
	//	*TaxTreeRequest_TaxToken
	//	*TaxTreeRequest_Taxon
	Taxonomy isTaxTreeRequest_Taxonomy `protobuf_oneof:"taxonomy"`
}

func (x *TaxTreeRequest) Reset() {
	*x = TaxTreeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaxTreeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaxTreeRequest) ProtoMessage() {}

func (x *TaxTreeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaxTreeRequest.ProtoReflect.Descriptor instead.
func (*TaxTreeRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{17}
}

func (m *TaxTreeRequest) GetTaxonomy() isTaxTreeRequest_Taxonomy {
	if m != nil {
		return m.Taxonomy
	}
	return nil
}

// Deprecated: Do not use.
func (x *TaxTreeRequest) GetTaxId() uint64 {
	if x, ok := x.GetTaxonomy().(*TaxTreeRequest_TaxId); ok {
		return x.TaxId
	}
	return 0
}

// Deprecated: Do not use.
func (x *TaxTreeRequest) GetTaxToken() string {
	if x, ok := x.GetTaxonomy().(*TaxTreeRequest_TaxToken); ok {
		return x.TaxToken
	}
	return ""
}

func (x *TaxTreeRequest) GetTaxon() string {
	if x, ok := x.GetTaxonomy().(*TaxTreeRequest_Taxon); ok {
		return x.Taxon
	}
	return ""
}

type isTaxTreeRequest_Taxonomy interface {
	isTaxTreeRequest_Taxonomy()
}

type TaxTreeRequest_TaxId struct {
	// Deprecated: Do not use.
	TaxId uint64 `protobuf:"varint,1,opt,name=tax_id,json=taxId,proto3,oneof"`
}

type TaxTreeRequest_TaxToken struct {
	// Deprecated: Do not use.
	TaxToken string `protobuf:"bytes,2,opt,name=tax_token,json=taxToken,proto3,oneof"`
}

type TaxTreeRequest_Taxon struct {
	// NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank
	Taxon string `protobuf:"bytes,3,opt,name=taxon,proto3,oneof"`
}

func (*TaxTreeRequest_TaxId) isTaxTreeRequest_Taxonomy() {}

func (*TaxTreeRequest_TaxToken) isTaxTreeRequest_Taxonomy() {}

func (*TaxTreeRequest_Taxon) isTaxTreeRequest_Taxonomy() {}

type OrganismQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//	*OrganismQueryRequest_OrganismQuery
	//	*OrganismQueryRequest_TaxonQuery
	Id isOrganismQueryRequest_Id `protobuf_oneof:"id"`
}

func (x *OrganismQueryRequest) Reset() {
	*x = OrganismQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganismQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganismQueryRequest) ProtoMessage() {}

func (x *OrganismQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganismQueryRequest.ProtoReflect.Descriptor instead.
func (*OrganismQueryRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{18}
}

func (m *OrganismQueryRequest) GetId() isOrganismQueryRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

// Deprecated: Do not use.
func (x *OrganismQueryRequest) GetOrganismQuery() string {
	if x, ok := x.GetId().(*OrganismQueryRequest_OrganismQuery); ok {
		return x.OrganismQuery
	}
	return ""
}

func (x *OrganismQueryRequest) GetTaxonQuery() string {
	if x, ok := x.GetId().(*OrganismQueryRequest_TaxonQuery); ok {
		return x.TaxonQuery
	}
	return ""
}

type isOrganismQueryRequest_Id interface {
	isOrganismQueryRequest_Id()
}

type OrganismQueryRequest_OrganismQuery struct {
	// Deprecated: Do not use.
	OrganismQuery string `protobuf:"bytes,1,opt,name=organism_query,json=organismQuery,proto3,oneof"`
}

type OrganismQueryRequest_TaxonQuery struct {
	// NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank
	TaxonQuery string `protobuf:"bytes,2,opt,name=taxon_query,json=taxonQuery,proto3,oneof"`
}

func (*OrganismQueryRequest_OrganismQuery) isOrganismQueryRequest_Id() {}

func (*OrganismQueryRequest_TaxonQuery) isOrganismQueryRequest_Id() {}

type SciNameAndIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SciNameAndIds []*SciNameAndIds_SciNameAndId `protobuf:"bytes,1,rep,name=sci_name_and_ids,json=sciNameAndIds,proto3" json:"sci_name_and_ids,omitempty"`
}

func (x *SciNameAndIds) Reset() {
	*x = SciNameAndIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SciNameAndIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SciNameAndIds) ProtoMessage() {}

func (x *SciNameAndIds) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SciNameAndIds.ProtoReflect.Descriptor instead.
func (*SciNameAndIds) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{19}
}

func (x *SciNameAndIds) GetSciNameAndIds() []*SciNameAndIds_SciNameAndId {
	if x != nil {
		return x.SciNameAndIds
	}
	return nil
}

type OrthologRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneId uint32 `protobuf:"varint,1,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	// Return either gene-ids, or entire gene metadata
	ReturnedContent OrthologRequest_ContentType `protobuf:"varint,2,opt,name=returned_content,json=returnedContent,proto3,enum=ncbi.datasets.v1alpha1.OrthologRequest_ContentType" json:"returned_content,omitempty"`
	// Filter genes by taxa
	TaxonFilter []string `protobuf:"bytes,3,rep,name=taxon_filter,json=taxonFilter,proto3" json:"taxon_filter,omitempty"`
}

func (x *OrthologRequest) Reset() {
	*x = OrthologRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrthologRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrthologRequest) ProtoMessage() {}

func (x *OrthologRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrthologRequest.ProtoReflect.Descriptor instead.
func (*OrthologRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{20}
}

func (x *OrthologRequest) GetGeneId() uint32 {
	if x != nil {
		return x.GeneId
	}
	return 0
}

func (x *OrthologRequest) GetReturnedContent() OrthologRequest_ContentType {
	if x != nil {
		return x.ReturnedContent
	}
	return OrthologRequest_COMPLETE
}

func (x *OrthologRequest) GetTaxonFilter() []string {
	if x != nil {
		return x.TaxonFilter
	}
	return nil
}

type OrthologSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrthologSetId uint32        `protobuf:"varint,1,opt,name=ortholog_set_id,json=orthologSetId,proto3" json:"ortholog_set_id,omitempty"`
	Method        string        `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Genes         *GeneMetadata `protobuf:"bytes,3,opt,name=genes,proto3" json:"genes,omitempty"`
}

func (x *OrthologSet) Reset() {
	*x = OrthologSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrthologSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrthologSet) ProtoMessage() {}

func (x *OrthologSet) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrthologSet.ProtoReflect.Descriptor instead.
func (*OrthologSet) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{21}
}

func (x *OrthologSet) GetOrthologSetId() uint32 {
	if x != nil {
		return x.OrthologSetId
	}
	return 0
}

func (x *OrthologSet) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *OrthologSet) GetGenes() *GeneMetadata {
	if x != nil {
		return x.Genes
	}
	return nil
}

type GeneDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NCBI gene ids
	GeneIds []uint32 `protobuf:"varint,1,rep,packed,name=gene_ids,json=geneIds,proto3" json:"gene_ids,omitempty"`
	// RNA or Protein accessions.
	Accessions      []string                            `protobuf:"bytes,10,rep,name=accessions,proto3" json:"accessions,omitempty"`
	SymbolsForTaxon *GeneDatasetRequest_SymbolsForTaxon `protobuf:"bytes,9,opt,name=symbols_for_taxon,json=symbolsForTaxon,proto3" json:"symbols_for_taxon,omitempty"`
	// NCBI Taxonomy ID or name (common or scientific) that the genes are annotated at
	Taxon string `protobuf:"bytes,3,opt,name=taxon,proto3" json:"taxon,omitempty"` //}
	// Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
	IncludeAnnotationType []Fasta `protobuf:"varint,6,rep,packed,name=include_annotation_type,json=includeAnnotationType,proto3,enum=ncbi.datasets.v1alpha1.Fasta" json:"include_annotation_type,omitempty"`
	// Return either gene-ids, or entire gene metadata
	ReturnedContent GeneDatasetRequest_ContentType `protobuf:"varint,7,opt,name=returned_content,json=returnedContent,proto3,enum=ncbi.datasets.v1alpha1.GeneDatasetRequest_ContentType" json:"returned_content,omitempty"`
	SortSchema      *GeneDatasetRequest_Sort       `protobuf:"bytes,8,opt,name=sort_schema,json=sortSchema,proto3" json:"sort_schema,omitempty"`
	// Limit the number of returned results ("all", "none", otherwise an integer value)
	Limit string `protobuf:"bytes,11,opt,name=limit,proto3" json:"limit,omitempty"`
	// Limit the FASTA sequences in the datasets package to these transcript and protein accessions
	FastaFilter []string `protobuf:"bytes,12,rep,name=fasta_filter,json=fastaFilter,proto3" json:"fasta_filter,omitempty"`
}

func (x *GeneDatasetRequest) Reset() {
	*x = GeneDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneDatasetRequest) ProtoMessage() {}

func (x *GeneDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneDatasetRequest.ProtoReflect.Descriptor instead.
func (*GeneDatasetRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{22}
}

func (x *GeneDatasetRequest) GetGeneIds() []uint32 {
	if x != nil {
		return x.GeneIds
	}
	return nil
}

func (x *GeneDatasetRequest) GetAccessions() []string {
	if x != nil {
		return x.Accessions
	}
	return nil
}

func (x *GeneDatasetRequest) GetSymbolsForTaxon() *GeneDatasetRequest_SymbolsForTaxon {
	if x != nil {
		return x.SymbolsForTaxon
	}
	return nil
}

func (x *GeneDatasetRequest) GetTaxon() string {
	if x != nil {
		return x.Taxon
	}
	return ""
}

func (x *GeneDatasetRequest) GetIncludeAnnotationType() []Fasta {
	if x != nil {
		return x.IncludeAnnotationType
	}
	return nil
}

func (x *GeneDatasetRequest) GetReturnedContent() GeneDatasetRequest_ContentType {
	if x != nil {
		return x.ReturnedContent
	}
	return GeneDatasetRequest_COMPLETE
}

func (x *GeneDatasetRequest) GetSortSchema() *GeneDatasetRequest_Sort {
	if x != nil {
		return x.SortSchema
	}
	return nil
}

func (x *GeneDatasetRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GeneDatasetRequest) GetFastaFilter() []string {
	if x != nil {
		return x.FastaFilter
	}
	return nil
}

// A range on a sequence record.
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Begin       uint64      `protobuf:"varint,1,opt,name=begin,proto3" json:"begin,omitempty"`
	End         uint64      `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Orientation Orientation `protobuf:"varint,3,opt,name=orientation,proto3,enum=ncbi.datasets.v1alpha1.Orientation" json:"orientation,omitempty"`
	// When an ordering is desired, fill out the order in the range.
	Order uint32 `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
	// When ribosomal slippage is desired, fill out slippage amount between this and previous range.
	RibosomalSlippage int32 `protobuf:"varint,5,opt,name=ribosomal_slippage,json=ribosomalSlippage,proto3" json:"ribosomal_slippage,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{23}
}

func (x *Range) GetBegin() uint64 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *Range) GetEnd() uint64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Range) GetOrientation() Orientation {
	if x != nil {
		return x.Orientation
	}
	return Orientation_none
}

func (x *Range) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *Range) GetRibosomalSlippage() int32 {
	if x != nil {
		return x.RibosomalSlippage
	}
	return 0
}

type SeqRangeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NCBI Accession.version of the sequence
	AccessionVersion string `protobuf:"bytes,1,opt,name=accession_version,json=accessionVersion,proto3" json:"accession_version,omitempty"`
	// Series of intervals on above accession_version
	Range []*Range `protobuf:"bytes,2,rep,name=range,proto3" json:"range,omitempty"`
}

func (x *SeqRangeSet) Reset() {
	*x = SeqRangeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeqRangeSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeqRangeSet) ProtoMessage() {}

func (x *SeqRangeSet) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeqRangeSet.ProtoReflect.Descriptor instead.
func (*SeqRangeSet) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{24}
}

func (x *SeqRangeSet) GetAccessionVersion() string {
	if x != nil {
		return x.AccessionVersion
	}
	return ""
}

func (x *SeqRangeSet) GetRange() []*Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type GenomicLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomicAccessionVersion string   `protobuf:"bytes,1,opt,name=genomic_accession_version,json=genomicAccessionVersion,proto3" json:"genomic_accession_version,omitempty"`
	SequenceName            string   `protobuf:"bytes,2,opt,name=sequence_name,json=sequenceName,proto3" json:"sequence_name,omitempty"`
	GenomicRange            *Range   `protobuf:"bytes,3,opt,name=genomic_range,json=genomicRange,proto3" json:"genomic_range,omitempty"`
	Exons                   []*Range `protobuf:"bytes,4,rep,name=exons,proto3" json:"exons,omitempty"`
}

func (x *GenomicLocation) Reset() {
	*x = GenomicLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomicLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomicLocation) ProtoMessage() {}

func (x *GenomicLocation) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomicLocation.ProtoReflect.Descriptor instead.
func (*GenomicLocation) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{25}
}

func (x *GenomicLocation) GetGenomicAccessionVersion() string {
	if x != nil {
		return x.GenomicAccessionVersion
	}
	return ""
}

func (x *GenomicLocation) GetSequenceName() string {
	if x != nil {
		return x.SequenceName
	}
	return ""
}

func (x *GenomicLocation) GetGenomicRange() *Range {
	if x != nil {
		return x.GenomicRange
	}
	return nil
}

func (x *GenomicLocation) GetExons() []*Range {
	if x != nil {
		return x.Exons
	}
	return nil
}

// Mature peptide
type MaturePeptide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessionVersion string `protobuf:"bytes,1,opt,name=accession_version,json=accessionVersion,proto3" json:"accession_version,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length           uint32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *MaturePeptide) Reset() {
	*x = MaturePeptide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaturePeptide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaturePeptide) ProtoMessage() {}

func (x *MaturePeptide) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaturePeptide.ProtoReflect.Descriptor instead.
func (*MaturePeptide) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{26}
}

func (x *MaturePeptide) GetAccessionVersion() string {
	if x != nil {
		return x.AccessionVersion
	}
	return ""
}

func (x *MaturePeptide) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MaturePeptide) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

// Protein product of a transcript
type Protein struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessionVersion string           `protobuf:"bytes,1,opt,name=accession_version,json=accessionVersion,proto3" json:"accession_version,omitempty"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length           uint32           `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	IsoformName      string           `protobuf:"bytes,5,opt,name=isoform_name,json=isoformName,proto3" json:"isoform_name,omitempty"`
	EnsemblProtein   string           `protobuf:"bytes,6,opt,name=ensembl_protein,json=ensemblProtein,proto3" json:"ensembl_protein,omitempty"`
	MaturePeptides   []*MaturePeptide `protobuf:"bytes,4,rep,name=mature_peptides,json=maturePeptides,proto3" json:"mature_peptides,omitempty"`
}

func (x *Protein) Reset() {
	*x = Protein{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protein) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protein) ProtoMessage() {}

func (x *Protein) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protein.ProtoReflect.Descriptor instead.
func (*Protein) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{27}
}

func (x *Protein) GetAccessionVersion() string {
	if x != nil {
		return x.AccessionVersion
	}
	return ""
}

func (x *Protein) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Protein) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Protein) GetIsoformName() string {
	if x != nil {
		return x.IsoformName
	}
	return ""
}

func (x *Protein) GetEnsemblProtein() string {
	if x != nil {
		return x.EnsemblProtein
	}
	return ""
}

func (x *Protein) GetMaturePeptides() []*MaturePeptide {
	if x != nil {
		return x.MaturePeptides
	}
	return nil
}

type Transcript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transcript accession-version
	AccessionVersion string `protobuf:"bytes,1,opt,name=accession_version,json=accessionVersion,proto3" json:"accession_version,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length           uint32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// Deprecated: Do not use.
	GenomicRange *SeqRangeSet `protobuf:"bytes,4,opt,name=genomic_range,json=genomicRange,proto3" json:"genomic_range,omitempty"`
	// Deprecated: Do not use.
	Exons             *SeqRangeSet       `protobuf:"bytes,5,opt,name=exons,proto3" json:"exons,omitempty"`
	Cds               *SeqRangeSet       `protobuf:"bytes,6,opt,name=cds,proto3" json:"cds,omitempty"`
	GenomicLocations  []*GenomicLocation `protobuf:"bytes,10,rep,name=genomic_locations,json=genomicLocations,proto3" json:"genomic_locations,omitempty"`
	EnsemblTranscript string             `protobuf:"bytes,8,opt,name=ensembl_transcript,json=ensemblTranscript,proto3" json:"ensembl_transcript,omitempty"`
	// Protein, if coding transcript
	Protein *Protein                  `protobuf:"bytes,7,opt,name=protein,proto3" json:"protein,omitempty"`
	Type    Transcript_TranscriptType `protobuf:"varint,9,opt,name=type,proto3,enum=ncbi.datasets.v1alpha1.Transcript_TranscriptType" json:"type,omitempty"`
}

func (x *Transcript) Reset() {
	*x = Transcript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transcript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcript) ProtoMessage() {}

func (x *Transcript) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcript.ProtoReflect.Descriptor instead.
func (*Transcript) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{28}
}

func (x *Transcript) GetAccessionVersion() string {
	if x != nil {
		return x.AccessionVersion
	}
	return ""
}

func (x *Transcript) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transcript) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

// Deprecated: Do not use.
func (x *Transcript) GetGenomicRange() *SeqRangeSet {
	if x != nil {
		return x.GenomicRange
	}
	return nil
}

// Deprecated: Do not use.
func (x *Transcript) GetExons() *SeqRangeSet {
	if x != nil {
		return x.Exons
	}
	return nil
}

func (x *Transcript) GetCds() *SeqRangeSet {
	if x != nil {
		return x.Cds
	}
	return nil
}

func (x *Transcript) GetGenomicLocations() []*GenomicLocation {
	if x != nil {
		return x.GenomicLocations
	}
	return nil
}

func (x *Transcript) GetEnsemblTranscript() string {
	if x != nil {
		return x.EnsemblTranscript
	}
	return ""
}

func (x *Transcript) GetProtein() *Protein {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *Transcript) GetType() Transcript_TranscriptType {
	if x != nil {
		return x.Type
	}
	return Transcript_UNKNOWN
}

type GenomicRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range of this Gene record on this genomic region.
	GeneRange *SeqRangeSet                    `protobuf:"bytes,1,opt,name=gene_range,json=geneRange,proto3" json:"gene_range,omitempty"`
	Type      GenomicRegion_GenomicRegionType `protobuf:"varint,2,opt,name=type,proto3,enum=ncbi.datasets.v1alpha1.GenomicRegion_GenomicRegionType" json:"type,omitempty"`
}

func (x *GenomicRegion) Reset() {
	*x = GenomicRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomicRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomicRegion) ProtoMessage() {}

func (x *GenomicRegion) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomicRegion.ProtoReflect.Descriptor instead.
func (*GenomicRegion) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{29}
}

func (x *GenomicRegion) GetGeneRange() *SeqRangeSet {
	if x != nil {
		return x.GeneRange
	}
	return nil
}

func (x *GenomicRegion) GetType() GenomicRegion_GenomicRegionType {
	if x != nil {
		return x.Type
	}
	return GenomicRegion_UNKNOWN
}

type AnnotatedAssemblies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accession string `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AnnotatedAssemblies) Reset() {
	*x = AnnotatedAssemblies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedAssemblies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedAssemblies) ProtoMessage() {}

func (x *AnnotatedAssemblies) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedAssemblies.ProtoReflect.Descriptor instead.
func (*AnnotatedAssemblies) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{30}
}

func (x *AnnotatedAssemblies) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *AnnotatedAssemblies) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseName       string                 `protobuf:"bytes,1,opt,name=release_name,json=releaseName,proto3" json:"release_name,omitempty"`
	ReleaseDate       string                 `protobuf:"bytes,2,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	AssembliesInScope []*AnnotatedAssemblies `protobuf:"bytes,3,rep,name=assemblies_in_scope,json=assembliesInScope,proto3" json:"assemblies_in_scope,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{31}
}

func (x *Annotation) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *Annotation) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Annotation) GetAssembliesInScope() []*AnnotatedAssemblies {
	if x != nil {
		return x.AssembliesInScope
	}
	return nil
}

// Summary of NCBI Gene resource
type GeneDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mongo-required
	GeneId             uint64                  `protobuf:"varint,1,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	Symbol             string                  `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Description        string                  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	TaxId              uint64                  `protobuf:"varint,4,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	Taxname            string                  `protobuf:"bytes,5,opt,name=taxname,proto3" json:"taxname,omitempty"`
	Type               GeneDescriptor_GeneType `protobuf:"varint,6,opt,name=type,proto3,enum=ncbi.datasets.v1alpha1.GeneDescriptor_GeneType" json:"type,omitempty"`
	RnaType            GeneDescriptor_RnaType  `protobuf:"varint,11,opt,name=rna_type,json=rnaType,proto3,enum=ncbi.datasets.v1alpha1.GeneDescriptor_RnaType" json:"rna_type,omitempty"`
	Orientation        Orientation             `protobuf:"varint,7,opt,name=orientation,proto3,enum=ncbi.datasets.v1alpha1.Orientation" json:"orientation,omitempty"`
	GenomicRanges      []*SeqRangeSet          `protobuf:"bytes,8,rep,name=genomic_ranges,json=genomicRanges,proto3" json:"genomic_ranges,omitempty"`
	ReferenceStandards []*GenomicRegion        `protobuf:"bytes,21,rep,name=reference_standards,json=referenceStandards,proto3" json:"reference_standards,omitempty"` // RefSeqGene NG
	GenomicRegions     []*GenomicRegion        `protobuf:"bytes,22,rep,name=genomic_regions,json=genomicRegions,proto3" json:"genomic_regions,omitempty"`             // Non-RefSeqGene NG
	Transcripts        []*Transcript           `protobuf:"bytes,9,rep,name=transcripts,proto3" json:"transcripts,omitempty"`
	Proteins           []*Protein              `protobuf:"bytes,10,rep,name=proteins,proto3" json:"proteins,omitempty"` // Only for proteins directly annotated on the Gene, without any intermediary transcript
	// Species common-name
	CommonName string `protobuf:"bytes,12,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// See chromosomes
	//
	// Deprecated: Do not use.
	Chromosome            string                 `protobuf:"bytes,13,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	Chromosomes           []string               `protobuf:"bytes,14,rep,name=chromosomes,proto3" json:"chromosomes,omitempty"`
	NomenclatureAuthority *NomenclatureAuthority `protobuf:"bytes,15,opt,name=nomenclature_authority,json=nomenclatureAuthority,proto3" json:"nomenclature_authority,omitempty"`
	SwissProtAccessions   []string               `protobuf:"bytes,16,rep,name=swiss_prot_accessions,json=swissProtAccessions,proto3" json:"swiss_prot_accessions,omitempty"`
	EnsemblGeneIds        []string               `protobuf:"bytes,17,rep,name=ensembl_gene_ids,json=ensemblGeneIds,proto3" json:"ensembl_gene_ids,omitempty"`
	OmimIds               []string               `protobuf:"bytes,18,rep,name=omim_ids,json=omimIds,proto3" json:"omim_ids,omitempty"`
	Synonyms              []string               `protobuf:"bytes,19,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	ReplacedGeneId        uint64                 `protobuf:"varint,20,opt,name=replaced_gene_id,json=replacedGeneId,proto3" json:"replaced_gene_id,omitempty"`
	Annotations           []*Annotation          `protobuf:"bytes,23,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *GeneDescriptor) Reset() {
	*x = GeneDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneDescriptor) ProtoMessage() {}

func (x *GeneDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneDescriptor.ProtoReflect.Descriptor instead.
func (*GeneDescriptor) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{32}
}

func (x *GeneDescriptor) GetGeneId() uint64 {
	if x != nil {
		return x.GeneId
	}
	return 0
}

func (x *GeneDescriptor) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GeneDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GeneDescriptor) GetTaxId() uint64 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

func (x *GeneDescriptor) GetTaxname() string {
	if x != nil {
		return x.Taxname
	}
	return ""
}

func (x *GeneDescriptor) GetType() GeneDescriptor_GeneType {
	if x != nil {
		return x.Type
	}
	return GeneDescriptor_UNKNOWN
}

func (x *GeneDescriptor) GetRnaType() GeneDescriptor_RnaType {
	if x != nil {
		return x.RnaType
	}
	return GeneDescriptor_rna_UNKNOWN
}

func (x *GeneDescriptor) GetOrientation() Orientation {
	if x != nil {
		return x.Orientation
	}
	return Orientation_none
}

func (x *GeneDescriptor) GetGenomicRanges() []*SeqRangeSet {
	if x != nil {
		return x.GenomicRanges
	}
	return nil
}

func (x *GeneDescriptor) GetReferenceStandards() []*GenomicRegion {
	if x != nil {
		return x.ReferenceStandards
	}
	return nil
}

func (x *GeneDescriptor) GetGenomicRegions() []*GenomicRegion {
	if x != nil {
		return x.GenomicRegions
	}
	return nil
}

func (x *GeneDescriptor) GetTranscripts() []*Transcript {
	if x != nil {
		return x.Transcripts
	}
	return nil
}

func (x *GeneDescriptor) GetProteins() []*Protein {
	if x != nil {
		return x.Proteins
	}
	return nil
}

func (x *GeneDescriptor) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

// Deprecated: Do not use.
func (x *GeneDescriptor) GetChromosome() string {
	if x != nil {
		return x.Chromosome
	}
	return ""
}

func (x *GeneDescriptor) GetChromosomes() []string {
	if x != nil {
		return x.Chromosomes
	}
	return nil
}

func (x *GeneDescriptor) GetNomenclatureAuthority() *NomenclatureAuthority {
	if x != nil {
		return x.NomenclatureAuthority
	}
	return nil
}

func (x *GeneDescriptor) GetSwissProtAccessions() []string {
	if x != nil {
		return x.SwissProtAccessions
	}
	return nil
}

func (x *GeneDescriptor) GetEnsemblGeneIds() []string {
	if x != nil {
		return x.EnsemblGeneIds
	}
	return nil
}

func (x *GeneDescriptor) GetOmimIds() []string {
	if x != nil {
		return x.OmimIds
	}
	return nil
}

func (x *GeneDescriptor) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *GeneDescriptor) GetReplacedGeneId() uint64 {
	if x != nil {
		return x.ReplacedGeneId
	}
	return 0
}

func (x *GeneDescriptor) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// The authority and record by which NCBI has named the gene.
type NomenclatureAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Authority  string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *NomenclatureAuthority) Reset() {
	*x = NomenclatureAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NomenclatureAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NomenclatureAuthority) ProtoMessage() {}

func (x *NomenclatureAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NomenclatureAuthority.ProtoReflect.Descriptor instead.
func (*NomenclatureAuthority) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{33}
}

func (x *NomenclatureAuthority) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *NomenclatureAuthority) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Code:
	//	*Error_AssemblyErrorCode_
	//	*Error_GeneErrorCode_
	//	*Error_VirusErrorCode_
	Code    isError_Code `protobuf_oneof:"code"`
	Reason  string       `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	Message string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Deprecated: Do not use.
	ValidIdentifiers   []string `protobuf:"bytes,3,rep,name=valid_identifiers,json=validIdentifiers,proto3" json:"valid_identifiers,omitempty"`
	InvalidIdentifiers []string `protobuf:"bytes,4,rep,name=invalid_identifiers,json=invalidIdentifiers,proto3" json:"invalid_identifiers,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{34}
}

func (m *Error) GetCode() isError_Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (x *Error) GetAssemblyErrorCode() Error_AssemblyErrorCode {
	if x, ok := x.GetCode().(*Error_AssemblyErrorCode_); ok {
		return x.AssemblyErrorCode
	}
	return Error_UNKNOWN_ASSEMBLY_ERROR_CODE
}

func (x *Error) GetGeneErrorCode() Error_GeneErrorCode {
	if x, ok := x.GetCode().(*Error_GeneErrorCode_); ok {
		return x.GeneErrorCode
	}
	return Error_UNKNOWN_GENE_ERROR_CODE
}

func (x *Error) GetVirusErrorCode() Error_VirusErrorCode {
	if x, ok := x.GetCode().(*Error_VirusErrorCode_); ok {
		return x.VirusErrorCode
	}
	return Error_UNKNOWN_VIRUS_ERROR_CODE
}

func (x *Error) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Deprecated: Do not use.
func (x *Error) GetValidIdentifiers() []string {
	if x != nil {
		return x.ValidIdentifiers
	}
	return nil
}

func (x *Error) GetInvalidIdentifiers() []string {
	if x != nil {
		return x.InvalidIdentifiers
	}
	return nil
}

type isError_Code interface {
	isError_Code()
}

type Error_AssemblyErrorCode_ struct {
	AssemblyErrorCode Error_AssemblyErrorCode `protobuf:"varint,6,opt,name=assembly_error_code,json=assemblyErrorCode,proto3,enum=ncbi.datasets.v1alpha1.Error_AssemblyErrorCode,oneof"`
}

type Error_GeneErrorCode_ struct {
	GeneErrorCode Error_GeneErrorCode `protobuf:"varint,7,opt,name=gene_error_code,json=geneErrorCode,proto3,enum=ncbi.datasets.v1alpha1.Error_GeneErrorCode,oneof"`
}

type Error_VirusErrorCode_ struct {
	VirusErrorCode Error_VirusErrorCode `protobuf:"varint,8,opt,name=virus_error_code,json=virusErrorCode,proto3,enum=ncbi.datasets.v1alpha1.Error_VirusErrorCode,oneof"`
}

func (*Error_AssemblyErrorCode_) isError_Code() {}

func (*Error_GeneErrorCode_) isError_Code() {}

func (*Error_VirusErrorCode_) isError_Code() {}

type Warning struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Code:
	//	*Warning_GeneWarningCode_
	Code                   isWarning_Code      `protobuf_oneof:"code"`
	Reason                 string              `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message                string              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ReplacedId             *Warning_ReplacedId `protobuf:"bytes,4,opt,name=replaced_id,json=replacedId,proto3" json:"replaced_id,omitempty"`
	UnrecognizedIdentifier string              `protobuf:"bytes,5,opt,name=unrecognized_identifier,json=unrecognizedIdentifier,proto3" json:"unrecognized_identifier,omitempty"`
}

func (x *Warning) Reset() {
	*x = Warning{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warning) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warning) ProtoMessage() {}

func (x *Warning) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warning.ProtoReflect.Descriptor instead.
func (*Warning) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{35}
}

func (m *Warning) GetCode() isWarning_Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (x *Warning) GetGeneWarningCode() Warning_GeneWarningCode {
	if x, ok := x.GetCode().(*Warning_GeneWarningCode_); ok {
		return x.GeneWarningCode
	}
	return Warning_UNKNOWN_GENE_WARNING_CODE
}

func (x *Warning) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Warning) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Warning) GetReplacedId() *Warning_ReplacedId {
	if x != nil {
		return x.ReplacedId
	}
	return nil
}

func (x *Warning) GetUnrecognizedIdentifier() string {
	if x != nil {
		return x.UnrecognizedIdentifier
	}
	return ""
}

type isWarning_Code interface {
	isWarning_Code()
}

type Warning_GeneWarningCode_ struct {
	GeneWarningCode Warning_GeneWarningCode `protobuf:"varint,7,opt,name=gene_warning_code,json=geneWarningCode,proto3,enum=ncbi.datasets.v1alpha1.Warning_GeneWarningCode,oneof"`
}

func (*Warning_GeneWarningCode_) isWarning_Code() {}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*Message_Error
	//	*Message_Warning
	Message isMessage_Message `protobuf_oneof:"message"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{36}
}

func (m *Message) GetMessage() isMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Message) GetError() *Error {
	if x, ok := x.GetMessage().(*Message_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Message) GetWarning() *Warning {
	if x, ok := x.GetMessage().(*Message_Warning); ok {
		return x.Warning
	}
	return nil
}

type isMessage_Message interface {
	isMessage_Message()
}

type Message_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=error,proto3,oneof"`
}

type Message_Warning struct {
	Warning *Warning `protobuf:"bytes,2,opt,name=warning,proto3,oneof"`
}

func (*Message_Error) isMessage_Message() {}

func (*Message_Warning) isMessage_Message() {}

type GeneMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	Messages []*Message      `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Warnings []*Warning      `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	Query    []string        `protobuf:"bytes,4,rep,name=query,proto3" json:"query,omitempty"`
	Gene     *GeneDescriptor `protobuf:"bytes,2,opt,name=gene,proto3" json:"gene,omitempty"`
	Errors   []*Error        `protobuf:"bytes,5,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GeneMatch) Reset() {
	*x = GeneMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneMatch) ProtoMessage() {}

func (x *GeneMatch) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneMatch.ProtoReflect.Descriptor instead.
func (*GeneMatch) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{37}
}

// Deprecated: Do not use.
func (x *GeneMatch) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GeneMatch) GetWarnings() []*Warning {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *GeneMatch) GetQuery() []string {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *GeneMatch) GetGene() *GeneDescriptor {
	if x != nil {
		return x.Gene
	}
	return nil
}

func (x *GeneMatch) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type GeneMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Message   `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Genes    []*GeneMatch `protobuf:"bytes,2,rep,name=genes,proto3" json:"genes,omitempty"`
	// The total count of available datasets (ignoring the cutoff parameter).
	TotalCount uint32 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *GeneMetadata) Reset() {
	*x = GeneMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneMetadata) ProtoMessage() {}

func (x *GeneMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneMetadata.ProtoReflect.Descriptor instead.
func (*GeneMetadata) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{38}
}

func (x *GeneMetadata) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GeneMetadata) GetGenes() []*GeneMatch {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *GeneMetadata) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type AssemblyMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Message                 `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Assembly *AssemblyDatasetDescriptor `protobuf:"bytes,2,opt,name=assembly,proto3" json:"assembly,omitempty"`
}

func (x *AssemblyMatch) Reset() {
	*x = AssemblyMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyMatch) ProtoMessage() {}

func (x *AssemblyMatch) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyMatch.ProtoReflect.Descriptor instead.
func (*AssemblyMatch) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{39}
}

func (x *AssemblyMatch) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *AssemblyMatch) GetAssembly() *AssemblyDatasetDescriptor {
	if x != nil {
		return x.Assembly
	}
	return nil
}

type AssemblyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages   []*Message       `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Assemblies []*AssemblyMatch `protobuf:"bytes,2,rep,name=assemblies,proto3" json:"assemblies,omitempty"`
	// The total count of available datasets (ignoring the cutoff parameter).
	// Only provided for the first page of results (when `page_token` is empty in the request).
	TotalCount uint32 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// A token that can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *AssemblyMetadata) Reset() {
	*x = AssemblyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyMetadata) ProtoMessage() {}

func (x *AssemblyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyMetadata.ProtoReflect.Descriptor instead.
func (*AssemblyMetadata) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{40}
}

func (x *AssemblyMetadata) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *AssemblyMetadata) GetAssemblies() []*AssemblyMatch {
	if x != nil {
		return x.Assemblies
	}
	return nil
}

func (x *AssemblyMetadata) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AssemblyMetadata) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GeneDescriptors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genes  []*GeneDescriptor `protobuf:"bytes,1,rep,name=genes,proto3" json:"genes,omitempty"`
	Errors []*Error          `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *GeneDescriptors) Reset() {
	*x = GeneDescriptors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneDescriptors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneDescriptors) ProtoMessage() {}

func (x *GeneDescriptors) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneDescriptors.ProtoReflect.Descriptor instead.
func (*GeneDescriptors) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{41}
}

func (x *GeneDescriptors) GetGenes() []*GeneDescriptor {
	if x != nil {
		return x.Genes
	}
	return nil
}

func (x *GeneDescriptors) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type AnnotationForVirus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnnotationForVirus) Reset() {
	*x = AnnotationForVirus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationForVirus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationForVirus) ProtoMessage() {}

func (x *AnnotationForVirus) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationForVirus.ProtoReflect.Descriptor instead.
func (*AnnotationForVirus) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{42}
}

type VirusDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//	*VirusDatasetRequest_TaxId
	//	*VirusDatasetRequest_TaxName
	//	*VirusDatasetRequest_Accession
	//	*VirusDatasetRequest_Taxon
	Id isVirusDatasetRequest_Id `protobuf_oneof:"id"`
	// If true, limit results to RefSeq genomes.
	RefseqOnly bool `protobuf:"varint,4,opt,name=refseq_only,json=refseqOnly,proto3" json:"refseq_only,omitempty"`
	// If true, limit results to annotated genomes.
	AnnotatedOnly bool `protobuf:"varint,5,opt,name=annotated_only,json=annotatedOnly,proto3" json:"annotated_only,omitempty"`
	// If set, limit results to viral genomes that have been released after a specified date (and optionally, time). April 1, 2020 midnight UTC should be formatted as follows: 2020-04-01T00:00:00.000Z
	ReleasedSince *timestamp.Timestamp `protobuf:"bytes,6,opt,name=released_since,json=releasedSince,proto3" json:"released_since,omitempty"`
	// If set, limit results to genomes extracted from this host (Taxonomy ID or name)
	Host string `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	// If set, limit results to genomes classified to this lineage by the PangoLearn tool.
	PangolinClassification string `protobuf:"bytes,15,opt,name=pangolin_classification,json=pangolinClassification,proto3" json:"pangolin_classification,omitempty"`
	// Assemblies from this location (country and state, or continent)
	GeoLocation string `protobuf:"bytes,8,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	// only include complete genomes.
	CompleteOnly bool `protobuf:"varint,9,opt,name=complete_only,json=completeOnly,proto3" json:"complete_only,omitempty"`
	// Specify which fields to include in the tabular report
	TableFields []VirusTableField `protobuf:"varint,10,rep,packed,name=table_fields,json=tableFields,proto3,enum=ncbi.datasets.v1alpha1.VirusTableField" json:"table_fields,omitempty"`
	// Set to true to omit the genomic sequence.
	ExcludeSequence bool `protobuf:"varint,12,opt,name=exclude_sequence,json=excludeSequence,proto3" json:"exclude_sequence,omitempty"`
	// Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
	IncludeAnnotationType []AnnotationForVirus_Type `protobuf:"varint,13,rep,packed,name=include_annotation_type,json=includeAnnotationType,proto3,enum=ncbi.datasets.v1alpha1.AnnotationForVirus_Type" json:"include_annotation_type,omitempty"`
	// Choose download format (tsv, csv or jsonl)
	Format TableFormat `protobuf:"varint,14,opt,name=format,proto3,enum=ncbi.datasets.v1alpha1.TableFormat" json:"format,omitempty"`
}

func (x *VirusDatasetRequest) Reset() {
	*x = VirusDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirusDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirusDatasetRequest) ProtoMessage() {}

func (x *VirusDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirusDatasetRequest.ProtoReflect.Descriptor instead.
func (*VirusDatasetRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{43}
}

func (m *VirusDatasetRequest) GetId() isVirusDatasetRequest_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

// Deprecated: Do not use.
func (x *VirusDatasetRequest) GetTaxId() uint32 {
	if x, ok := x.GetId().(*VirusDatasetRequest_TaxId); ok {
		return x.TaxId
	}
	return 0
}

// Deprecated: Do not use.
func (x *VirusDatasetRequest) GetTaxName() string {
	if x, ok := x.GetId().(*VirusDatasetRequest_TaxName); ok {
		return x.TaxName
	}
	return ""
}

func (x *VirusDatasetRequest) GetAccession() string {
	if x, ok := x.GetId().(*VirusDatasetRequest_Accession); ok {
		return x.Accession
	}
	return ""
}

func (x *VirusDatasetRequest) GetTaxon() string {
	if x, ok := x.GetId().(*VirusDatasetRequest_Taxon); ok {
		return x.Taxon
	}
	return ""
}

func (x *VirusDatasetRequest) GetRefseqOnly() bool {
	if x != nil {
		return x.RefseqOnly
	}
	return false
}

func (x *VirusDatasetRequest) GetAnnotatedOnly() bool {
	if x != nil {
		return x.AnnotatedOnly
	}
	return false
}

func (x *VirusDatasetRequest) GetReleasedSince() *timestamp.Timestamp {
	if x != nil {
		return x.ReleasedSince
	}
	return nil
}

func (x *VirusDatasetRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *VirusDatasetRequest) GetPangolinClassification() string {
	if x != nil {
		return x.PangolinClassification
	}
	return ""
}

func (x *VirusDatasetRequest) GetGeoLocation() string {
	if x != nil {
		return x.GeoLocation
	}
	return ""
}

func (x *VirusDatasetRequest) GetCompleteOnly() bool {
	if x != nil {
		return x.CompleteOnly
	}
	return false
}

func (x *VirusDatasetRequest) GetTableFields() []VirusTableField {
	if x != nil {
		return x.TableFields
	}
	return nil
}

func (x *VirusDatasetRequest) GetExcludeSequence() bool {
	if x != nil {
		return x.ExcludeSequence
	}
	return false
}

func (x *VirusDatasetRequest) GetIncludeAnnotationType() []AnnotationForVirus_Type {
	if x != nil {
		return x.IncludeAnnotationType
	}
	return nil
}

func (x *VirusDatasetRequest) GetFormat() TableFormat {
	if x != nil {
		return x.Format
	}
	return TableFormat_tsv
}

type isVirusDatasetRequest_Id interface {
	isVirusDatasetRequest_Id()
}

type VirusDatasetRequest_TaxId struct {
	// NCBI Taxonomy ID
	//
	// Deprecated: Do not use.
	TaxId uint32 `protobuf:"varint,1,opt,name=tax_id,json=taxId,proto3,oneof"`
}

type VirusDatasetRequest_TaxName struct {
	// Common or scientific name at any taxonomic rank
	//
	// Deprecated: Do not use.
	TaxName string `protobuf:"bytes,2,opt,name=tax_name,json=taxName,proto3,oneof"`
}

type VirusDatasetRequest_Accession struct {
	// genome sequence accession
	Accession string `protobuf:"bytes,3,opt,name=accession,proto3,oneof"`
}

type VirusDatasetRequest_Taxon struct {
	// NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank
	Taxon string `protobuf:"bytes,11,opt,name=taxon,proto3,oneof"`
}

func (*VirusDatasetRequest_TaxId) isVirusDatasetRequest_Id() {}

func (*VirusDatasetRequest_TaxName) isVirusDatasetRequest_Id() {}

func (*VirusDatasetRequest_Accession) isVirusDatasetRequest_Id() {}

func (*VirusDatasetRequest_Taxon) isVirusDatasetRequest_Id() {}

type Sars2ProteinDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which proteins to retrieve in the data package
	Proteins []string `protobuf:"bytes,1,rep,name=proteins,proto3" json:"proteins,omitempty"`
	// If true, limit results to RefSeq genomes.
	RefseqOnly bool `protobuf:"varint,4,opt,name=refseq_only,json=refseqOnly,proto3" json:"refseq_only,omitempty"`
	// If true, limit results to annotated genomes.
	AnnotatedOnly bool `protobuf:"varint,5,opt,name=annotated_only,json=annotatedOnly,proto3" json:"annotated_only,omitempty"`
	// If set, limit results to viral genomes that have been released after a specified date and time. April 1, 2020 midnight UTC should be formatted as follows: 2020-04-01T00:00:00.000Z
	ReleasedSince *timestamp.Timestamp `protobuf:"bytes,6,opt,name=released_since,json=releasedSince,proto3" json:"released_since,omitempty"`
	// If set, limit results to genomes extracted from this host (Taxonomy ID or name)
	Host string `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	// Assemblies from this location (country and state, or continent)
	GeoLocation string `protobuf:"bytes,8,opt,name=geo_location,json=geoLocation,proto3" json:"geo_location,omitempty"`
	// only include complete genomes.
	CompleteOnly bool `protobuf:"varint,9,opt,name=complete_only,json=completeOnly,proto3" json:"complete_only,omitempty"`
	// Specify which fields to include in the tabular report
	TableFields []VirusTableField `protobuf:"varint,10,rep,packed,name=table_fields,json=tableFields,proto3,enum=ncbi.datasets.v1alpha1.VirusTableField" json:"table_fields,omitempty"`
	// Set to true to omit the genomic sequence.
	ExcludeSequence bool `protobuf:"varint,12,opt,name=exclude_sequence,json=excludeSequence,proto3" json:"exclude_sequence,omitempty"`
	// Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
	IncludeAnnotationType []AnnotationForVirus_Type `protobuf:"varint,13,rep,packed,name=include_annotation_type,json=includeAnnotationType,proto3,enum=ncbi.datasets.v1alpha1.AnnotationForVirus_Type" json:"include_annotation_type,omitempty"`
	// Choose download format
	Format TableFormat `protobuf:"varint,14,opt,name=format,proto3,enum=ncbi.datasets.v1alpha1.TableFormat" json:"format,omitempty"`
}

func (x *Sars2ProteinDatasetRequest) Reset() {
	*x = Sars2ProteinDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sars2ProteinDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sars2ProteinDatasetRequest) ProtoMessage() {}

func (x *Sars2ProteinDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sars2ProteinDatasetRequest.ProtoReflect.Descriptor instead.
func (*Sars2ProteinDatasetRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{44}
}

func (x *Sars2ProteinDatasetRequest) GetProteins() []string {
	if x != nil {
		return x.Proteins
	}
	return nil
}

func (x *Sars2ProteinDatasetRequest) GetRefseqOnly() bool {
	if x != nil {
		return x.RefseqOnly
	}
	return false
}

func (x *Sars2ProteinDatasetRequest) GetAnnotatedOnly() bool {
	if x != nil {
		return x.AnnotatedOnly
	}
	return false
}

func (x *Sars2ProteinDatasetRequest) GetReleasedSince() *timestamp.Timestamp {
	if x != nil {
		return x.ReleasedSince
	}
	return nil
}

func (x *Sars2ProteinDatasetRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Sars2ProteinDatasetRequest) GetGeoLocation() string {
	if x != nil {
		return x.GeoLocation
	}
	return ""
}

func (x *Sars2ProteinDatasetRequest) GetCompleteOnly() bool {
	if x != nil {
		return x.CompleteOnly
	}
	return false
}

func (x *Sars2ProteinDatasetRequest) GetTableFields() []VirusTableField {
	if x != nil {
		return x.TableFields
	}
	return nil
}

func (x *Sars2ProteinDatasetRequest) GetExcludeSequence() bool {
	if x != nil {
		return x.ExcludeSequence
	}
	return false
}

func (x *Sars2ProteinDatasetRequest) GetIncludeAnnotationType() []AnnotationForVirus_Type {
	if x != nil {
		return x.IncludeAnnotationType
	}
	return nil
}

func (x *Sars2ProteinDatasetRequest) GetFormat() TableFormat {
	if x != nil {
		return x.Format
	}
	return TableFormat_tsv
}

type DownloadSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of records for the requested filter.
	RecordCount uint32 `protobuf:"varint,1,opt,name=record_count,json=recordCount,proto3" json:"record_count,omitempty"`
	// For backwards compatability with old VirusDatasetSummary
	//
	// Deprecated: Do not use.
	AssemblyCount uint32 `protobuf:"varint,2,opt,name=assembly_count,json=assemblyCount,proto3" json:"assembly_count,omitempty"`
	// The latest date on which the resource was updated.
	ResourceUpdatedOn *timestamp.Timestamp        `protobuf:"bytes,4,opt,name=resource_updated_on,json=resourceUpdatedOn,proto3" json:"resource_updated_on,omitempty"`
	Hydrated          *DownloadSummary_Hydrated   `protobuf:"bytes,5,opt,name=hydrated,proto3" json:"hydrated,omitempty"`
	Dehydrated        *DownloadSummary_Dehydrated `protobuf:"bytes,6,opt,name=dehydrated,proto3" json:"dehydrated,omitempty"`
	// Deprecated: Do not use.
	Errors   []*Error   `protobuf:"bytes,7,rep,name=errors,proto3" json:"errors,omitempty"`
	Messages []*Message `protobuf:"bytes,8,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *DownloadSummary) Reset() {
	*x = DownloadSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSummary) ProtoMessage() {}

func (x *DownloadSummary) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSummary.ProtoReflect.Descriptor instead.
func (*DownloadSummary) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{45}
}

func (x *DownloadSummary) GetRecordCount() uint32 {
	if x != nil {
		return x.RecordCount
	}
	return 0
}

// Deprecated: Do not use.
func (x *DownloadSummary) GetAssemblyCount() uint32 {
	if x != nil {
		return x.AssemblyCount
	}
	return 0
}

func (x *DownloadSummary) GetResourceUpdatedOn() *timestamp.Timestamp {
	if x != nil {
		return x.ResourceUpdatedOn
	}
	return nil
}

func (x *DownloadSummary) GetHydrated() *DownloadSummary_Hydrated {
	if x != nil {
		return x.Hydrated
	}
	return nil
}

func (x *DownloadSummary) GetDehydrated() *DownloadSummary_Dehydrated {
	if x != nil {
		return x.Dehydrated
	}
	return nil
}

// Deprecated: Do not use.
func (x *DownloadSummary) GetErrors() []*Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *DownloadSummary) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type TabularOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TabularOutput) Reset() {
	*x = TabularOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabularOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabularOutput) ProtoMessage() {}

func (x *TabularOutput) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabularOutput.ProtoReflect.Descriptor instead.
func (*TabularOutput) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{46}
}

func (x *TabularOutput) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type MicroBiggeDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*MicroBiggeDatasetRequest_OpaqueSolrQuery
	Query isMicroBiggeDatasetRequest_Query `protobuf_oneof:"query"`
	// If absent provide all files, otherwise limit downloaded files to those in the list
	Files              []MicroBiggeDatasetRequest_FileType          `protobuf:"varint,2,rep,packed,name=files,proto3,enum=ncbi.datasets.v1alpha1.MicroBiggeDatasetRequest_FileType" json:"files,omitempty"`
	ElementFlankConfig *MicroBiggeDatasetRequest_ElementFlankConfig `protobuf:"bytes,3,opt,name=element_flank_config,json=elementFlankConfig,proto3" json:"element_flank_config,omitempty"`
}

func (x *MicroBiggeDatasetRequest) Reset() {
	*x = MicroBiggeDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroBiggeDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroBiggeDatasetRequest) ProtoMessage() {}

func (x *MicroBiggeDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroBiggeDatasetRequest.ProtoReflect.Descriptor instead.
func (*MicroBiggeDatasetRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{47}
}

func (m *MicroBiggeDatasetRequest) GetQuery() isMicroBiggeDatasetRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *MicroBiggeDatasetRequest) GetOpaqueSolrQuery() string {
	if x, ok := x.GetQuery().(*MicroBiggeDatasetRequest_OpaqueSolrQuery); ok {
		return x.OpaqueSolrQuery
	}
	return ""
}

func (x *MicroBiggeDatasetRequest) GetFiles() []MicroBiggeDatasetRequest_FileType {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *MicroBiggeDatasetRequest) GetElementFlankConfig() *MicroBiggeDatasetRequest_ElementFlankConfig {
	if x != nil {
		return x.ElementFlankConfig
	}
	return nil
}

type isMicroBiggeDatasetRequest_Query interface {
	isMicroBiggeDatasetRequest_Query()
}

type MicroBiggeDatasetRequest_OpaqueSolrQuery struct {
	OpaqueSolrQuery string `protobuf:"bytes,1,opt,name=opaque_solr_query,json=opaqueSolrQuery,proto3,oneof"`
}

func (*MicroBiggeDatasetRequest_OpaqueSolrQuery) isMicroBiggeDatasetRequest_Query() {}

type VersionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	MajorVer uint32 `protobuf:"varint,2,opt,name=major_ver,json=majorVer,proto3" json:"major_ver,omitempty"`
	MinorVer uint32 `protobuf:"varint,3,opt,name=minor_ver,json=minorVer,proto3" json:"minor_ver,omitempty"`
	PatchVer uint32 `protobuf:"varint,4,opt,name=patch_ver,json=patchVer,proto3" json:"patch_ver,omitempty"`
}

func (x *VersionReply) Reset() {
	*x = VersionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionReply) ProtoMessage() {}

func (x *VersionReply) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionReply.ProtoReflect.Descriptor instead.
func (*VersionReply) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{48}
}

func (x *VersionReply) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionReply) GetMajorVer() uint32 {
	if x != nil {
		return x.MajorVer
	}
	return 0
}

func (x *VersionReply) GetMinorVer() uint32 {
	if x != nil {
		return x.MinorVer
	}
	return 0
}

func (x *VersionReply) GetPatchVer() uint32 {
	if x != nil {
		return x.PatchVer
	}
	return 0
}

type ProkaryoteGeneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// WP prokaryote protein accession
	Accessions []string `protobuf:"bytes,1,rep,name=accessions,proto3" json:"accessions,omitempty"`
	// Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
	IncludeAnnotationType []Fasta                                `protobuf:"varint,2,rep,packed,name=include_annotation_type,json=includeAnnotationType,proto3,enum=ncbi.datasets.v1alpha1.Fasta" json:"include_annotation_type,omitempty"`
	GeneFlankConfig       *ProkaryoteGeneRequest_GeneFlankConfig `protobuf:"bytes,3,opt,name=gene_flank_config,json=geneFlankConfig,proto3" json:"gene_flank_config,omitempty"`
	// NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank
	// When specified, return data from this taxon and its subtree
	Taxon string `protobuf:"bytes,4,opt,name=taxon,proto3" json:"taxon,omitempty"`
}

func (x *ProkaryoteGeneRequest) Reset() {
	*x = ProkaryoteGeneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProkaryoteGeneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProkaryoteGeneRequest) ProtoMessage() {}

func (x *ProkaryoteGeneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProkaryoteGeneRequest.ProtoReflect.Descriptor instead.
func (*ProkaryoteGeneRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{49}
}

func (x *ProkaryoteGeneRequest) GetAccessions() []string {
	if x != nil {
		return x.Accessions
	}
	return nil
}

func (x *ProkaryoteGeneRequest) GetIncludeAnnotationType() []Fasta {
	if x != nil {
		return x.IncludeAnnotationType
	}
	return nil
}

func (x *ProkaryoteGeneRequest) GetGeneFlankConfig() *ProkaryoteGeneRequest_GeneFlankConfig {
	if x != nil {
		return x.GeneFlankConfig
	}
	return nil
}

func (x *ProkaryoteGeneRequest) GetTaxon() string {
	if x != nil {
		return x.Taxon
	}
	return ""
}

type SleepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SleepMsec int32 `protobuf:"varint,1,opt,name=sleep_msec,json=sleepMsec,proto3" json:"sleep_msec,omitempty"`
}

func (x *SleepRequest) Reset() {
	*x = SleepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepRequest) ProtoMessage() {}

func (x *SleepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepRequest.ProtoReflect.Descriptor instead.
func (*SleepRequest) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{50}
}

func (x *SleepRequest) GetSleepMsec() int32 {
	if x != nil {
		return x.SleepMsec
	}
	return 0
}

type SleepReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *SleepReply) Reset() {
	*x = SleepReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SleepReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SleepReply) ProtoMessage() {}

func (x *SleepReply) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SleepReply.ProtoReflect.Descriptor instead.
func (*SleepReply) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{51}
}

func (x *SleepReply) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

type AssemblyMetadataRequest_Bioprojects struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accessions []string `protobuf:"bytes,1,rep,name=accessions,proto3" json:"accessions,omitempty"`
}

func (x *AssemblyMetadataRequest_Bioprojects) Reset() {
	*x = AssemblyMetadataRequest_Bioprojects{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyMetadataRequest_Bioprojects) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyMetadataRequest_Bioprojects) ProtoMessage() {}

func (x *AssemblyMetadataRequest_Bioprojects) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyMetadataRequest_Bioprojects.ProtoReflect.Descriptor instead.
func (*AssemblyMetadataRequest_Bioprojects) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{3, 0}
}

func (x *AssemblyMetadataRequest_Bioprojects) GetAccessions() []string {
	if x != nil {
		return x.Accessions
	}
	return nil
}

type AnnotationForAssembly_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type          AnnotationForAssembly_Type `protobuf:"varint,1,opt,name=type,proto3,enum=ncbi.datasets.v1alpha1.AnnotationForAssembly_Type" json:"type,omitempty"`
	EstimatedSize uint64                     `protobuf:"varint,2,opt,name=estimated_size,json=estimatedSize,proto3" json:"estimated_size,omitempty"`
}

func (x *AnnotationForAssembly_File) Reset() {
	*x = AnnotationForAssembly_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationForAssembly_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationForAssembly_File) ProtoMessage() {}

func (x *AnnotationForAssembly_File) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationForAssembly_File.ProtoReflect.Descriptor instead.
func (*AnnotationForAssembly_File) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{9, 0}
}

func (x *AnnotationForAssembly_File) GetType() AnnotationForAssembly_Type {
	if x != nil {
		return x.Type
	}
	return AnnotationForAssembly_DEFAULT
}

func (x *AnnotationForAssembly_File) GetEstimatedSize() uint64 {
	if x != nil {
		return x.EstimatedSize
	}
	return 0
}

type Organism_Counts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of assemblies at this node only
	Node uint32 `protobuf:"varint,1,opt,name=node,proto3" json:"node,omitempty"`
	// The number of assemblies at this node and all children.
	Subtree uint32 `protobuf:"varint,2,opt,name=subtree,proto3" json:"subtree,omitempty"`
}

func (x *Organism_Counts) Reset() {
	*x = Organism_Counts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organism_Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organism_Counts) ProtoMessage() {}

func (x *Organism_Counts) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organism_Counts.ProtoReflect.Descriptor instead.
func (*Organism_Counts) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{16, 0}
}

func (x *Organism_Counts) GetNode() uint32 {
	if x != nil {
		return x.Node
	}
	return 0
}

func (x *Organism_Counts) GetSubtree() uint32 {
	if x != nil {
		return x.Subtree
	}
	return 0
}

type Organism_CountByType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   Organism_CountType `protobuf:"varint,1,opt,name=type,proto3,enum=ncbi.datasets.v1alpha1.Organism_CountType" json:"type,omitempty"`
	Counts *Organism_Counts   `protobuf:"bytes,2,opt,name=counts,proto3" json:"counts,omitempty"`
}

func (x *Organism_CountByType) Reset() {
	*x = Organism_CountByType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Organism_CountByType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Organism_CountByType) ProtoMessage() {}

func (x *Organism_CountByType) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Organism_CountByType.ProtoReflect.Descriptor instead.
func (*Organism_CountByType) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{16, 1}
}

func (x *Organism_CountByType) GetType() Organism_CountType {
	if x != nil {
		return x.Type
	}
	return Organism_COUNT_TYPE_UNSPECIFIED
}

func (x *Organism_CountByType) GetCounts() *Organism_Counts {
	if x != nil {
		return x.Counts
	}
	return nil
}

type SciNameAndIds_SciNameAndId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scientific name
	SciName string `protobuf:"bytes,1,opt,name=sci_name,json=sciName,proto3" json:"sci_name,omitempty"`
	//NCBI Taxonomy ID
	TaxId uint64 `protobuf:"varint,2,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
}

func (x *SciNameAndIds_SciNameAndId) Reset() {
	*x = SciNameAndIds_SciNameAndId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SciNameAndIds_SciNameAndId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SciNameAndIds_SciNameAndId) ProtoMessage() {}

func (x *SciNameAndIds_SciNameAndId) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SciNameAndIds_SciNameAndId.ProtoReflect.Descriptor instead.
func (*SciNameAndIds_SciNameAndId) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{19, 0}
}

func (x *SciNameAndIds_SciNameAndId) GetSciName() string {
	if x != nil {
		return x.SciName
	}
	return ""
}

func (x *SciNameAndIds_SciNameAndId) GetTaxId() uint64 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

type GeneDatasetRequest_SymbolsForTaxon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbols []string `protobuf:"bytes,1,rep,name=symbols,proto3" json:"symbols,omitempty"`
	Taxon   string   `protobuf:"bytes,2,opt,name=taxon,proto3" json:"taxon,omitempty"`
}

func (x *GeneDatasetRequest_SymbolsForTaxon) Reset() {
	*x = GeneDatasetRequest_SymbolsForTaxon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneDatasetRequest_SymbolsForTaxon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneDatasetRequest_SymbolsForTaxon) ProtoMessage() {}

func (x *GeneDatasetRequest_SymbolsForTaxon) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneDatasetRequest_SymbolsForTaxon.ProtoReflect.Descriptor instead.
func (*GeneDatasetRequest_SymbolsForTaxon) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{22, 0}
}

func (x *GeneDatasetRequest_SymbolsForTaxon) GetSymbols() []string {
	if x != nil {
		return x.Symbols
	}
	return nil
}

func (x *GeneDatasetRequest_SymbolsForTaxon) GetTaxon() string {
	if x != nil {
		return x.Taxon
	}
	return ""
}

type GeneDatasetRequest_GeneIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GeneIds []uint32 `protobuf:"varint,1,rep,packed,name=gene_ids,json=geneIds,proto3" json:"gene_ids,omitempty"`
}

func (x *GeneDatasetRequest_GeneIds) Reset() {
	*x = GeneDatasetRequest_GeneIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneDatasetRequest_GeneIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneDatasetRequest_GeneIds) ProtoMessage() {}

func (x *GeneDatasetRequest_GeneIds) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneDatasetRequest_GeneIds.ProtoReflect.Descriptor instead.
func (*GeneDatasetRequest_GeneIds) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{22, 1}
}

func (x *GeneDatasetRequest_GeneIds) GetGeneIds() []uint32 {
	if x != nil {
		return x.GeneIds
	}
	return nil
}

type GeneDatasetRequest_Accessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accessions []string `protobuf:"bytes,1,rep,name=accessions,proto3" json:"accessions,omitempty"`
}

func (x *GeneDatasetRequest_Accessions) Reset() {
	*x = GeneDatasetRequest_Accessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneDatasetRequest_Accessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneDatasetRequest_Accessions) ProtoMessage() {}

func (x *GeneDatasetRequest_Accessions) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneDatasetRequest_Accessions.ProtoReflect.Descriptor instead.
func (*GeneDatasetRequest_Accessions) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{22, 2}
}

func (x *GeneDatasetRequest_Accessions) GetAccessions() []string {
	if x != nil {
		return x.Accessions
	}
	return nil
}

type GeneDatasetRequest_Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select a field to sort on.
	Field GeneDatasetRequest_SortField `protobuf:"varint,1,opt,name=field,proto3,enum=ncbi.datasets.v1alpha1.GeneDatasetRequest_SortField" json:"field,omitempty"`
	// Select a direction for the sort.
	Direction SortDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=ncbi.datasets.v1alpha1.SortDirection" json:"direction,omitempty"`
}

func (x *GeneDatasetRequest_Sort) Reset() {
	*x = GeneDatasetRequest_Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneDatasetRequest_Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneDatasetRequest_Sort) ProtoMessage() {}

func (x *GeneDatasetRequest_Sort) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneDatasetRequest_Sort.ProtoReflect.Descriptor instead.
func (*GeneDatasetRequest_Sort) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{22, 3}
}

func (x *GeneDatasetRequest_Sort) GetField() GeneDatasetRequest_SortField {
	if x != nil {
		return x.Field
	}
	return GeneDatasetRequest_SORT_FIELD_UNSPECIFIED
}

func (x *GeneDatasetRequest_Sort) GetDirection() SortDirection {
	if x != nil {
		return x.Direction
	}
	return SortDirection_SORT_DIRECTION_UNSPECIFIED
}

type Warning_ReplacedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requested string `protobuf:"bytes,1,opt,name=requested,proto3" json:"requested,omitempty"`
	Returned  string `protobuf:"bytes,2,opt,name=returned,proto3" json:"returned,omitempty"`
}

func (x *Warning_ReplacedId) Reset() {
	*x = Warning_ReplacedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warning_ReplacedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warning_ReplacedId) ProtoMessage() {}

func (x *Warning_ReplacedId) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warning_ReplacedId.ProtoReflect.Descriptor instead.
func (*Warning_ReplacedId) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{35, 0}
}

func (x *Warning_ReplacedId) GetRequested() string {
	if x != nil {
		return x.Requested
	}
	return ""
}

func (x *Warning_ReplacedId) GetReturned() string {
	if x != nil {
		return x.Returned
	}
	return ""
}

type DownloadSummary_Hydrated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimatedFileSizeMb    uint32 `protobuf:"varint,1,opt,name=estimated_file_size_mb,json=estimatedFileSizeMb,proto3" json:"estimated_file_size_mb,omitempty"`
	Url                    string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	CliDownloadCommandLine string `protobuf:"bytes,3,opt,name=cli_download_command_line,json=cliDownloadCommandLine,proto3" json:"cli_download_command_line,omitempty"`
}

func (x *DownloadSummary_Hydrated) Reset() {
	*x = DownloadSummary_Hydrated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSummary_Hydrated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSummary_Hydrated) ProtoMessage() {}

func (x *DownloadSummary_Hydrated) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSummary_Hydrated.ProtoReflect.Descriptor instead.
func (*DownloadSummary_Hydrated) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{45, 0}
}

func (x *DownloadSummary_Hydrated) GetEstimatedFileSizeMb() uint32 {
	if x != nil {
		return x.EstimatedFileSizeMb
	}
	return 0
}

func (x *DownloadSummary_Hydrated) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DownloadSummary_Hydrated) GetCliDownloadCommandLine() string {
	if x != nil {
		return x.CliDownloadCommandLine
	}
	return ""
}

type DownloadSummary_Dehydrated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EstimatedFileSizeMb     uint32 `protobuf:"varint,1,opt,name=estimated_file_size_mb,json=estimatedFileSizeMb,proto3" json:"estimated_file_size_mb,omitempty"`
	Url                     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	CliDownloadCommandLine  string `protobuf:"bytes,3,opt,name=cli_download_command_line,json=cliDownloadCommandLine,proto3" json:"cli_download_command_line,omitempty"`
	CliRehydrateCommandLine string `protobuf:"bytes,4,opt,name=cli_rehydrate_command_line,json=cliRehydrateCommandLine,proto3" json:"cli_rehydrate_command_line,omitempty"`
}

func (x *DownloadSummary_Dehydrated) Reset() {
	*x = DownloadSummary_Dehydrated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadSummary_Dehydrated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadSummary_Dehydrated) ProtoMessage() {}

func (x *DownloadSummary_Dehydrated) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadSummary_Dehydrated.ProtoReflect.Descriptor instead.
func (*DownloadSummary_Dehydrated) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{45, 1}
}

func (x *DownloadSummary_Dehydrated) GetEstimatedFileSizeMb() uint32 {
	if x != nil {
		return x.EstimatedFileSizeMb
	}
	return 0
}

func (x *DownloadSummary_Dehydrated) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DownloadSummary_Dehydrated) GetCliDownloadCommandLine() string {
	if x != nil {
		return x.CliDownloadCommandLine
	}
	return ""
}

func (x *DownloadSummary_Dehydrated) GetCliRehydrateCommandLine() string {
	if x != nil {
		return x.CliRehydrateCommandLine
	}
	return ""
}

// configuration options for gene file output
type MicroBiggeDatasetRequest_ElementFlankConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *MicroBiggeDatasetRequest_ElementFlankConfig) Reset() {
	*x = MicroBiggeDatasetRequest_ElementFlankConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroBiggeDatasetRequest_ElementFlankConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroBiggeDatasetRequest_ElementFlankConfig) ProtoMessage() {}

func (x *MicroBiggeDatasetRequest_ElementFlankConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MicroBiggeDatasetRequest_ElementFlankConfig.ProtoReflect.Descriptor instead.
func (*MicroBiggeDatasetRequest_ElementFlankConfig) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{47, 0}
}

func (x *MicroBiggeDatasetRequest_ElementFlankConfig) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type ProkaryoteGeneRequest_GeneFlankConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Length uint32 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *ProkaryoteGeneRequest_GeneFlankConfig) Reset() {
	*x = ProkaryoteGeneRequest_GeneFlankConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProkaryoteGeneRequest_GeneFlankConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProkaryoteGeneRequest_GeneFlankConfig) ProtoMessage() {}

func (x *ProkaryoteGeneRequest_GeneFlankConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProkaryoteGeneRequest_GeneFlankConfig.ProtoReflect.Descriptor instead.
func (*ProkaryoteGeneRequest_GeneFlankConfig) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP(), []int{49, 0}
}

func (x *ProkaryoteGeneRequest_GeneFlankConfig) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

var File_ncbi_datasets_v1alpha1_datasets_proto protoreflect.FileDescriptor

var file_ncbi_datasets_v1alpha1_datasets_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69,
	0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x48,
	0x0a, 0x14, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xad, 0x05, 0x0a, 0x20, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x72,
	0x65, 0x66, 0x73, 0x65, 0x71, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x70, 0x0a, 0x0f, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x47, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x68,
	0x61, 0x73, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x61, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x6d, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x46, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x48, 0x0a, 0x12, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x65, 0x78, 0x74, 0x22, 0x32, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x67,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x10, 0x02, 0x22, 0x4e, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x63, 0x68, 0x72,
	0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x63, 0x61,
	0x66, 0x66, 0x6f, 0x6c, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x74, 0x69,
	0x67, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x10, 0x03, 0x22, 0x2c, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xf5, 0x04, 0x0a, 0x17, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5d, 0x0a, 0x0b,
	0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x42, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x0b,
	0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x45, 0x78, 0x61,
	0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x66, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x2d, 0x0a, 0x0b, 0x42, 0x69, 0x6f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x29, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x53, 0x4d, 0x5f, 0x41, 0x43,
	0x43, 0x10, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x97,
	0x04, 0x0a, 0x21, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x06,
	0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x01, 0x52, 0x06, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x52, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x07, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x61, 0x78, 0x5f, 0x65, 0x78,
	0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x74, 0x61, 0x78, 0x45, 0x78, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x70,
	0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x35, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x53, 0x53, 0x4d, 0x5f, 0x41, 0x43, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x53, 0x10, 0x02, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x0a, 0x42, 0x69, 0x6f, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x59, 0x0a, 0x11, 0x42, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0b, 0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xb0, 0x05,
	0x0a, 0x19, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x13, 0x62, 0x69,
	0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x42, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x61,
	0x67, 0x65, 0x52, 0x12, 0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6f, 0x72, 0x67,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x03, 0x6f, 0x72, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5e, 0x0a, 0x13,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x52, 0x12, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x69, 0x67, 0x5f, 0x6e, 0x35, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x4e, 0x35, 0x30, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0d, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x71, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x73, 0x65, 0x71, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x2f, 0x0a, 0x13, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x62, 0x69,
	0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xa4, 0x04, 0x0a, 0x15, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x72, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x46, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x72, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x1a, 0x75, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x46, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x7a, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x5f, 0x47, 0x46, 0x46, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x5f, 0x47, 0x42, 0x46, 0x46, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x5f, 0x47, 0x42, 0x10, 0x02,
	0x1a, 0x02, 0x08, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4e, 0x41, 0x5f, 0x46, 0x41, 0x53, 0x54,
	0x41, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x53, 0x54,
	0x41, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x5f, 0x47, 0x54,
	0x46, 0x10, 0x05, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x54, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x49, 0x0a,
	0x0a, 0x47, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x6e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x89, 0x04, 0x0a, 0x16, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x72, 0x6f,
	0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x08, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x73, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x73, 0x76, 0x22, 0x36, 0x0a, 0x0a,
	0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x55,
	0x4c, 0x4c, 0x59, 0x5f, 0x48, 0x59, 0x44, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x01, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0c, 0x54, 0x61, 0x78, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x23, 0x0a, 0x0a, 0x54, 0x61, 0x78, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x22, 0x8b, 0x0f, 0x0a, 0x08, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x73, 0x6d, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63,
	0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x63, 0x6f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x63, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x78, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x0e, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x0a, 0x18, 0x01, 0xd2, 0xf0, 0x19, 0x04, 0x0a, 0x02, 0x02, 0x03, 0x52, 0x0d, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0f,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x08,
	0xd2, 0xf0, 0x19, 0x04, 0x0a, 0x02, 0x02, 0x03, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xd2, 0xf0, 0x19, 0x04, 0x0a, 0x02, 0x02, 0x03,
	0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x08, 0xd2, 0xf0,
	0x19, 0x04, 0x0a, 0x02, 0x02, 0x03, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x12, 0x42, 0x0a, 0x06, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x73, 0x6d, 0x42, 0x08, 0xd2, 0xf0, 0x19, 0x04, 0x0a, 0x02, 0x02, 0x03, 0x52, 0x06, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x04, 0x42, 0x08, 0xd2, 0xf0,
	0x19, 0x04, 0x0a, 0x02, 0x02, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x54, 0x61,
	0x78, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xd2, 0xf0, 0x19, 0x04, 0x0a, 0x02, 0x02, 0x03, 0x52,
	0x06, 0x6d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x12, 0x21, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x6f,
	0x72, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x08, 0xd2, 0xf0, 0x19, 0x04, 0x0a, 0x02,
	0x02, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x04, 0x42, 0x08, 0xd2, 0xf0, 0x19, 0x04, 0x0a, 0x02, 0x02,
	0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xd2, 0xf0, 0x19, 0x04, 0x0a, 0x02, 0x02, 0x03, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x08, 0xd2, 0xf0, 0x19, 0x04, 0x0a, 0x02, 0x02, 0x03, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x1a, 0x36, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74, 0x72, 0x65, 0x65, 0x1a, 0x8e, 0x01, 0x0a,
	0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x06,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x9d, 0x05,
	0x0a, 0x08, 0x52, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f,
	0x5f, 0x52, 0x41, 0x4e, 0x4b, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x55, 0x50, 0x45, 0x52,
	0x4b, 0x49, 0x4e, 0x47, 0x44, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x4e,
	0x47, 0x44, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x42, 0x4b, 0x49, 0x4e,
	0x47, 0x44, 0x4f, 0x4d, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x50, 0x45, 0x52, 0x50,
	0x48, 0x59, 0x4c, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x50, 0x48,
	0x59, 0x4c, 0x55, 0x4d, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x48, 0x59, 0x4c, 0x55, 0x4d,
	0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x44, 0x45, 0x10, 0x1f, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x55, 0x50, 0x45, 0x52, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x07, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x48, 0x4f, 0x52, 0x54,
	0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x43, 0x4f, 0x48, 0x4f, 0x52, 0x54, 0x10,
	0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x45, 0x52, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x0d, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x55, 0x42, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e,
	0x46, 0x52, 0x41, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41,
	0x52, 0x56, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x59, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x46, 0x41, 0x4d,
	0x49, 0x4c, 0x59, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x45, 0x4e, 0x55, 0x53, 0x10, 0x15,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x47, 0x45, 0x4e, 0x55, 0x53, 0x10, 0x16, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10,
	0x17, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x50, 0x45, 0x43, 0x49, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x42,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x45, 0x53, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x42, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x45, 0x53, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x49, 0x42, 0x45, 0x10, 0x1b, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x55, 0x42, 0x54, 0x52, 0x49, 0x42, 0x45, 0x10, 0x1c, 0x12, 0x09, 0x0a,
	0x05, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49,
	0x45, 0x54, 0x41, 0x53, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e,
	0x10, 0xc0, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xca,
	0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x55, 0x42, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0xd4, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x41, 0x54, 0x48, 0x4f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0xde, 0x02, 0x12, 0x0f, 0x0a, 0x0a, 0x53, 0x55, 0x42, 0x56, 0x41, 0x52, 0x49, 0x45, 0x54,
	0x59, 0x10, 0xe8, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x47, 0x45, 0x4e, 0x4f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0xf2, 0x02, 0x12, 0x0d, 0x0a, 0x08, 0x53, 0x45, 0x52, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xfc, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x49, 0x53, 0x4f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x86, 0x03,
	0x12, 0x0a, 0x0a, 0x05, 0x4d, 0x4f, 0x52, 0x50, 0x48, 0x10, 0x90, 0x03, 0x12, 0x0b, 0x0a, 0x06,
	0x53, 0x45, 0x52, 0x49, 0x45, 0x53, 0x10, 0x9a, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x53, 0x10, 0xa4, 0x03, 0x12,
	0x0e, 0x0a, 0x09, 0x53, 0x45, 0x52, 0x4f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0xae, 0x03, 0x12,
	0x0c, 0x0a, 0x07, 0x42, 0x49, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xb8, 0x03, 0x22, 0x55, 0x0a,
	0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x59, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x10, 0x02, 0x22, 0x74, 0x0a, 0x0e, 0x54, 0x61, 0x78, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61,
	0x78, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61,
	0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x42, 0x0a,
	0x0a, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x22, 0x6c, 0x0a, 0x14, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x48, 0x00,
	0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x21, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x53, 0x63, 0x69,
	0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x10, 0x73, 0x63,
	0x69, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x63,
	0x69, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x2e, 0x53, 0x63, 0x69, 0x4e,
	0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x52, 0x0d, 0x73, 0x63, 0x69, 0x4e, 0x61, 0x6d,
	0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x73, 0x1a, 0x40, 0x0a, 0x0c, 0x53, 0x63, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x63, 0x69, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x63, 0x69, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x22, 0xd8, 0x01, 0x0a, 0x0f, 0x4f, 0x72,
	0x74, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x74, 0x68, 0x6f, 0x6c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x78, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x74, 0x68, 0x6f, 0x6c, 0x6f,
	0x67, 0x53, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x74, 0x68, 0x6f, 0x6c, 0x6f, 0x67,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6f,
	0x72, 0x74, 0x68, 0x6f, 0x6c, 0x6f, 0x67, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73,
	0x22, 0xe5, 0x07, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x66, 0x0a, 0x11, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x46, 0x6f, 0x72, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x78, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x12, 0x55, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x61,
	0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x36, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x73, 0x6f,
	0x72, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x61, 0x73, 0x74, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x61, 0x73, 0x74, 0x61, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x41, 0x0a, 0x0f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73,
	0x46, 0x6f, 0x72, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x1a, 0x24, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x65,
	0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x2c,
	0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x97, 0x01, 0x0a,
	0x04, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x43, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f,
	0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x01, 0x22, 0x75, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4f,
	0x52, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x47, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x4f, 0x52, 0x54, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x5f,
	0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x03, 0x22, 0xbb, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0b, 0x6f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x69, 0x62, 0x6f, 0x73,
	0x6f, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x69, 0x62, 0x6f, 0x73, 0x6f, 0x6d, 0x61, 0x6c, 0x53, 0x6c,
	0x69, 0x70, 0x70, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x0b, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x19, 0x67,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0d,
	0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x33, 0x0a, 0x05, 0x65, 0x78, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x65, 0x78, 0x6f, 0x6e, 0x73, 0x22, 0x68, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50,
	0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0xfe, 0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x6f, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x6f, 0x66,
	0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e,
	0x12, 0x4e, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x70, 0x74, 0x69,
	0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65,
	0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x73,
	0x22, 0xa3, 0x05, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x78, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05,
	0x65, 0x78, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x03, 0x63, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x71, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x52, 0x03, 0x63, 0x64, 0x73, 0x12, 0x54, 0x0a, 0x11,
	0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x39, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49, 0x4e, 0x5f, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49,
	0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x4c, 0x10, 0x04, 0x22, 0x85, 0x02, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x74, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x47, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52,
	0x45, 0x46, 0x53, 0x45, 0x51, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x47, 0x45, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x22, 0x47,
	0x0a, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x13,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69,
	0x65, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x22, 0xa2, 0x0b, 0x0a, 0x0e, 0x47, 0x65,
	0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x78, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x78, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x43, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x6e, 0x61, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e,
	0x52, 0x6e, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x6e, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x67,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x67, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x12, 0x3b, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73,
	0x6f, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f,
	0x73, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x16, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x52, 0x15, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x73,
	0x77, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x73, 0x77, 0x69, 0x73,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x6e, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6d, 0x69,
	0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6d, 0x69,
	0x6d, 0x49, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73,
	0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xb8, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x52,
	0x4e, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x52, 0x4e, 0x41, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x73, 0x6e, 0x52, 0x4e, 0x41, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x63, 0x52,
	0x4e, 0x41, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x6e, 0x6f, 0x52, 0x4e, 0x41, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x10, 0x07,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x53, 0x4f, 0x4e, 0x10, 0x08,
	0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x63, 0x52, 0x4e, 0x41, 0x10, 0x09, 0x12, 0x09, 0x0a,
	0x05, 0x6e, 0x63, 0x52, 0x4e, 0x41, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x49, 0x4f, 0x4c,
	0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12,
	0x0a, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xff, 0x01, 0x22, 0x31, 0x0a, 0x07, 0x52,
	0x6e, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x72, 0x6e, 0x61, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x6d, 0x73,
	0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x6d, 0x52, 0x6e, 0x61, 0x10, 0x02, 0x22, 0x55,
	0x0a, 0x15, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xbc, 0x05, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x61, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52,
	0x11, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x55, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6e, 0x63,
	0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a, 0x10, 0x76, 0x69, 0x72,
	0x75, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x72, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x12, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x1b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c,
	0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x49, 0x4f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x4d, 0x42, 0x4c, 0x49, 0x45, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
	0x42, 0x49, 0x4f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x58, 0x4f, 0x4e, 0x10, 0x03,
	0x22, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x6e, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x4c, 0x4f, 0x4f,
	0x4b, 0x55, 0x50, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x05, 0x22, 0x2e, 0x0a, 0x0e,
	0x56, 0x69, 0x72, 0x75, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x52, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x42, 0x06, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x22, 0xe3, 0x04, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x5d, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x63,
	0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64,
	0x49, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x17, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x16, 0x75, 0x6e, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x46, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x22,
	0xf0, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x49, 0x53, 0x43,
	0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x5f, 0x49, 0x44,
	0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a,
	0x45, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18,
	0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e,
	0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f,
	0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x58, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x10, 0x07, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a,
	0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x6e, 0x65, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x3f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x04, 0x67, 0x65, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x67,
	0x65, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x4d, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x22, 0xdf, 0x01, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x45, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x86, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0x79, 0x0a, 0x12, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x72, 0x75,
	0x73, 0x22, 0x63, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x44, 0x53, 0x5f, 0x46, 0x41,
	0x53, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x54, 0x5f, 0x46, 0x41,
	0x53, 0x54, 0x41, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x4f, 0x4d, 0x45, 0x5f,
	0x47, 0x42, 0x46, 0x46, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x4f, 0x4d, 0x45,
	0x5f, 0x47, 0x50, 0x46, 0x46, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x44, 0x42, 0x5f, 0x46,
	0x49, 0x4c, 0x45, 0x53, 0x10, 0x05, 0x22, 0xce, 0x05, 0x0a, 0x13, 0x56, 0x69, 0x72, 0x75, 0x73,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02,
	0x18, 0x01, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x61, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x07, 0x74, 0x61, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x05,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x61, 0x78, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x73, 0x65,
	0x71, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0e,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x17, 0x70, 0x61, 0x6e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x61, 0x6e, 0x67, 0x6f, 0x6c, 0x69, 0x6e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x17, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x72, 0x56, 0x69, 0x72, 0x75, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0xbc, 0x04, 0x0a, 0x1a, 0x53, 0x61, 0x72, 0x73,
	0x32, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x5f, 0x6f, 0x6e, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x4a, 0x0a, 0x0c, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x67, 0x0a, 0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x72, 0x75, 0x73, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0xa2, 0x06, 0x0a, 0x0f, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x0e, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x4f, 0x6e, 0x12, 0x4c, 0x0a, 0x08, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x08, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x52, 0x0a, 0x0a, 0x64, 0x65, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e,
	0x44, 0x65, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x64, 0x65, 0x68, 0x79,
	0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x8c,
	0x01, 0x0a, 0x08, 0x48, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x65,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x62,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6c, 0x69, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6c, 0x69, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x1a, 0xcb, 0x01,
	0x0a, 0x0a, 0x44, 0x65, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d,
	0x62, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6c, 0x69, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6c, 0x69, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x3b,
	0x0a, 0x1a, 0x63, 0x6c, 0x69, 0x5f, 0x72, 0x65, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x63, 0x6c, 0x69, 0x52, 0x65, 0x68, 0x79, 0x64, 0x72, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x54,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xbf, 0x03, 0x0a, 0x18, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x69, 0x67, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x11, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x73, 0x6f, 0x6c, 0x72, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x53, 0x6f, 0x6c, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x69, 0x67, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x75, 0x0a, 0x14,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x6e, 0x6b, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x42, 0x69, 0x67, 0x67, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x1a, 0x2c, 0x0a, 0x12, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6c,
	0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x76, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x61, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x6e, 0x6b, 0x5f, 0x66, 0x61, 0x73,
	0x74, 0x61, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x5f, 0x66,
	0x61, 0x73, 0x74, 0x61, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x6e, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x61, 0x10, 0x04, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x22, 0x7f, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6d, 0x69,
	0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x56, 0x65, 0x72, 0x22, 0xba, 0x02, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79, 0x6f,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a,
	0x17, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x61, 0x52, 0x15, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x66, 0x6c, 0x61,
	0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79,
	0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f,
	0x67, 0x65, 0x6e, 0x65, 0x46, 0x6c, 0x61, 0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x1a, 0x29, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x46, 0x6c, 0x61,
	0x6e, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x22, 0x2d, 0x0a, 0x0c, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x5f, 0x6d, 0x73, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x4d, 0x73, 0x65, 0x63, 0x22,
	0x22, 0x0a, 0x0a, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x2a, 0x6c, 0x0a, 0x0d, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x4f, 0x52, 0x54, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x2a, 0x66, 0x0a, 0x05, 0x46, 0x61, 0x73, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x41,
	0x53, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x53, 0x54, 0x41, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41, 0x53, 0x54, 0x41, 0x5f, 0x52, 0x4e, 0x41, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x41, 0x53, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49,
	0x4e, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x41, 0x53, 0x54, 0x41, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x5f, 0x46, 0x4c, 0x41, 0x4e, 0x4b, 0x10, 0x04, 0x2a, 0x2c, 0x0a, 0x0b, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x6c, 0x75, 0x73, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x6d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x02, 0x2a, 0xa1, 0x03, 0x0a, 0x0f, 0x56, 0x69, 0x72, 0x75,
	0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x75,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x67, 0x65, 0x6e, 0x75, 0x73, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x69, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x10, 0x09, 0x12,
	0x14, 0x0a, 0x10, 0x6e, 0x75, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e,
	0x65, 0x73, 0x73, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x75, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x62, 0x69,
	0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x69,
	0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x70, 0x6f, 0x6c,
	0x79, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x13, 0x12,
	0x10, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x10,
	0x14, 0x12, 0x15, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x15, 0x12, 0x13, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x10, 0x16, 0x12, 0x0c, 0x0a,
	0x08, 0x63, 0x64, 0x73, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x10, 0x17, 0x2a, 0x2a, 0x0a, 0x0b, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x74, 0x73,
	0x76, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x63, 0x73, 0x76, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x6a, 0x73, 0x6f, 0x6e, 0x6c, 0x10, 0x02, 0x42, 0x1b, 0x5a, 0x16, 0x6e, 0x63, 0x62, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ncbi_datasets_v1alpha1_datasets_proto_rawDescOnce sync.Once
	file_ncbi_datasets_v1alpha1_datasets_proto_rawDescData = file_ncbi_datasets_v1alpha1_datasets_proto_rawDesc
)

func file_ncbi_datasets_v1alpha1_datasets_proto_rawDescGZIP() []byte {
	file_ncbi_datasets_v1alpha1_datasets_proto_rawDescOnce.Do(func() {
		file_ncbi_datasets_v1alpha1_datasets_proto_rawDescData = protoimpl.X.CompressGZIP(file_ncbi_datasets_v1alpha1_datasets_proto_rawDescData)
	})
	return file_ncbi_datasets_v1alpha1_datasets_proto_rawDescData
}

var file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes = make([]protoimpl.EnumInfo, 26)
var file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes = make([]protoimpl.MessageInfo, 66)
var file_ncbi_datasets_v1alpha1_datasets_proto_goTypes = []interface{}{
	(SortDirection)(0),   // 0: ncbi.datasets.v1alpha1.SortDirection
	(Fasta)(0),           // 1: ncbi.datasets.v1alpha1.Fasta
	(Orientation)(0),     // 2: ncbi.datasets.v1alpha1.Orientation
	(VirusTableField)(0), // 3: ncbi.datasets.v1alpha1.VirusTableField
	(TableFormat)(0),     // 4: ncbi.datasets.v1alpha1.TableFormat
	(AssemblyDatasetDescriptorsFilter_AssemblySource)(0), // 5: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter.AssemblySource
	(AssemblyDatasetDescriptorsFilter_AssemblyLevel)(0),  // 6: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter.AssemblyLevel
	(AssemblyMetadataRequest_ContentType)(0),             // 7: ncbi.datasets.v1alpha1.AssemblyMetadataRequest.ContentType
	(AssemblyDatasetDescriptorsRequest_ContentType)(0),   // 8: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsRequest.ContentType
	(AnnotationForAssembly_Type)(0),                      // 9: ncbi.datasets.v1alpha1.AnnotationForAssembly.Type
	(AssemblyDatasetRequest_Resolution)(0),               // 10: ncbi.datasets.v1alpha1.AssemblyDatasetRequest.Resolution
	(Organism_RankType)(0),                               // 11: ncbi.datasets.v1alpha1.Organism.RankType
	(Organism_CountType)(0),                              // 12: ncbi.datasets.v1alpha1.Organism.CountType
	(OrthologRequest_ContentType)(0),                     // 13: ncbi.datasets.v1alpha1.OrthologRequest.ContentType
	(GeneDatasetRequest_ContentType)(0),                  // 14: ncbi.datasets.v1alpha1.GeneDatasetRequest.ContentType
	(GeneDatasetRequest_SortField)(0),                    // 15: ncbi.datasets.v1alpha1.GeneDatasetRequest.SortField
	(Transcript_TranscriptType)(0),                       // 16: ncbi.datasets.v1alpha1.Transcript.TranscriptType
	(GenomicRegion_GenomicRegionType)(0),                 // 17: ncbi.datasets.v1alpha1.GenomicRegion.GenomicRegionType
	(GeneDescriptor_GeneType)(0),                         // 18: ncbi.datasets.v1alpha1.GeneDescriptor.GeneType
	(GeneDescriptor_RnaType)(0),                          // 19: ncbi.datasets.v1alpha1.GeneDescriptor.RnaType
	(Error_AssemblyErrorCode)(0),                         // 20: ncbi.datasets.v1alpha1.Error.AssemblyErrorCode
	(Error_GeneErrorCode)(0),                             // 21: ncbi.datasets.v1alpha1.Error.GeneErrorCode
	(Error_VirusErrorCode)(0),                            // 22: ncbi.datasets.v1alpha1.Error.VirusErrorCode
	(Warning_GeneWarningCode)(0),                         // 23: ncbi.datasets.v1alpha1.Warning.GeneWarningCode
	(AnnotationForVirus_Type)(0),                         // 24: ncbi.datasets.v1alpha1.AnnotationForVirus.Type
	(MicroBiggeDatasetRequest_FileType)(0),               // 25: ncbi.datasets.v1alpha1.MicroBiggeDatasetRequest.FileType
	(*MethodPayloadRequest)(nil),                         // 26: ncbi.datasets.v1alpha1.MethodPayloadRequest
	(*AssemblyDatasetDescriptorsFilter)(nil),             // 27: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter
	(*Accessions)(nil),                                   // 28: ncbi.datasets.v1alpha1.Accessions
	(*AssemblyMetadataRequest)(nil),                      // 29: ncbi.datasets.v1alpha1.AssemblyMetadataRequest
	(*AssemblyDatasetDescriptorsRequest)(nil),            // 30: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsRequest
	(*AssemblyDatasetDescriptors)(nil),                   // 31: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptors
	(*BioProject)(nil),                                   // 32: ncbi.datasets.v1alpha1.BioProject
	(*BioProjectLineage)(nil),                            // 33: ncbi.datasets.v1alpha1.BioProjectLineage
	(*AssemblyDatasetDescriptor)(nil),                    // 34: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptor
	(*AnnotationForAssembly)(nil),                        // 35: ncbi.datasets.v1alpha1.AnnotationForAssembly
	(*FeatureCounts)(nil),                                // 36: ncbi.datasets.v1alpha1.FeatureCounts
	(*GeneCounts)(nil),                                   // 37: ncbi.datasets.v1alpha1.GeneCounts
	(*AssemblyDatasetRequest)(nil),                       // 38: ncbi.datasets.v1alpha1.AssemblyDatasetRequest
	(*AssemblyDatasetAvailability)(nil),                  // 39: ncbi.datasets.v1alpha1.AssemblyDatasetAvailability
	(*TaxidRequest)(nil),                                 // 40: ncbi.datasets.v1alpha1.TaxidRequest
	(*TaxidReply)(nil),                                   // 41: ncbi.datasets.v1alpha1.TaxidReply
	(*Organism)(nil),                                     // 42: ncbi.datasets.v1alpha1.Organism
	(*TaxTreeRequest)(nil),                               // 43: ncbi.datasets.v1alpha1.TaxTreeRequest
	(*OrganismQueryRequest)(nil),                         // 44: ncbi.datasets.v1alpha1.OrganismQueryRequest
	(*SciNameAndIds)(nil),                                // 45: ncbi.datasets.v1alpha1.SciNameAndIds
	(*OrthologRequest)(nil),                              // 46: ncbi.datasets.v1alpha1.OrthologRequest
	(*OrthologSet)(nil),                                  // 47: ncbi.datasets.v1alpha1.OrthologSet
	(*GeneDatasetRequest)(nil),                           // 48: ncbi.datasets.v1alpha1.GeneDatasetRequest
	(*Range)(nil),                                        // 49: ncbi.datasets.v1alpha1.Range
	(*SeqRangeSet)(nil),                                  // 50: ncbi.datasets.v1alpha1.SeqRangeSet
	(*GenomicLocation)(nil),                              // 51: ncbi.datasets.v1alpha1.GenomicLocation
	(*MaturePeptide)(nil),                                // 52: ncbi.datasets.v1alpha1.MaturePeptide
	(*Protein)(nil),                                      // 53: ncbi.datasets.v1alpha1.Protein
	(*Transcript)(nil),                                   // 54: ncbi.datasets.v1alpha1.Transcript
	(*GenomicRegion)(nil),                                // 55: ncbi.datasets.v1alpha1.GenomicRegion
	(*AnnotatedAssemblies)(nil),                          // 56: ncbi.datasets.v1alpha1.AnnotatedAssemblies
	(*Annotation)(nil),                                   // 57: ncbi.datasets.v1alpha1.Annotation
	(*GeneDescriptor)(nil),                               // 58: ncbi.datasets.v1alpha1.GeneDescriptor
	(*NomenclatureAuthority)(nil),                        // 59: ncbi.datasets.v1alpha1.NomenclatureAuthority
	(*Error)(nil),                                        // 60: ncbi.datasets.v1alpha1.Error
	(*Warning)(nil),                                      // 61: ncbi.datasets.v1alpha1.Warning
	(*Message)(nil),                                      // 62: ncbi.datasets.v1alpha1.Message
	(*GeneMatch)(nil),                                    // 63: ncbi.datasets.v1alpha1.GeneMatch
	(*GeneMetadata)(nil),                                 // 64: ncbi.datasets.v1alpha1.GeneMetadata
	(*AssemblyMatch)(nil),                                // 65: ncbi.datasets.v1alpha1.AssemblyMatch
	(*AssemblyMetadata)(nil),                             // 66: ncbi.datasets.v1alpha1.AssemblyMetadata
	(*GeneDescriptors)(nil),                              // 67: ncbi.datasets.v1alpha1.GeneDescriptors
	(*AnnotationForVirus)(nil),                           // 68: ncbi.datasets.v1alpha1.AnnotationForVirus
	(*VirusDatasetRequest)(nil),                          // 69: ncbi.datasets.v1alpha1.VirusDatasetRequest
	(*Sars2ProteinDatasetRequest)(nil),                   // 70: ncbi.datasets.v1alpha1.Sars2ProteinDatasetRequest
	(*DownloadSummary)(nil),                              // 71: ncbi.datasets.v1alpha1.DownloadSummary
	(*TabularOutput)(nil),                                // 72: ncbi.datasets.v1alpha1.TabularOutput
	(*MicroBiggeDatasetRequest)(nil),                     // 73: ncbi.datasets.v1alpha1.MicroBiggeDatasetRequest
	(*VersionReply)(nil),                                 // 74: ncbi.datasets.v1alpha1.VersionReply
	(*ProkaryoteGeneRequest)(nil),                        // 75: ncbi.datasets.v1alpha1.ProkaryoteGeneRequest
	(*SleepRequest)(nil),                                 // 76: ncbi.datasets.v1alpha1.SleepRequest
	(*SleepReply)(nil),                                   // 77: ncbi.datasets.v1alpha1.SleepReply
	(*AssemblyMetadataRequest_Bioprojects)(nil),          // 78: ncbi.datasets.v1alpha1.AssemblyMetadataRequest.Bioprojects
	(*AnnotationForAssembly_File)(nil),                   // 79: ncbi.datasets.v1alpha1.AnnotationForAssembly.File
	(*Organism_Counts)(nil),                              // 80: ncbi.datasets.v1alpha1.Organism.Counts
	(*Organism_CountByType)(nil),                         // 81: ncbi.datasets.v1alpha1.Organism.CountByType
	(*SciNameAndIds_SciNameAndId)(nil),                   // 82: ncbi.datasets.v1alpha1.SciNameAndIds.SciNameAndId
	(*GeneDatasetRequest_SymbolsForTaxon)(nil),           // 83: ncbi.datasets.v1alpha1.GeneDatasetRequest.SymbolsForTaxon
	(*GeneDatasetRequest_GeneIds)(nil),                   // 84: ncbi.datasets.v1alpha1.GeneDatasetRequest.GeneIds
	(*GeneDatasetRequest_Accessions)(nil),                // 85: ncbi.datasets.v1alpha1.GeneDatasetRequest.Accessions
	(*GeneDatasetRequest_Sort)(nil),                      // 86: ncbi.datasets.v1alpha1.GeneDatasetRequest.Sort
	(*Warning_ReplacedId)(nil),                           // 87: ncbi.datasets.v1alpha1.Warning.ReplacedId
	(*DownloadSummary_Hydrated)(nil),                     // 88: ncbi.datasets.v1alpha1.DownloadSummary.Hydrated
	(*DownloadSummary_Dehydrated)(nil),                   // 89: ncbi.datasets.v1alpha1.DownloadSummary.Dehydrated
	(*MicroBiggeDatasetRequest_ElementFlankConfig)(nil),  // 90: ncbi.datasets.v1alpha1.MicroBiggeDatasetRequest.ElementFlankConfig
	(*ProkaryoteGeneRequest_GeneFlankConfig)(nil),        // 91: ncbi.datasets.v1alpha1.ProkaryoteGeneRequest.GeneFlankConfig
	(*timestamp.Timestamp)(nil),                          // 92: google.protobuf.Timestamp
}
var file_ncbi_datasets_v1alpha1_datasets_proto_depIdxs = []int32{
	5,  // 0: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter.assembly_source:type_name -> ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter.AssemblySource
	6,  // 1: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter.assembly_level:type_name -> ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter.AssemblyLevel
	92, // 2: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter.first_release_date:type_name -> google.protobuf.Timestamp
	92, // 3: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter.last_release_date:type_name -> google.protobuf.Timestamp
	28, // 4: ncbi.datasets.v1alpha1.AssemblyMetadataRequest.accessions:type_name -> ncbi.datasets.v1alpha1.Accessions
	78, // 5: ncbi.datasets.v1alpha1.AssemblyMetadataRequest.bioprojects:type_name -> ncbi.datasets.v1alpha1.AssemblyMetadataRequest.Bioprojects
	27, // 6: ncbi.datasets.v1alpha1.AssemblyMetadataRequest.filters:type_name -> ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter
	7,  // 7: ncbi.datasets.v1alpha1.AssemblyMetadataRequest.returned_content:type_name -> ncbi.datasets.v1alpha1.AssemblyMetadataRequest.ContentType
	27, // 8: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsRequest.filters:type_name -> ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsFilter
	8,  // 9: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsRequest.returned_content:type_name -> ncbi.datasets.v1alpha1.AssemblyDatasetDescriptorsRequest.ContentType
	34, // 10: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptors.datasets:type_name -> ncbi.datasets.v1alpha1.AssemblyDatasetDescriptor
	32, // 11: ncbi.datasets.v1alpha1.BioProjectLineage.bioprojects:type_name -> ncbi.datasets.v1alpha1.BioProject
	33, // 12: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptor.bioproject_lineages:type_name -> ncbi.datasets.v1alpha1.BioProjectLineage
	42, // 13: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptor.org:type_name -> ncbi.datasets.v1alpha1.Organism
	35, // 14: ncbi.datasets.v1alpha1.AssemblyDatasetDescriptor.annotation_metadata:type_name -> ncbi.datasets.v1alpha1.AnnotationForAssembly
	79, // 15: ncbi.datasets.v1alpha1.AnnotationForAssembly.file:type_name -> ncbi.datasets.v1alpha1.AnnotationForAssembly.File
	36, // 16: ncbi.datasets.v1alpha1.AnnotationForAssembly.stats:type_name -> ncbi.datasets.v1alpha1.FeatureCounts
	37, // 17: ncbi.datasets.v1alpha1.FeatureCounts.gene_counts:type_name -> ncbi.datasets.v1alpha1.GeneCounts
	9,  // 18: ncbi.datasets.v1alpha1.AssemblyDatasetRequest.include_annotation_type:type_name -> ncbi.datasets.v1alpha1.AnnotationForAssembly.Type
	10, // 19: ncbi.datasets.v1alpha1.AssemblyDatasetRequest.hydrated:type_name -> ncbi.datasets.v1alpha1.AssemblyDatasetRequest.Resolution
	11, // 20: ncbi.datasets.v1alpha1.Organism.rank:type_name -> ncbi.datasets.v1alpha1.Organism.RankType
	80, // 21: ncbi.datasets.v1alpha1.Organism.assembly_counts:type_name -> ncbi.datasets.v1alpha1.Organism.Counts
	81, // 22: ncbi.datasets.v1alpha1.Organism.counts:type_name -> ncbi.datasets.v1alpha1.Organism.CountByType
	42, // 23: ncbi.datasets.v1alpha1.Organism.children:type_name -> ncbi.datasets.v1alpha1.Organism
	42, // 24: ncbi.datasets.v1alpha1.Organism.merged:type_name -> ncbi.datasets.v1alpha1.Organism
	82, // 25: ncbi.datasets.v1alpha1.SciNameAndIds.sci_name_and_ids:type_name -> ncbi.datasets.v1alpha1.SciNameAndIds.SciNameAndId
	13, // 26: ncbi.datasets.v1alpha1.OrthologRequest.returned_content:type_name -> ncbi.datasets.v1alpha1.OrthologRequest.ContentType
	64, // 27: ncbi.datasets.v1alpha1.OrthologSet.genes:type_name -> ncbi.datasets.v1alpha1.GeneMetadata
	83, // 28: ncbi.datasets.v1alpha1.GeneDatasetRequest.symbols_for_taxon:type_name -> ncbi.datasets.v1alpha1.GeneDatasetRequest.SymbolsForTaxon
	1,  // 29: ncbi.datasets.v1alpha1.GeneDatasetRequest.include_annotation_type:type_name -> ncbi.datasets.v1alpha1.Fasta
	14, // 30: ncbi.datasets.v1alpha1.GeneDatasetRequest.returned_content:type_name -> ncbi.datasets.v1alpha1.GeneDatasetRequest.ContentType
	86, // 31: ncbi.datasets.v1alpha1.GeneDatasetRequest.sort_schema:type_name -> ncbi.datasets.v1alpha1.GeneDatasetRequest.Sort
	2,  // 32: ncbi.datasets.v1alpha1.Range.orientation:type_name -> ncbi.datasets.v1alpha1.Orientation
	49, // 33: ncbi.datasets.v1alpha1.SeqRangeSet.range:type_name -> ncbi.datasets.v1alpha1.Range
	49, // 34: ncbi.datasets.v1alpha1.GenomicLocation.genomic_range:type_name -> ncbi.datasets.v1alpha1.Range
	49, // 35: ncbi.datasets.v1alpha1.GenomicLocation.exons:type_name -> ncbi.datasets.v1alpha1.Range
	52, // 36: ncbi.datasets.v1alpha1.Protein.mature_peptides:type_name -> ncbi.datasets.v1alpha1.MaturePeptide
	50, // 37: ncbi.datasets.v1alpha1.Transcript.genomic_range:type_name -> ncbi.datasets.v1alpha1.SeqRangeSet
	50, // 38: ncbi.datasets.v1alpha1.Transcript.exons:type_name -> ncbi.datasets.v1alpha1.SeqRangeSet
	50, // 39: ncbi.datasets.v1alpha1.Transcript.cds:type_name -> ncbi.datasets.v1alpha1.SeqRangeSet
	51, // 40: ncbi.datasets.v1alpha1.Transcript.genomic_locations:type_name -> ncbi.datasets.v1alpha1.GenomicLocation
	53, // 41: ncbi.datasets.v1alpha1.Transcript.protein:type_name -> ncbi.datasets.v1alpha1.Protein
	16, // 42: ncbi.datasets.v1alpha1.Transcript.type:type_name -> ncbi.datasets.v1alpha1.Transcript.TranscriptType
	50, // 43: ncbi.datasets.v1alpha1.GenomicRegion.gene_range:type_name -> ncbi.datasets.v1alpha1.SeqRangeSet
	17, // 44: ncbi.datasets.v1alpha1.GenomicRegion.type:type_name -> ncbi.datasets.v1alpha1.GenomicRegion.GenomicRegionType
	56, // 45: ncbi.datasets.v1alpha1.Annotation.assemblies_in_scope:type_name -> ncbi.datasets.v1alpha1.AnnotatedAssemblies
	18, // 46: ncbi.datasets.v1alpha1.GeneDescriptor.type:type_name -> ncbi.datasets.v1alpha1.GeneDescriptor.GeneType
	19, // 47: ncbi.datasets.v1alpha1.GeneDescriptor.rna_type:type_name -> ncbi.datasets.v1alpha1.GeneDescriptor.RnaType
	2,  // 48: ncbi.datasets.v1alpha1.GeneDescriptor.orientation:type_name -> ncbi.datasets.v1alpha1.Orientation
	50, // 49: ncbi.datasets.v1alpha1.GeneDescriptor.genomic_ranges:type_name -> ncbi.datasets.v1alpha1.SeqRangeSet
	55, // 50: ncbi.datasets.v1alpha1.GeneDescriptor.reference_standards:type_name -> ncbi.datasets.v1alpha1.GenomicRegion
	55, // 51: ncbi.datasets.v1alpha1.GeneDescriptor.genomic_regions:type_name -> ncbi.datasets.v1alpha1.GenomicRegion
	54, // 52: ncbi.datasets.v1alpha1.GeneDescriptor.transcripts:type_name -> ncbi.datasets.v1alpha1.Transcript
	53, // 53: ncbi.datasets.v1alpha1.GeneDescriptor.proteins:type_name -> ncbi.datasets.v1alpha1.Protein
	59, // 54: ncbi.datasets.v1alpha1.GeneDescriptor.nomenclature_authority:type_name -> ncbi.datasets.v1alpha1.NomenclatureAuthority
	57, // 55: ncbi.datasets.v1alpha1.GeneDescriptor.annotations:type_name -> ncbi.datasets.v1alpha1.Annotation
	20, // 56: ncbi.datasets.v1alpha1.Error.assembly_error_code:type_name -> ncbi.datasets.v1alpha1.Error.AssemblyErrorCode
	21, // 57: ncbi.datasets.v1alpha1.Error.gene_error_code:type_name -> ncbi.datasets.v1alpha1.Error.GeneErrorCode
	22, // 58: ncbi.datasets.v1alpha1.Error.virus_error_code:type_name -> ncbi.datasets.v1alpha1.Error.VirusErrorCode
	23, // 59: ncbi.datasets.v1alpha1.Warning.gene_warning_code:type_name -> ncbi.datasets.v1alpha1.Warning.GeneWarningCode
	87, // 60: ncbi.datasets.v1alpha1.Warning.replaced_id:type_name -> ncbi.datasets.v1alpha1.Warning.ReplacedId
	60, // 61: ncbi.datasets.v1alpha1.Message.error:type_name -> ncbi.datasets.v1alpha1.Error
	61, // 62: ncbi.datasets.v1alpha1.Message.warning:type_name -> ncbi.datasets.v1alpha1.Warning
	62, // 63: ncbi.datasets.v1alpha1.GeneMatch.messages:type_name -> ncbi.datasets.v1alpha1.Message
	61, // 64: ncbi.datasets.v1alpha1.GeneMatch.warnings:type_name -> ncbi.datasets.v1alpha1.Warning
	58, // 65: ncbi.datasets.v1alpha1.GeneMatch.gene:type_name -> ncbi.datasets.v1alpha1.GeneDescriptor
	60, // 66: ncbi.datasets.v1alpha1.GeneMatch.errors:type_name -> ncbi.datasets.v1alpha1.Error
	62, // 67: ncbi.datasets.v1alpha1.GeneMetadata.messages:type_name -> ncbi.datasets.v1alpha1.Message
	63, // 68: ncbi.datasets.v1alpha1.GeneMetadata.genes:type_name -> ncbi.datasets.v1alpha1.GeneMatch
	62, // 69: ncbi.datasets.v1alpha1.AssemblyMatch.messages:type_name -> ncbi.datasets.v1alpha1.Message
	34, // 70: ncbi.datasets.v1alpha1.AssemblyMatch.assembly:type_name -> ncbi.datasets.v1alpha1.AssemblyDatasetDescriptor
	62, // 71: ncbi.datasets.v1alpha1.AssemblyMetadata.messages:type_name -> ncbi.datasets.v1alpha1.Message
	65, // 72: ncbi.datasets.v1alpha1.AssemblyMetadata.assemblies:type_name -> ncbi.datasets.v1alpha1.AssemblyMatch
	58, // 73: ncbi.datasets.v1alpha1.GeneDescriptors.genes:type_name -> ncbi.datasets.v1alpha1.GeneDescriptor
	60, // 74: ncbi.datasets.v1alpha1.GeneDescriptors.errors:type_name -> ncbi.datasets.v1alpha1.Error
	92, // 75: ncbi.datasets.v1alpha1.VirusDatasetRequest.released_since:type_name -> google.protobuf.Timestamp
	3,  // 76: ncbi.datasets.v1alpha1.VirusDatasetRequest.table_fields:type_name -> ncbi.datasets.v1alpha1.VirusTableField
	24, // 77: ncbi.datasets.v1alpha1.VirusDatasetRequest.include_annotation_type:type_name -> ncbi.datasets.v1alpha1.AnnotationForVirus.Type
	4,  // 78: ncbi.datasets.v1alpha1.VirusDatasetRequest.format:type_name -> ncbi.datasets.v1alpha1.TableFormat
	92, // 79: ncbi.datasets.v1alpha1.Sars2ProteinDatasetRequest.released_since:type_name -> google.protobuf.Timestamp
	3,  // 80: ncbi.datasets.v1alpha1.Sars2ProteinDatasetRequest.table_fields:type_name -> ncbi.datasets.v1alpha1.VirusTableField
	24, // 81: ncbi.datasets.v1alpha1.Sars2ProteinDatasetRequest.include_annotation_type:type_name -> ncbi.datasets.v1alpha1.AnnotationForVirus.Type
	4,  // 82: ncbi.datasets.v1alpha1.Sars2ProteinDatasetRequest.format:type_name -> ncbi.datasets.v1alpha1.TableFormat
	92, // 83: ncbi.datasets.v1alpha1.DownloadSummary.resource_updated_on:type_name -> google.protobuf.Timestamp
	88, // 84: ncbi.datasets.v1alpha1.DownloadSummary.hydrated:type_name -> ncbi.datasets.v1alpha1.DownloadSummary.Hydrated
	89, // 85: ncbi.datasets.v1alpha1.DownloadSummary.dehydrated:type_name -> ncbi.datasets.v1alpha1.DownloadSummary.Dehydrated
	60, // 86: ncbi.datasets.v1alpha1.DownloadSummary.errors:type_name -> ncbi.datasets.v1alpha1.Error
	62, // 87: ncbi.datasets.v1alpha1.DownloadSummary.messages:type_name -> ncbi.datasets.v1alpha1.Message
	25, // 88: ncbi.datasets.v1alpha1.MicroBiggeDatasetRequest.files:type_name -> ncbi.datasets.v1alpha1.MicroBiggeDatasetRequest.FileType
	90, // 89: ncbi.datasets.v1alpha1.MicroBiggeDatasetRequest.element_flank_config:type_name -> ncbi.datasets.v1alpha1.MicroBiggeDatasetRequest.ElementFlankConfig
	1,  // 90: ncbi.datasets.v1alpha1.ProkaryoteGeneRequest.include_annotation_type:type_name -> ncbi.datasets.v1alpha1.Fasta
	91, // 91: ncbi.datasets.v1alpha1.ProkaryoteGeneRequest.gene_flank_config:type_name -> ncbi.datasets.v1alpha1.ProkaryoteGeneRequest.GeneFlankConfig
	9,  // 92: ncbi.datasets.v1alpha1.AnnotationForAssembly.File.type:type_name -> ncbi.datasets.v1alpha1.AnnotationForAssembly.Type
	12, // 93: ncbi.datasets.v1alpha1.Organism.CountByType.type:type_name -> ncbi.datasets.v1alpha1.Organism.CountType
	80, // 94: ncbi.datasets.v1alpha1.Organism.CountByType.counts:type_name -> ncbi.datasets.v1alpha1.Organism.Counts
	15, // 95: ncbi.datasets.v1alpha1.GeneDatasetRequest.Sort.field:type_name -> ncbi.datasets.v1alpha1.GeneDatasetRequest.SortField
	0,  // 96: ncbi.datasets.v1alpha1.GeneDatasetRequest.Sort.direction:type_name -> ncbi.datasets.v1alpha1.SortDirection
	97, // [97:97] is the sub-list for method output_type
	97, // [97:97] is the sub-list for method input_type
	97, // [97:97] is the sub-list for extension type_name
	97, // [97:97] is the sub-list for extension extendee
	0,  // [0:97] is the sub-list for field type_name
}

func init() { file_ncbi_datasets_v1alpha1_datasets_proto_init() }
func file_ncbi_datasets_v1alpha1_datasets_proto_init() {
	if File_ncbi_datasets_v1alpha1_datasets_proto != nil {
		return
	}
	file_ncbi_datasets_v1alpha1_openapi_options_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyDatasetDescriptorsFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Accessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyDatasetDescriptorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyDatasetDescriptors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioProjectLineage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyDatasetDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationForAssembly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyDatasetAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxidReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organism); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaxTreeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganismQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SciNameAndIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrthologRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrthologSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeqRangeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomicLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaturePeptide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protein); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transcript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomicRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedAssemblies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NomenclatureAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warning); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneDescriptors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationForVirus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirusDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sars2ProteinDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabularOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicroBiggeDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProkaryoteGeneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SleepReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyMetadataRequest_Bioprojects); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationForAssembly_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organism_Counts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Organism_CountByType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SciNameAndIds_SciNameAndId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneDatasetRequest_SymbolsForTaxon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneDatasetRequest_GeneIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneDatasetRequest_Accessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneDatasetRequest_Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warning_ReplacedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSummary_Hydrated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadSummary_Dehydrated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicroBiggeDatasetRequest_ElementFlankConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProkaryoteGeneRequest_GeneFlankConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AssemblyMetadataRequest_Limit)(nil),
		(*AssemblyMetadataRequest_PageSize)(nil),
	}
	file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*AssemblyDatasetDescriptorsRequest_TaxId)(nil),
		(*AssemblyDatasetDescriptorsRequest_OrgName)(nil),
		(*AssemblyDatasetDescriptorsRequest_TaxName)(nil),
		(*AssemblyDatasetDescriptorsRequest_AssemblyAccession)(nil),
		(*AssemblyDatasetDescriptorsRequest_Cutoff)(nil),
		(*AssemblyDatasetDescriptorsRequest_Limit)(nil),
	}
	file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*TaxTreeRequest_TaxId)(nil),
		(*TaxTreeRequest_TaxToken)(nil),
		(*TaxTreeRequest_Taxon)(nil),
	}
	file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*OrganismQueryRequest_OrganismQuery)(nil),
		(*OrganismQueryRequest_TaxonQuery)(nil),
	}
	file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*Error_AssemblyErrorCode_)(nil),
		(*Error_GeneErrorCode_)(nil),
		(*Error_VirusErrorCode_)(nil),
	}
	file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*Warning_GeneWarningCode_)(nil),
	}
	file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*Message_Error)(nil),
		(*Message_Warning)(nil),
	}
	file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[43].OneofWrappers = []interface{}{
		(*VirusDatasetRequest_TaxId)(nil),
		(*VirusDatasetRequest_TaxName)(nil),
		(*VirusDatasetRequest_Accession)(nil),
		(*VirusDatasetRequest_Taxon)(nil),
	}
	file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*MicroBiggeDatasetRequest_OpaqueSolrQuery)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ncbi_datasets_v1alpha1_datasets_proto_rawDesc,
			NumEnums:      26,
			NumMessages:   66,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ncbi_datasets_v1alpha1_datasets_proto_goTypes,
		DependencyIndexes: file_ncbi_datasets_v1alpha1_datasets_proto_depIdxs,
		EnumInfos:         file_ncbi_datasets_v1alpha1_datasets_proto_enumTypes,
		MessageInfos:      file_ncbi_datasets_v1alpha1_datasets_proto_msgTypes,
	}.Build()
	File_ncbi_datasets_v1alpha1_datasets_proto = out.File
	file_ncbi_datasets_v1alpha1_datasets_proto_rawDesc = nil
	file_ncbi_datasets_v1alpha1_datasets_proto_goTypes = nil
	file_ncbi_datasets_v1alpha1_datasets_proto_depIdxs = nil
}
