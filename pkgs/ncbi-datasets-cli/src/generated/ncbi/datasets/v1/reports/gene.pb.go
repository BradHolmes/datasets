// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: ncbi/datasets/v1/reports/gene.proto

package reports

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "ncbi/datasets/options"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Transcript_TranscriptType int32

const (
	Transcript_UNKNOWN              Transcript_TranscriptType = 0
	Transcript_PROTEIN_CODING       Transcript_TranscriptType = 1
	Transcript_NON_CODING           Transcript_TranscriptType = 2
	Transcript_PROTEIN_CODING_MODEL Transcript_TranscriptType = 3
	Transcript_NON_CODING_MODEL     Transcript_TranscriptType = 4
)

// Enum value maps for Transcript_TranscriptType.
var (
	Transcript_TranscriptType_name = map[int32]string{
		0: "UNKNOWN",
		1: "PROTEIN_CODING",
		2: "NON_CODING",
		3: "PROTEIN_CODING_MODEL",
		4: "NON_CODING_MODEL",
	}
	Transcript_TranscriptType_value = map[string]int32{
		"UNKNOWN":              0,
		"PROTEIN_CODING":       1,
		"NON_CODING":           2,
		"PROTEIN_CODING_MODEL": 3,
		"NON_CODING_MODEL":     4,
	}
)

func (x Transcript_TranscriptType) Enum() *Transcript_TranscriptType {
	p := new(Transcript_TranscriptType)
	*p = x
	return p
}

func (x Transcript_TranscriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Transcript_TranscriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1_reports_gene_proto_enumTypes[0].Descriptor()
}

func (Transcript_TranscriptType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1_reports_gene_proto_enumTypes[0]
}

func (x Transcript_TranscriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Transcript_TranscriptType.Descriptor instead.
func (Transcript_TranscriptType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{3, 0}
}

type GenomicRegion_GenomicRegionType int32

const (
	GenomicRegion_UNKNOWN           GenomicRegion_GenomicRegionType = 0
	GenomicRegion_REFSEQ_GENE       GenomicRegion_GenomicRegionType = 1
	GenomicRegion_PSEUDOGENE        GenomicRegion_GenomicRegionType = 2
	GenomicRegion_BIOLOGICAL_REGION GenomicRegion_GenomicRegionType = 3
	GenomicRegion_OTHER             GenomicRegion_GenomicRegionType = 4
)

// Enum value maps for GenomicRegion_GenomicRegionType.
var (
	GenomicRegion_GenomicRegionType_name = map[int32]string{
		0: "UNKNOWN",
		1: "REFSEQ_GENE",
		2: "PSEUDOGENE",
		3: "BIOLOGICAL_REGION",
		4: "OTHER",
	}
	GenomicRegion_GenomicRegionType_value = map[string]int32{
		"UNKNOWN":           0,
		"REFSEQ_GENE":       1,
		"PSEUDOGENE":        2,
		"BIOLOGICAL_REGION": 3,
		"OTHER":             4,
	}
)

func (x GenomicRegion_GenomicRegionType) Enum() *GenomicRegion_GenomicRegionType {
	p := new(GenomicRegion_GenomicRegionType)
	*p = x
	return p
}

func (x GenomicRegion_GenomicRegionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenomicRegion_GenomicRegionType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1_reports_gene_proto_enumTypes[1].Descriptor()
}

func (GenomicRegion_GenomicRegionType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1_reports_gene_proto_enumTypes[1]
}

func (x GenomicRegion_GenomicRegionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenomicRegion_GenomicRegionType.Descriptor instead.
func (GenomicRegion_GenomicRegionType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{4, 0}
}

// NB: GeneType values match Entrez Gene
type GeneDescriptor_GeneType int32

const (
	GeneDescriptor_UNKNOWN           GeneDescriptor_GeneType = 0
	GeneDescriptor_tRNA              GeneDescriptor_GeneType = 1
	GeneDescriptor_rRNA              GeneDescriptor_GeneType = 2
	GeneDescriptor_snRNA             GeneDescriptor_GeneType = 3
	GeneDescriptor_scRNA             GeneDescriptor_GeneType = 4
	GeneDescriptor_snoRNA            GeneDescriptor_GeneType = 5
	GeneDescriptor_PROTEIN_CODING    GeneDescriptor_GeneType = 6
	GeneDescriptor_PSEUDO            GeneDescriptor_GeneType = 7 // these will have NG or NR
	GeneDescriptor_TRANSPOSON        GeneDescriptor_GeneType = 8
	GeneDescriptor_miscRNA           GeneDescriptor_GeneType = 9
	GeneDescriptor_ncRNA             GeneDescriptor_GeneType = 10
	GeneDescriptor_BIOLOGICAL_REGION GeneDescriptor_GeneType = 11 // these will have NG
	GeneDescriptor_OTHER             GeneDescriptor_GeneType = 255
)

// Enum value maps for GeneDescriptor_GeneType.
var (
	GeneDescriptor_GeneType_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "tRNA",
		2:   "rRNA",
		3:   "snRNA",
		4:   "scRNA",
		5:   "snoRNA",
		6:   "PROTEIN_CODING",
		7:   "PSEUDO",
		8:   "TRANSPOSON",
		9:   "miscRNA",
		10:  "ncRNA",
		11:  "BIOLOGICAL_REGION",
		255: "OTHER",
	}
	GeneDescriptor_GeneType_value = map[string]int32{
		"UNKNOWN":           0,
		"tRNA":              1,
		"rRNA":              2,
		"snRNA":             3,
		"scRNA":             4,
		"snoRNA":            5,
		"PROTEIN_CODING":    6,
		"PSEUDO":            7,
		"TRANSPOSON":        8,
		"miscRNA":           9,
		"ncRNA":             10,
		"BIOLOGICAL_REGION": 11,
		"OTHER":             255,
	}
)

func (x GeneDescriptor_GeneType) Enum() *GeneDescriptor_GeneType {
	p := new(GeneDescriptor_GeneType)
	*p = x
	return p
}

func (x GeneDescriptor_GeneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneDescriptor_GeneType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1_reports_gene_proto_enumTypes[2].Descriptor()
}

func (GeneDescriptor_GeneType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1_reports_gene_proto_enumTypes[2]
}

func (x GeneDescriptor_GeneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeneDescriptor_GeneType.Descriptor instead.
func (GeneDescriptor_GeneType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{7, 0}
}

type GeneDescriptor_RnaType int32

const (
	GeneDescriptor_rna_UNKNOWN GeneDescriptor_RnaType = 0
	GeneDescriptor_premsg      GeneDescriptor_RnaType = 1
	GeneDescriptor_tmRna       GeneDescriptor_RnaType = 2
)

// Enum value maps for GeneDescriptor_RnaType.
var (
	GeneDescriptor_RnaType_name = map[int32]string{
		0: "rna_UNKNOWN",
		1: "premsg",
		2: "tmRna",
	}
	GeneDescriptor_RnaType_value = map[string]int32{
		"rna_UNKNOWN": 0,
		"premsg":      1,
		"tmRna":       2,
	}
)

func (x GeneDescriptor_RnaType) Enum() *GeneDescriptor_RnaType {
	p := new(GeneDescriptor_RnaType)
	*p = x
	return p
}

func (x GeneDescriptor_RnaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeneDescriptor_RnaType) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1_reports_gene_proto_enumTypes[3].Descriptor()
}

func (GeneDescriptor_RnaType) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1_reports_gene_proto_enumTypes[3]
}

func (x GeneDescriptor_RnaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeneDescriptor_RnaType.Descriptor instead.
func (GeneDescriptor_RnaType) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{7, 1}
}

type MaturePeptide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessionVersion string `protobuf:"bytes,1,opt,name=accession_version,json=accessionVersion,proto3" json:"accession_version,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Length           uint32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *MaturePeptide) Reset() {
	*x = MaturePeptide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaturePeptide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaturePeptide) ProtoMessage() {}

func (x *MaturePeptide) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaturePeptide.ProtoReflect.Descriptor instead.
func (*MaturePeptide) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{0}
}

func (x *MaturePeptide) GetAccessionVersion() string {
	if x != nil {
		return x.AccessionVersion
	}
	return ""
}

func (x *MaturePeptide) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MaturePeptide) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type Protein struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RefSeq protein accession with version
	AccessionVersion string `protobuf:"bytes,1,opt,name=accession_version,json=accessionVersion,proto3" json:"accession_version,omitempty"`
	// Protein name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Protein length in amino acids
	Length uint32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// Protein isoform name
	IsoformName string `protobuf:"bytes,5,opt,name=isoform_name,json=isoformName,proto3" json:"isoform_name,omitempty"`
	// Ensembl protein accession with version
	EnsemblProtein string           `protobuf:"bytes,6,opt,name=ensembl_protein,json=ensemblProtein,proto3" json:"ensembl_protein,omitempty"`
	MaturePeptides []*MaturePeptide `protobuf:"bytes,4,rep,name=mature_peptides,json=maturePeptides,proto3" json:"mature_peptides,omitempty"`
}

func (x *Protein) Reset() {
	*x = Protein{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protein) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protein) ProtoMessage() {}

func (x *Protein) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protein.ProtoReflect.Descriptor instead.
func (*Protein) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{1}
}

func (x *Protein) GetAccessionVersion() string {
	if x != nil {
		return x.AccessionVersion
	}
	return ""
}

func (x *Protein) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Protein) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Protein) GetIsoformName() string {
	if x != nil {
		return x.IsoformName
	}
	return ""
}

func (x *Protein) GetEnsemblProtein() string {
	if x != nil {
		return x.EnsemblProtein
	}
	return ""
}

func (x *Protein) GetMaturePeptides() []*MaturePeptide {
	if x != nil {
		return x.MaturePeptides
	}
	return nil
}

type GenomicLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenomicAccessionVersion string   `protobuf:"bytes,1,opt,name=genomic_accession_version,json=genomicAccessionVersion,proto3" json:"genomic_accession_version,omitempty"`
	SequenceName            string   `protobuf:"bytes,2,opt,name=sequence_name,json=sequenceName,proto3" json:"sequence_name,omitempty"`
	GenomicRange            *Range   `protobuf:"bytes,3,opt,name=genomic_range,json=genomicRange,proto3" json:"genomic_range,omitempty"`
	Exons                   []*Range `protobuf:"bytes,4,rep,name=exons,proto3" json:"exons,omitempty"`
}

func (x *GenomicLocation) Reset() {
	*x = GenomicLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomicLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomicLocation) ProtoMessage() {}

func (x *GenomicLocation) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomicLocation.ProtoReflect.Descriptor instead.
func (*GenomicLocation) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{2}
}

func (x *GenomicLocation) GetGenomicAccessionVersion() string {
	if x != nil {
		return x.GenomicAccessionVersion
	}
	return ""
}

func (x *GenomicLocation) GetSequenceName() string {
	if x != nil {
		return x.SequenceName
	}
	return ""
}

func (x *GenomicLocation) GetGenomicRange() *Range {
	if x != nil {
		return x.GenomicRange
	}
	return nil
}

func (x *GenomicLocation) GetExons() []*Range {
	if x != nil {
		return x.Exons
	}
	return nil
}

type Transcript struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RefSeq transcript accession with version
	AccessionVersion string `protobuf:"bytes,1,opt,name=accession_version,json=accessionVersion,proto3" json:"accession_version,omitempty"`
	// RefSeq transcript name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// RefSeq transcript length in nucleotides
	Length uint32 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	// Deprecated: Do not use.
	GenomicRange *SeqRangeSet `protobuf:"bytes,4,opt,name=genomic_range,json=genomicRange,proto3" json:"genomic_range,omitempty"`
	// Deprecated: Do not use.
	Exons            *SeqRangeSet       `protobuf:"bytes,5,opt,name=exons,proto3" json:"exons,omitempty"`
	Cds              *SeqRangeSet       `protobuf:"bytes,6,opt,name=cds,proto3" json:"cds,omitempty"`
	GenomicLocations []*GenomicLocation `protobuf:"bytes,10,rep,name=genomic_locations,json=genomicLocations,proto3" json:"genomic_locations,omitempty"`
	// Ensembl transcript accession with version
	EnsemblTranscript string                    `protobuf:"bytes,8,opt,name=ensembl_transcript,json=ensemblTranscript,proto3" json:"ensembl_transcript,omitempty"`
	Protein           *Protein                  `protobuf:"bytes,7,opt,name=protein,proto3" json:"protein,omitempty"`
	Type              Transcript_TranscriptType `protobuf:"varint,9,opt,name=type,proto3,enum=ncbi.datasets.v1.reports.Transcript_TranscriptType" json:"type,omitempty"`
}

func (x *Transcript) Reset() {
	*x = Transcript{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transcript) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcript) ProtoMessage() {}

func (x *Transcript) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcript.ProtoReflect.Descriptor instead.
func (*Transcript) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{3}
}

func (x *Transcript) GetAccessionVersion() string {
	if x != nil {
		return x.AccessionVersion
	}
	return ""
}

func (x *Transcript) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Transcript) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

// Deprecated: Do not use.
func (x *Transcript) GetGenomicRange() *SeqRangeSet {
	if x != nil {
		return x.GenomicRange
	}
	return nil
}

// Deprecated: Do not use.
func (x *Transcript) GetExons() *SeqRangeSet {
	if x != nil {
		return x.Exons
	}
	return nil
}

func (x *Transcript) GetCds() *SeqRangeSet {
	if x != nil {
		return x.Cds
	}
	return nil
}

func (x *Transcript) GetGenomicLocations() []*GenomicLocation {
	if x != nil {
		return x.GenomicLocations
	}
	return nil
}

func (x *Transcript) GetEnsemblTranscript() string {
	if x != nil {
		return x.EnsemblTranscript
	}
	return ""
}

func (x *Transcript) GetProtein() *Protein {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *Transcript) GetType() Transcript_TranscriptType {
	if x != nil {
		return x.Type
	}
	return Transcript_UNKNOWN
}

type GenomicRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The range of this Gene record on this genomic region.
	GeneRange *SeqRangeSet                    `protobuf:"bytes,1,opt,name=gene_range,json=geneRange,proto3" json:"gene_range,omitempty"`
	Type      GenomicRegion_GenomicRegionType `protobuf:"varint,2,opt,name=type,proto3,enum=ncbi.datasets.v1.reports.GenomicRegion_GenomicRegionType" json:"type,omitempty"`
}

func (x *GenomicRegion) Reset() {
	*x = GenomicRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenomicRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenomicRegion) ProtoMessage() {}

func (x *GenomicRegion) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenomicRegion.ProtoReflect.Descriptor instead.
func (*GenomicRegion) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{4}
}

func (x *GenomicRegion) GetGeneRange() *SeqRangeSet {
	if x != nil {
		return x.GeneRange
	}
	return nil
}

func (x *GenomicRegion) GetType() GenomicRegion_GenomicRegionType {
	if x != nil {
		return x.Type
	}
	return GenomicRegion_UNKNOWN
}

type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseName       string                 `protobuf:"bytes,1,opt,name=release_name,json=releaseName,proto3" json:"release_name,omitempty"`
	ReleaseDate       string                 `protobuf:"bytes,2,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	AssembliesInScope []*AnnotatedAssemblies `protobuf:"bytes,3,rep,name=assemblies_in_scope,json=assembliesInScope,proto3" json:"assemblies_in_scope,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{5}
}

func (x *Annotation) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *Annotation) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *Annotation) GetAssembliesInScope() []*AnnotatedAssemblies {
	if x != nil {
		return x.AssembliesInScope
	}
	return nil
}

type AnnotatedAssemblies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accession string `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AnnotatedAssemblies) Reset() {
	*x = AnnotatedAssemblies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedAssemblies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedAssemblies) ProtoMessage() {}

func (x *AnnotatedAssemblies) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedAssemblies.ProtoReflect.Descriptor instead.
func (*AnnotatedAssemblies) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{6}
}

func (x *AnnotatedAssemblies) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *AnnotatedAssemblies) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GeneDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NCBI Gene ID
	GeneId uint64 `protobuf:"varint,1,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	// gene symbol
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// gene name
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// NCBI Taxonomy ID for the organism
	TaxId uint64 `protobuf:"varint,4,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	// Taxonomic name of the organism
	Taxname string `protobuf:"bytes,5,opt,name=taxname,proto3" json:"taxname,omitempty"`
	// Common name of the organism
	CommonName    string                  `protobuf:"bytes,12,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	Type          GeneDescriptor_GeneType `protobuf:"varint,6,opt,name=type,proto3,enum=ncbi.datasets.v1.reports.GeneDescriptor_GeneType" json:"type,omitempty"`
	RnaType       GeneDescriptor_RnaType  `protobuf:"varint,11,opt,name=rna_type,json=rnaType,proto3,enum=ncbi.datasets.v1.reports.GeneDescriptor_RnaType" json:"rna_type,omitempty"`
	Orientation   Orientation             `protobuf:"varint,7,opt,name=orientation,proto3,enum=ncbi.datasets.v1.reports.Orientation" json:"orientation,omitempty"`
	GenomicRanges []*SeqRangeSet          `protobuf:"bytes,8,rep,name=genomic_ranges,json=genomicRanges,proto3" json:"genomic_ranges,omitempty"`
	// Clinical reference standard NG
	ReferenceStandards []*GenomicRegion `protobuf:"bytes,21,rep,name=reference_standards,json=referenceStandards,proto3" json:"reference_standards,omitempty"`
	// Pseudogene, non-genic regulatory element and other genomic region NG
	GenomicRegions []*GenomicRegion `protobuf:"bytes,22,rep,name=genomic_regions,json=genomicRegions,proto3" json:"genomic_regions,omitempty"`
	// RefSeq coding and non-coding transcript accessions
	Transcripts []*Transcript `protobuf:"bytes,9,rep,name=transcripts,proto3" json:"transcripts,omitempty"`
	// Only for proteins directly annotated on the Gene, without any intermediary transcript
	Proteins []*Protein `protobuf:"bytes,10,rep,name=proteins,proto3" json:"proteins,omitempty"`
	// See chromosomes
	//
	// Deprecated: Do not use.
	Chromosome            string                 `protobuf:"bytes,13,opt,name=chromosome,proto3" json:"chromosome,omitempty"`
	Chromosomes           []string               `protobuf:"bytes,14,rep,name=chromosomes,proto3" json:"chromosomes,omitempty"`
	NomenclatureAuthority *NomenclatureAuthority `protobuf:"bytes,15,opt,name=nomenclature_authority,json=nomenclatureAuthority,proto3" json:"nomenclature_authority,omitempty"`
	SwissProtAccessions   []string               `protobuf:"bytes,16,rep,name=swiss_prot_accessions,json=swissProtAccessions,proto3" json:"swiss_prot_accessions,omitempty"`
	EnsemblGeneIds        []string               `protobuf:"bytes,17,rep,name=ensembl_gene_ids,json=ensemblGeneIds,proto3" json:"ensembl_gene_ids,omitempty"`
	OmimIds               []string               `protobuf:"bytes,18,rep,name=omim_ids,json=omimIds,proto3" json:"omim_ids,omitempty"`
	Synonyms              []string               `protobuf:"bytes,19,rep,name=synonyms,proto3" json:"synonyms,omitempty"`
	// The NCBI Gene ID for the gene that was merged into the current gene record
	ReplacedGeneId uint64        `protobuf:"varint,20,opt,name=replaced_gene_id,json=replacedGeneId,proto3" json:"replaced_gene_id,omitempty"`
	Annotations    []*Annotation `protobuf:"bytes,23,rep,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *GeneDescriptor) Reset() {
	*x = GeneDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneDescriptor) ProtoMessage() {}

func (x *GeneDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneDescriptor.ProtoReflect.Descriptor instead.
func (*GeneDescriptor) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{7}
}

func (x *GeneDescriptor) GetGeneId() uint64 {
	if x != nil {
		return x.GeneId
	}
	return 0
}

func (x *GeneDescriptor) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GeneDescriptor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GeneDescriptor) GetTaxId() uint64 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

func (x *GeneDescriptor) GetTaxname() string {
	if x != nil {
		return x.Taxname
	}
	return ""
}

func (x *GeneDescriptor) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *GeneDescriptor) GetType() GeneDescriptor_GeneType {
	if x != nil {
		return x.Type
	}
	return GeneDescriptor_UNKNOWN
}

func (x *GeneDescriptor) GetRnaType() GeneDescriptor_RnaType {
	if x != nil {
		return x.RnaType
	}
	return GeneDescriptor_rna_UNKNOWN
}

func (x *GeneDescriptor) GetOrientation() Orientation {
	if x != nil {
		return x.Orientation
	}
	return Orientation_none
}

func (x *GeneDescriptor) GetGenomicRanges() []*SeqRangeSet {
	if x != nil {
		return x.GenomicRanges
	}
	return nil
}

func (x *GeneDescriptor) GetReferenceStandards() []*GenomicRegion {
	if x != nil {
		return x.ReferenceStandards
	}
	return nil
}

func (x *GeneDescriptor) GetGenomicRegions() []*GenomicRegion {
	if x != nil {
		return x.GenomicRegions
	}
	return nil
}

func (x *GeneDescriptor) GetTranscripts() []*Transcript {
	if x != nil {
		return x.Transcripts
	}
	return nil
}

func (x *GeneDescriptor) GetProteins() []*Protein {
	if x != nil {
		return x.Proteins
	}
	return nil
}

// Deprecated: Do not use.
func (x *GeneDescriptor) GetChromosome() string {
	if x != nil {
		return x.Chromosome
	}
	return ""
}

func (x *GeneDescriptor) GetChromosomes() []string {
	if x != nil {
		return x.Chromosomes
	}
	return nil
}

func (x *GeneDescriptor) GetNomenclatureAuthority() *NomenclatureAuthority {
	if x != nil {
		return x.NomenclatureAuthority
	}
	return nil
}

func (x *GeneDescriptor) GetSwissProtAccessions() []string {
	if x != nil {
		return x.SwissProtAccessions
	}
	return nil
}

func (x *GeneDescriptor) GetEnsemblGeneIds() []string {
	if x != nil {
		return x.EnsemblGeneIds
	}
	return nil
}

func (x *GeneDescriptor) GetOmimIds() []string {
	if x != nil {
		return x.OmimIds
	}
	return nil
}

func (x *GeneDescriptor) GetSynonyms() []string {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *GeneDescriptor) GetReplacedGeneId() uint64 {
	if x != nil {
		return x.ReplacedGeneId
	}
	return 0
}

func (x *GeneDescriptor) GetAnnotations() []*Annotation {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type NomenclatureAuthority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The nomenclature authority for this gene record
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// The nomenclature authority identifier for this gene record
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *NomenclatureAuthority) Reset() {
	*x = NomenclatureAuthority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NomenclatureAuthority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NomenclatureAuthority) ProtoMessage() {}

func (x *NomenclatureAuthority) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NomenclatureAuthority.ProtoReflect.Descriptor instead.
func (*NomenclatureAuthority) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{8}
}

func (x *NomenclatureAuthority) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *NomenclatureAuthority) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type GeneDescriptors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genes []*GeneDescriptor `protobuf:"bytes,1,rep,name=genes,proto3" json:"genes,omitempty"`
}

func (x *GeneDescriptors) Reset() {
	*x = GeneDescriptors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneDescriptors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneDescriptors) ProtoMessage() {}

func (x *GeneDescriptors) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_gene_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneDescriptors.ProtoReflect.Descriptor instead.
func (*GeneDescriptors) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP(), []int{9}
}

func (x *GeneDescriptors) GetGenes() []*GeneDescriptor {
	if x != nil {
		return x.Genes
	}
	return nil
}

var File_ncbi_datasets_v1_reports_gene_proto protoreflect.FileDescriptor

var file_ncbi_datasets_v1_reports_gene_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a,
	0x25, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x11,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xc2, 0xf3, 0x18,
	0x10, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xed, 0x03, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2a, 0xc2, 0xf3, 0x18, 0x26, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0e, 0x4e, 0x50,
	0x5f, 0x30, 0x30, 0x31, 0x32, 0x39, 0x36, 0x38, 0x31, 0x32, 0x2e, 0x31, 0x52, 0x10, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xc2, 0xf3,
	0x18, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x20, 0x41, 0x4c, 0x45, 0x58, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x19, 0xc2, 0xf3, 0x18, 0x15, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x03, 0x36, 0x32, 0x36, 0x52, 0x06, 0x6c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x47, 0x0a, 0x0c, 0x69, 0x73, 0x6f, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xc2, 0xf3, 0x18,
	0x20, 0x0a, 0x07, 0x69, 0x73, 0x6f, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x07, 0x49, 0x73, 0x6f, 0x66,
	0x6f, 0x72, 0x6d, 0x32, 0x0c, 0x69, 0x73, 0x6f, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x41, 0x6c, 0x65,
	0x78, 0x52, 0x0b, 0x69, 0x73, 0x6f, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x62,
	0x0a, 0x0f, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x39, 0xc2, 0xf3, 0x18, 0x35, 0x0a, 0x0f, 0x65,
	0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x0f,
	0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x32,
	0x11, 0x45, 0x4e, 0x53, 0x50, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x32, 0x32, 0x33, 0x37,
	0x2e, 0x33, 0x52, 0x0e, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x6e, 0x12, 0x75, 0x0a, 0x0f, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x65, 0x70,
	0x74, 0x69, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x63,
	0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x70,
	0x74, 0x69, 0x64, 0x65, 0x42, 0x23, 0xc2, 0xf3, 0x18, 0x1f, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x2d,
	0x70, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x2d, 0x12, 0x0f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x20, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x0f, 0x47, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a,
	0x19, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1b, 0xc2, 0xf3, 0x18, 0x17, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x17, 0x67,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xc2,
	0xf3, 0x18, 0x14, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x08, 0x53,
	0x65, 0x71, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x0c, 0xc2,
	0xf3, 0x18, 0x08, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x52, 0x0c, 0x67, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x65, 0x78, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x13, 0xc2, 0xf3, 0x18, 0x0f, 0x0a,
	0x05, 0x65, 0x78, 0x6f, 0x6e, 0x2d, 0x12, 0x06, 0x45, 0x78, 0x6f, 0x6e, 0x73, 0x20, 0x52, 0x05,
	0x65, 0x78, 0x6f, 0x6e, 0x73, 0x22, 0xd3, 0x07, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xc2, 0xf3, 0x18,
	0x2e, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x20, 0x31, 0x32, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x25, 0xc2, 0xf3, 0x18, 0x21, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x04, 0x33, 0x31, 0x38, 0x30, 0x52, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63,
	0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x78, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53,
	0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05,
	0x65, 0x78, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x03, 0x63, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x65,
	0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a,
	0x04, 0x63, 0x64, 0x73, 0x2d, 0x12, 0x04, 0x43, 0x44, 0x53, 0x20, 0x52, 0x03, 0x63, 0x64, 0x73,
	0x12, 0x79, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x63,
	0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x21, 0xc2, 0xf3, 0x18, 0x1d, 0x0a, 0x11, 0x67, 0x65,
	0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2d, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x12,
	0x08, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a, 0x12, 0x65,
	0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xc2, 0xf3, 0x18, 0x3b, 0x0a, 0x12, 0x65,
	0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x12, 0x12, 0x45, 0x6e, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x20, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x32, 0x11, 0x45, 0x4e, 0x53, 0x54, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x33, 0x30, 0x36, 0x31, 0x32, 0x30, 0x2e, 0x33, 0x52, 0x11, 0x65, 0x6e, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x42,
	0x18, 0xc2, 0xf3, 0x18, 0x14, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x2d, 0x12,
	0x08, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x20, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65,
	0x69, 0x6e, 0x12, 0x64, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1b, 0xc2, 0xf3, 0x18, 0x17, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x50,
	0x52, 0x4f, 0x54, 0x45, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f,
	0x44, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x04, 0x22, 0xd9, 0x02, 0x0a, 0x0d,
	0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a,
	0x0a, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x71,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a, 0x0a, 0x0b,
	0x67, 0x65, 0x6e, 0x65, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x12, 0x0b, 0x47, 0x65, 0x6e,
	0x65, 0x20, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x7d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x2e, 0xc2, 0xf3,
	0x18, 0x2a, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2d, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x20, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x63, 0x0a, 0x11, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x46, 0x53, 0x45, 0x51, 0x5f, 0x47,
	0x45, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x53, 0x45, 0x55, 0x44, 0x4f, 0x47,
	0x45, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x22, 0xa8, 0x02, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xc2, 0xf3,
	0x18, 0x1c, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x8f, 0x01, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x5f,
	0x69, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x42, 0x30, 0xc2,
	0xf3, 0x18, 0x2c, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x2d,
	0x69, 0x6e, 0x2d, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2d, 0x12, 0x14, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x20, 0x52,
	0x11, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x49, 0x6e, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x22, 0x75, 0x0a, 0x13, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xc2, 0xf3,
	0x18, 0x16, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xc9, 0x11, 0x0a, 0x0e, 0x47, 0x65,
	0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x07,
	0x67, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x20, 0xc2,
	0xf3, 0x18, 0x1c, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x2d, 0x69, 0x64, 0x12, 0x0b, 0x4e, 0x43,
	0x42, 0x49, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x32, 0x04, 0x32, 0x37, 0x37, 0x38, 0x52,
	0x06, 0x67, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x32, 0x04, 0x47,
	0x4e, 0x41, 0x53, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x54, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x32, 0xc2, 0xf3, 0x18, 0x2e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x32, 0x12, 0x47, 0x4e, 0x41, 0x53, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x20, 0x6c,
	0x6f, 0x63, 0x75, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x2d, 0x69, 0x64, 0x12,
	0x0c, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x49, 0x44, 0x32, 0x04, 0x39,
	0x36, 0x30, 0x36, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x07, 0x74, 0x61,
	0x78, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0xc2, 0xf3, 0x18,
	0x28, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x54, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0x48, 0x6f, 0x6d,
	0x6f, 0x20, 0x73, 0x61, 0x70, 0x69, 0x65, 0x6e, 0x73, 0x52, 0x07, 0x74, 0x61, 0x78, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xc2, 0xf3, 0x18, 0x21, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1a, 0xc2, 0xf3, 0x18,
	0x16, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x09, 0x47, 0x65,
	0x6e, 0x65, 0x20, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a,
	0x08, 0x72, 0x6e, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x52, 0x6e, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x18, 0xc2, 0xf3, 0x18, 0x14, 0x0a, 0x08, 0x72, 0x6e, 0x61, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x08, 0x52, 0x4e, 0x41, 0x20, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x6e, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x0a,
	0x0e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x42, 0x24, 0xc2, 0xf3,
	0x18, 0x20, 0x0a, 0x0e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2d, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x2d, 0x12, 0x0e, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x20, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x12, 0x82, 0x01, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x28, 0xc2, 0xf3, 0x18, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x66, 0x2d, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x2d, 0x12, 0x13, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x20, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x12, 0x78, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x26, 0xc2, 0xf3, 0x18, 0x22, 0x0a, 0x0f,
	0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2d, 0x12,
	0x0f, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x20,
	0x52, 0x0e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x66, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x42, 0x1e, 0xc2, 0xf3, 0x18,
	0x1a, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2d, 0x12, 0x0b,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x20, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x42, 0x18, 0xc2,
	0xf3, 0x18, 0x14, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x2d, 0x12, 0x08, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x20, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e,
	0x73, 0x12, 0x22, 0x0a, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d,
	0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73,
	0x6f, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x42, 0x26, 0xc2, 0xf3, 0x18, 0x22,
	0x0a, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x0b, 0x43,
	0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x32, 0x01, 0x31, 0x32, 0x03, 0x58,
	0x2c, 0x59, 0x52, 0x0b, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x12,
	0x82, 0x01, 0x0a, 0x16, 0x6e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x6d, 0x65,
	0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x12, 0x0d,
	0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x52, 0x15, 0x6e,
	0x6f, 0x6d, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x73, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x30, 0xc2, 0xf3, 0x18, 0x2c, 0x0a, 0x14, 0x73, 0x77, 0x69, 0x73, 0x73,
	0x70, 0x72, 0x6f, 0x74, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x14, 0x53, 0x77, 0x69, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x73, 0x77, 0x69, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x65, 0x6e,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x26, 0xc2, 0xf3, 0x18, 0x22, 0x0a, 0x0f, 0x65, 0x6e, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x69, 0x64, 0x73, 0x12, 0x0f, 0x45, 0x6e, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x73, 0x52, 0x0e, 0x65, 0x6e,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x47, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x08,
	0x6f, 0x6d, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x42, 0x18,
	0xc2, 0xf3, 0x18, 0x14, 0x0a, 0x08, 0x6f, 0x6d, 0x69, 0x6d, 0x2d, 0x69, 0x64, 0x73, 0x12, 0x08,
	0x4f, 0x4d, 0x49, 0x4d, 0x20, 0x49, 0x44, 0x73, 0x52, 0x07, 0x6f, 0x6d, 0x69, 0x6d, 0x49, 0x64,
	0x73, 0x12, 0x34, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x18, 0xc2, 0xf3, 0x18, 0x14, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x73, 0x12, 0x08, 0x53, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x52, 0x08, 0x73,
	0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x56, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x2c, 0xc2, 0xf3, 0x18, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x64, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x2d, 0x69, 0x64, 0x12, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x64, 0x20, 0x4e, 0x43, 0x42, 0x49, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x49, 0x44, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x64, 0x47, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x66, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x17,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a,
	0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x12, 0x0b, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x52, 0x4e, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x72,
	0x52, 0x4e, 0x41, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x6e, 0x52, 0x4e, 0x41, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x73, 0x63, 0x52, 0x4e, 0x41, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x73,
	0x6e, 0x6f, 0x52, 0x4e, 0x41, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x45,
	0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x53, 0x45, 0x55, 0x44, 0x4f, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x50, 0x4f, 0x53, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x63, 0x52,
	0x4e, 0x41, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x6e, 0x63, 0x52, 0x4e, 0x41, 0x10, 0x0a, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0xff, 0x01, 0x22, 0x31, 0x0a, 0x07, 0x52, 0x6e, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x72, 0x6e, 0x61, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x70, 0x72, 0x65, 0x6d, 0x73, 0x67, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x6d,
	0x52, 0x6e, 0x61, 0x10, 0x02, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x4e, 0x6f, 0x6d, 0x65, 0x6e, 0x63,
	0x6c, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x32, 0x04,
	0x48, 0x47, 0x4e, 0x43, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x37, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x17, 0xc2, 0xf3, 0x18, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x12, 0x02, 0x49,
	0x44, 0x32, 0x09, 0x48, 0x47, 0x4e, 0x43, 0x3a, 0x34, 0x33, 0x39, 0x32, 0x52, 0x0a, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x63, 0x62,
	0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x42, 0x9d, 0x0a, 0x5a, 0x18,
	0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0xf8, 0x01, 0x01, 0xc2, 0xf3, 0x18, 0xfb, 0x09,
	0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x47,
	0x65, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x1a, 0x3d, 0x3c,
	0x70, 0x3e, 0x54, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64,
	0x20, 0x67, 0x65, 0x6e, 0x65, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x20, 0x64, 0x61,
	0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x1a, 0x3a, 0x3c, 0x61,
	0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6a,
	0x73, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x74, 0x68, 0x65,
	0x64, 0x6f, 0x63, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x22, 0x3e, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x1a, 0x4f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x3c, 0x62, 0x72,
	0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x65, 0x6d, 0x3e, 0x6e, 0x63, 0x62, 0x69, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x6c, 0x3c, 0x2f, 0x65, 0x6d,
	0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x1a, 0x6d, 0x45, 0x61, 0x63, 0x68, 0x20,
	0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x63, 0x61, 0x6c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2d, 0x65, 0x6e, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e,
	0x4a, 0x53, 0x4f, 0x4e, 0x3c, 0x2f, 0x61, 0x3e, 0x1a, 0x69, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73,
	0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x20, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x20, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20,
	0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x62, 0x65,
	0x6c, 0x6f, 0x77, 0x1a, 0x6a, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20,
	0x72, 0x6f, 0x77, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x61, 0x20,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x73, 0x75, 0x62, 0x2d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x77,
	0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x1a,
	0x45, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73, 0x20, 0x3c, 0x65, 0x6d, 0x3e, 0x47, 0x65,
	0x6e, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x3c, 0x2f, 0x65, 0x6d,
	0x3e, 0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x1a, 0x51, 0x3c, 0x70, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x61, 0x20, 0x3c, 0x65, 0x6d, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x3c,
	0x2f, 0x65, 0x6d, 0x3e, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x1a, 0x91, 0x01, 0x3c, 0x61, 0x20, 0x68,
	0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69,
	0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2f, 0x22, 0x3e,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6c,
	0x27, 0x73, 0x20, 0x3c, 0x6e, 0x6f, 0x62, 0x72, 0x3e, 0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x2d,
	0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x3c, 0x2f,
	0x6e, 0x6f, 0x62, 0x72, 0x3e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x1a, 0x93, 0x01,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x61, 0x20,
	0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x64, 0x6f, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c,
	0x69, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2f, 0x22,
	0x3e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3c, 0x2f, 0x61, 0x3e, 0x20,
	0x43, 0x4c, 0x49, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x65, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x79, 0x6f,
	0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74,
	0x6f, 0x6f, 0x6c, 0x1a, 0x46, 0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x4c, 0x69,
	0x6e, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x22, 0x0f, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0x08, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x73, 0x2a, 0x91, 0x01, 0x7b, 0x7b, 0x3c, 0x20, 0x72, 0x65,
	0x61, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x3d, 0x22, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2d, 0x63, 0x6c, 0x69,
	0x2f, 0x67, 0x65, 0x6e, 0x65, 0x2d, 0x74, 0x6f, 0x2d, 0x74, 0x73, 0x76, 0x2e, 0x63, 0x6c, 0x69,
	0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x3d, 0x22,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x20, 0x65, 0x6e, 0x64, 0x3d, 0x22, 0x45, 0x4e, 0x44, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3e, 0x7d, 0x7d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ncbi_datasets_v1_reports_gene_proto_rawDescOnce sync.Once
	file_ncbi_datasets_v1_reports_gene_proto_rawDescData = file_ncbi_datasets_v1_reports_gene_proto_rawDesc
)

func file_ncbi_datasets_v1_reports_gene_proto_rawDescGZIP() []byte {
	file_ncbi_datasets_v1_reports_gene_proto_rawDescOnce.Do(func() {
		file_ncbi_datasets_v1_reports_gene_proto_rawDescData = protoimpl.X.CompressGZIP(file_ncbi_datasets_v1_reports_gene_proto_rawDescData)
	})
	return file_ncbi_datasets_v1_reports_gene_proto_rawDescData
}

var file_ncbi_datasets_v1_reports_gene_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ncbi_datasets_v1_reports_gene_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_ncbi_datasets_v1_reports_gene_proto_goTypes = []interface{}{
	(Transcript_TranscriptType)(0),       // 0: ncbi.datasets.v1.reports.Transcript.TranscriptType
	(GenomicRegion_GenomicRegionType)(0), // 1: ncbi.datasets.v1.reports.GenomicRegion.GenomicRegionType
	(GeneDescriptor_GeneType)(0),         // 2: ncbi.datasets.v1.reports.GeneDescriptor.GeneType
	(GeneDescriptor_RnaType)(0),          // 3: ncbi.datasets.v1.reports.GeneDescriptor.RnaType
	(*MaturePeptide)(nil),                // 4: ncbi.datasets.v1.reports.MaturePeptide
	(*Protein)(nil),                      // 5: ncbi.datasets.v1.reports.Protein
	(*GenomicLocation)(nil),              // 6: ncbi.datasets.v1.reports.GenomicLocation
	(*Transcript)(nil),                   // 7: ncbi.datasets.v1.reports.Transcript
	(*GenomicRegion)(nil),                // 8: ncbi.datasets.v1.reports.GenomicRegion
	(*Annotation)(nil),                   // 9: ncbi.datasets.v1.reports.Annotation
	(*AnnotatedAssemblies)(nil),          // 10: ncbi.datasets.v1.reports.AnnotatedAssemblies
	(*GeneDescriptor)(nil),               // 11: ncbi.datasets.v1.reports.GeneDescriptor
	(*NomenclatureAuthority)(nil),        // 12: ncbi.datasets.v1.reports.NomenclatureAuthority
	(*GeneDescriptors)(nil),              // 13: ncbi.datasets.v1.reports.GeneDescriptors
	(*Range)(nil),                        // 14: ncbi.datasets.v1.reports.Range
	(*SeqRangeSet)(nil),                  // 15: ncbi.datasets.v1.reports.SeqRangeSet
	(Orientation)(0),                     // 16: ncbi.datasets.v1.reports.Orientation
}
var file_ncbi_datasets_v1_reports_gene_proto_depIdxs = []int32{
	4,  // 0: ncbi.datasets.v1.reports.Protein.mature_peptides:type_name -> ncbi.datasets.v1.reports.MaturePeptide
	14, // 1: ncbi.datasets.v1.reports.GenomicLocation.genomic_range:type_name -> ncbi.datasets.v1.reports.Range
	14, // 2: ncbi.datasets.v1.reports.GenomicLocation.exons:type_name -> ncbi.datasets.v1.reports.Range
	15, // 3: ncbi.datasets.v1.reports.Transcript.genomic_range:type_name -> ncbi.datasets.v1.reports.SeqRangeSet
	15, // 4: ncbi.datasets.v1.reports.Transcript.exons:type_name -> ncbi.datasets.v1.reports.SeqRangeSet
	15, // 5: ncbi.datasets.v1.reports.Transcript.cds:type_name -> ncbi.datasets.v1.reports.SeqRangeSet
	6,  // 6: ncbi.datasets.v1.reports.Transcript.genomic_locations:type_name -> ncbi.datasets.v1.reports.GenomicLocation
	5,  // 7: ncbi.datasets.v1.reports.Transcript.protein:type_name -> ncbi.datasets.v1.reports.Protein
	0,  // 8: ncbi.datasets.v1.reports.Transcript.type:type_name -> ncbi.datasets.v1.reports.Transcript.TranscriptType
	15, // 9: ncbi.datasets.v1.reports.GenomicRegion.gene_range:type_name -> ncbi.datasets.v1.reports.SeqRangeSet
	1,  // 10: ncbi.datasets.v1.reports.GenomicRegion.type:type_name -> ncbi.datasets.v1.reports.GenomicRegion.GenomicRegionType
	10, // 11: ncbi.datasets.v1.reports.Annotation.assemblies_in_scope:type_name -> ncbi.datasets.v1.reports.AnnotatedAssemblies
	2,  // 12: ncbi.datasets.v1.reports.GeneDescriptor.type:type_name -> ncbi.datasets.v1.reports.GeneDescriptor.GeneType
	3,  // 13: ncbi.datasets.v1.reports.GeneDescriptor.rna_type:type_name -> ncbi.datasets.v1.reports.GeneDescriptor.RnaType
	16, // 14: ncbi.datasets.v1.reports.GeneDescriptor.orientation:type_name -> ncbi.datasets.v1.reports.Orientation
	15, // 15: ncbi.datasets.v1.reports.GeneDescriptor.genomic_ranges:type_name -> ncbi.datasets.v1.reports.SeqRangeSet
	8,  // 16: ncbi.datasets.v1.reports.GeneDescriptor.reference_standards:type_name -> ncbi.datasets.v1.reports.GenomicRegion
	8,  // 17: ncbi.datasets.v1.reports.GeneDescriptor.genomic_regions:type_name -> ncbi.datasets.v1.reports.GenomicRegion
	7,  // 18: ncbi.datasets.v1.reports.GeneDescriptor.transcripts:type_name -> ncbi.datasets.v1.reports.Transcript
	5,  // 19: ncbi.datasets.v1.reports.GeneDescriptor.proteins:type_name -> ncbi.datasets.v1.reports.Protein
	12, // 20: ncbi.datasets.v1.reports.GeneDescriptor.nomenclature_authority:type_name -> ncbi.datasets.v1.reports.NomenclatureAuthority
	9,  // 21: ncbi.datasets.v1.reports.GeneDescriptor.annotations:type_name -> ncbi.datasets.v1.reports.Annotation
	11, // 22: ncbi.datasets.v1.reports.GeneDescriptors.genes:type_name -> ncbi.datasets.v1.reports.GeneDescriptor
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_ncbi_datasets_v1_reports_gene_proto_init() }
func file_ncbi_datasets_v1_reports_gene_proto_init() {
	if File_ncbi_datasets_v1_reports_gene_proto != nil {
		return
	}
	file_ncbi_datasets_v1_reports_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaturePeptide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protein); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomicLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transcript); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenomicRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedAssemblies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NomenclatureAuthority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_gene_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneDescriptors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ncbi_datasets_v1_reports_gene_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ncbi_datasets_v1_reports_gene_proto_goTypes,
		DependencyIndexes: file_ncbi_datasets_v1_reports_gene_proto_depIdxs,
		EnumInfos:         file_ncbi_datasets_v1_reports_gene_proto_enumTypes,
		MessageInfos:      file_ncbi_datasets_v1_reports_gene_proto_msgTypes,
	}.Build()
	File_ncbi_datasets_v1_reports_gene_proto = out.File
	file_ncbi_datasets_v1_reports_gene_proto_rawDesc = nil
	file_ncbi_datasets_v1_reports_gene_proto_goTypes = nil
	file_ncbi_datasets_v1_reports_gene_proto_depIdxs = nil
}
