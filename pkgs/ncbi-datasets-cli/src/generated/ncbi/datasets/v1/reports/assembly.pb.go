// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: ncbi/datasets/v1/reports/assembly.proto

package reports

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "ncbi/datasets/options"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AssemblyDataReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Vernacular name associated with a particular taxon
	CommonName string `protobuf:"bytes,1,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// Scientific name of the species or subspecies
	OrganismName string `protobuf:"bytes,2,opt,name=organism_name,json=organismName,proto3" json:"organism_name,omitempty"`
	// A homogenous group of  animals within a domesticated species
	Breed string `protobuf:"bytes,3,opt,name=breed,proto3" json:"breed,omitempty"`
	// A variety of plant within a species produced and maintained by cultivation
	Cultivar string `protobuf:"bytes,4,opt,name=cultivar,proto3" json:"cultivar,omitempty"`
	// A population or subspecies occupying a distinct habitat
	Ecotype string `protobuf:"bytes,5,opt,name=ecotype,proto3" json:"ecotype,omitempty"`
	// The individual isolate from which the sequences in the genome assembly were derived
	Isolate string `protobuf:"bytes,6,opt,name=isolate,proto3" json:"isolate,omitempty"`
	// Male or female
	Sex string `protobuf:"bytes,7,opt,name=sex,proto3" json:"sex,omitempty"`
	// A genetic variant, subtype or culture within a species
	Strain string `protobuf:"bytes,8,opt,name=strain,proto3" json:"strain,omitempty"`
	// The <a href="https://www.ncbi.nlm.nih.gov/taxonomy/">NCBI Taxonomy</a> identifier for the organism from which the
	// genome assembly was derived.
	TaxId uint32 `protobuf:"varint,9,opt,name=tax_id,json=taxId,proto3" json:"tax_id,omitempty"`
	// Metadata for the genome assembly submission
	AssemblyInfo *AssemblyInfo `protobuf:"bytes,10,opt,name=assembly_info,json=assemblyInfo,proto3" json:"assembly_info,omitempty"`
	// Global statistics for the genome assembly
	AssemblyStats *AssemblyStats `protobuf:"bytes,11,opt,name=assembly_stats,json=assemblyStats,proto3" json:"assembly_stats,omitempty"`
	// Metadata for all associated organelle genomes
	OrganelleInfo []*OrganelleInfo `protobuf:"bytes,12,rep,name=organelle_info,json=organelleInfo,proto3" json:"organelle_info,omitempty"`
	// Metadata and statistics for the genome assembly annotation, when available
	AnnotationInfo *AnnotationInfo `protobuf:"bytes,13,opt,name=annotation_info,json=annotationInfo,proto3" json:"annotation_info,omitempty"`
	// Metadata pertaining to the Whole Genome Shotgun (WGS) record for the genome assemblies
	// that are complete genomes. Those that are clone-based do not have
	// WGS-master records.
	WgsInfo *WGSInfo `protobuf:"bytes,14,opt,name=wgs_info,json=wgsInfo,proto3" json:"wgs_info,omitempty"`
}

func (x *AssemblyDataReport) Reset() {
	*x = AssemblyDataReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyDataReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyDataReport) ProtoMessage() {}

func (x *AssemblyDataReport) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyDataReport.ProtoReflect.Descriptor instead.
func (*AssemblyDataReport) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP(), []int{0}
}

func (x *AssemblyDataReport) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *AssemblyDataReport) GetOrganismName() string {
	if x != nil {
		return x.OrganismName
	}
	return ""
}

func (x *AssemblyDataReport) GetBreed() string {
	if x != nil {
		return x.Breed
	}
	return ""
}

func (x *AssemblyDataReport) GetCultivar() string {
	if x != nil {
		return x.Cultivar
	}
	return ""
}

func (x *AssemblyDataReport) GetEcotype() string {
	if x != nil {
		return x.Ecotype
	}
	return ""
}

func (x *AssemblyDataReport) GetIsolate() string {
	if x != nil {
		return x.Isolate
	}
	return ""
}

func (x *AssemblyDataReport) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *AssemblyDataReport) GetStrain() string {
	if x != nil {
		return x.Strain
	}
	return ""
}

func (x *AssemblyDataReport) GetTaxId() uint32 {
	if x != nil {
		return x.TaxId
	}
	return 0
}

func (x *AssemblyDataReport) GetAssemblyInfo() *AssemblyInfo {
	if x != nil {
		return x.AssemblyInfo
	}
	return nil
}

func (x *AssemblyDataReport) GetAssemblyStats() *AssemblyStats {
	if x != nil {
		return x.AssemblyStats
	}
	return nil
}

func (x *AssemblyDataReport) GetOrganelleInfo() []*OrganelleInfo {
	if x != nil {
		return x.OrganelleInfo
	}
	return nil
}

func (x *AssemblyDataReport) GetAnnotationInfo() *AnnotationInfo {
	if x != nil {
		return x.AnnotationInfo
	}
	return nil
}

func (x *AssemblyDataReport) GetWgsInfo() *WGSInfo {
	if x != nil {
		return x.WgsInfo
	}
	return nil
}

type AssemblyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The GenColl assembly accession
	AssemblyAccession string `protobuf:"bytes,16,opt,name=assembly_accession,json=assemblyAccession,proto3" json:"assembly_accession,omitempty"`
	// The GenBank or RefSeq assembly accession paired with this assembly
	PairedAssemblyAccession string `protobuf:"bytes,17,opt,name=paired_assembly_accession,json=pairedAssemblyAccession,proto3" json:"paired_assembly_accession,omitempty"`
	// The level at which a genome has been assembled
	AssemblyLevel string `protobuf:"bytes,1,opt,name=assembly_level,json=assemblyLevel,proto3" json:"assembly_level,omitempty"`
	// The assembly submitter's name for the genome assembly, when provided. Otherwise, a default name in the
	// form ASM#####v# is assigned
	AssemblyName string `protobuf:"bytes,2,opt,name=assembly_name,json=assemblyName,proto3" json:"assembly_name,omitempty"`
	// Chromosome content of the submitted genome assembly
	AssemblyType string `protobuf:"bytes,3,opt,name=assembly_type,json=assemblyType,proto3" json:"assembly_type,omitempty"`
	// The lineage of BioProject accessions. The specific BioProject which produced the sequences in the
	// genome assembly is listed first, followed in order by its antecendents.
	BioprojectLineage []*BioProjectLineage `protobuf:"bytes,13,rep,name=bioproject_lineage,json=bioprojectLineage,proto3" json:"bioproject_lineage,omitempty"`
	// Date the assembly was submitted to NCBI
	SubmissionDate string `protobuf:"bytes,5,opt,name=submission_date,json=submissionDate,proto3" json:"submission_date,omitempty"`
	// Long description for this genome
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Accession for the GenBank assembly is the unique identifier for the set of sequences in this particular version of
	// the genome assembly.
	GenbankAssmAccession string `protobuf:"bytes,7,opt,name=genbank_assm_accession,json=genbankAssmAccession,proto3" json:"genbank_assm_accession,omitempty"`
	// The submitting consortium or organization. Full submitter information is available in the BioProject
	Submitter string `protobuf:"bytes,8,opt,name=submitter,proto3" json:"submitter,omitempty"`
	// The RefSeq Category is either reference or representative genome and indicates the RefSeq project classification
	RefseqCategory string `protobuf:"bytes,9,opt,name=refseq_category,json=refseqCategory,proto3" json:"refseq_category,omitempty"`
	// RefSeq assembly accession is the unique identifier for the set of sequences in this particular version of
	// the genome assembly.
	RefseqAssmAccession string `protobuf:"bytes,10,opt,name=refseq_assm_accession,json=refseqAssmAccession,proto3" json:"refseq_assm_accession,omitempty"`
	// Genome name ascribed to this assembly by the UC Santa Cruz genome browser
	UcscAssmName string `protobuf:"bytes,11,opt,name=ucsc_assm_name,json=ucscAssmName,proto3" json:"ucsc_assm_name,omitempty"`
	// The accession.version and designation (principal or alternate pseudohaplotype) of a paired genome assembly derived from the same diploid individual
	LinkedAssembly string `protobuf:"bytes,12,opt,name=linked_assembly,json=linkedAssembly,proto3" json:"linked_assembly,omitempty"`
	// Sequencing technology used to sequence this genome
	SequencingTech string `protobuf:"bytes,14,opt,name=sequencing_tech,json=sequencingTech,proto3" json:"sequencing_tech,omitempty"`
	// NCBI BioSample Accession for the BioSample from which the sequences in the genome
	// assembly were obtained.
	BiosampleAccession string `protobuf:"bytes,15,opt,name=biosample_accession,json=biosampleAccession,proto3" json:"biosample_accession,omitempty"`
	// NCBI BioSample from which the sequences in the genome assembly were obtained.
	Biosample *BioSampleDescriptor `protobuf:"bytes,19,opt,name=biosample,proto3" json:"biosample,omitempty"`
	// URL to blast page for this assembly
	BlastUrl string `protobuf:"bytes,18,opt,name=blast_url,json=blastUrl,proto3" json:"blast_url,omitempty"`
	// Freeform comments
	// add as tabular field once newline/tab escaping is implemented in dataformat
	Comments string `protobuf:"bytes,20,opt,name=comments,proto3" json:"comments,omitempty"` // [(ncbi.datasets.options.tabular) = {mnemonic: "comments", column_name: "Comments"}];
}

func (x *AssemblyInfo) Reset() {
	*x = AssemblyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyInfo) ProtoMessage() {}

func (x *AssemblyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyInfo.ProtoReflect.Descriptor instead.
func (*AssemblyInfo) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP(), []int{1}
}

func (x *AssemblyInfo) GetAssemblyAccession() string {
	if x != nil {
		return x.AssemblyAccession
	}
	return ""
}

func (x *AssemblyInfo) GetPairedAssemblyAccession() string {
	if x != nil {
		return x.PairedAssemblyAccession
	}
	return ""
}

func (x *AssemblyInfo) GetAssemblyLevel() string {
	if x != nil {
		return x.AssemblyLevel
	}
	return ""
}

func (x *AssemblyInfo) GetAssemblyName() string {
	if x != nil {
		return x.AssemblyName
	}
	return ""
}

func (x *AssemblyInfo) GetAssemblyType() string {
	if x != nil {
		return x.AssemblyType
	}
	return ""
}

func (x *AssemblyInfo) GetBioprojectLineage() []*BioProjectLineage {
	if x != nil {
		return x.BioprojectLineage
	}
	return nil
}

func (x *AssemblyInfo) GetSubmissionDate() string {
	if x != nil {
		return x.SubmissionDate
	}
	return ""
}

func (x *AssemblyInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AssemblyInfo) GetGenbankAssmAccession() string {
	if x != nil {
		return x.GenbankAssmAccession
	}
	return ""
}

func (x *AssemblyInfo) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

func (x *AssemblyInfo) GetRefseqCategory() string {
	if x != nil {
		return x.RefseqCategory
	}
	return ""
}

func (x *AssemblyInfo) GetRefseqAssmAccession() string {
	if x != nil {
		return x.RefseqAssmAccession
	}
	return ""
}

func (x *AssemblyInfo) GetUcscAssmName() string {
	if x != nil {
		return x.UcscAssmName
	}
	return ""
}

func (x *AssemblyInfo) GetLinkedAssembly() string {
	if x != nil {
		return x.LinkedAssembly
	}
	return ""
}

func (x *AssemblyInfo) GetSequencingTech() string {
	if x != nil {
		return x.SequencingTech
	}
	return ""
}

func (x *AssemblyInfo) GetBiosampleAccession() string {
	if x != nil {
		return x.BiosampleAccession
	}
	return ""
}

func (x *AssemblyInfo) GetBiosample() *BioSampleDescriptor {
	if x != nil {
		return x.Biosample
	}
	return nil
}

func (x *AssemblyInfo) GetBlastUrl() string {
	if x != nil {
		return x.BlastUrl
	}
	return ""
}

func (x *AssemblyInfo) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

type AssemblyStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Count of nuclear chromosomes, organelles and plasmids in a submitted genome assembly
	TotalNumberOfChromosomes uint32 `protobuf:"varint,1,opt,name=total_number_of_chromosomes,json=totalNumberOfChromosomes,proto3" json:"total_number_of_chromosomes,omitempty"`
	// Total sequence length of the nuclear genome including unplaced and unlocalized sequences
	TotalSequenceLength uint64 `protobuf:"varint,2,opt,name=total_sequence_length,json=totalSequenceLength,proto3" json:"total_sequence_length,omitempty"`
	// Total length of all top-level sequences ignoring gaps. Any stretch of 10 or more Ns in a sequence is treated like a gap
	TotalUngappedLength uint64 `protobuf:"varint,3,opt,name=total_ungapped_length,json=totalUngappedLength,proto3" json:"total_ungapped_length,omitempty"`
	// Total number of sequence contigs in the assembly. Any stretch of 10 or more Ns in a sequence is treated as a gap between two
	// contigs in a scaffold when counting contigs and calculating contig N50 & L50 values
	NumberOfContigs uint32 `protobuf:"varint,4,opt,name=number_of_contigs,json=numberOfContigs,proto3" json:"number_of_contigs,omitempty"`
	// Length such that sequence contigs of this length or longer include half the bases of the assembly
	ContigN50 uint32 `protobuf:"varint,5,opt,name=contig_n50,json=contigN50,proto3" json:"contig_n50,omitempty"`
	// Number of sequence contigs that are longer than, or equal to, the N50 length and therefore include half the bases of the assembly
	ContigL50 uint32 `protobuf:"varint,6,opt,name=contig_l50,json=contigL50,proto3" json:"contig_l50,omitempty"`
	// Number of scaffolds including placed, unlocalized, unplaced, alternate loci and patch scaffolds
	NumberOfScaffolds uint32 `protobuf:"varint,7,opt,name=number_of_scaffolds,json=numberOfScaffolds,proto3" json:"number_of_scaffolds,omitempty"`
	// Length such that scaffolds of this length or longer include half the bases of the assembly
	ScaffoldN50 uint32 `protobuf:"varint,8,opt,name=scaffold_n50,json=scaffoldN50,proto3" json:"scaffold_n50,omitempty"`
	// Number of scaffolds that are longer than, or equal to, the N50 length and therefore include half the bases of the assembly
	ScaffoldL50 uint32 `protobuf:"varint,9,opt,name=scaffold_l50,json=scaffoldL50,proto3" json:"scaffold_l50,omitempty"`
	// Number of unspanned gaps between scaffolds
	GapsBetweenScaffoldsCount uint32 `protobuf:"varint,10,opt,name=gaps_between_scaffolds_count,json=gapsBetweenScaffoldsCount,proto3" json:"gaps_between_scaffolds_count,omitempty"`
	// Total number of component WGS or clone sequences in the assembly
	NumberOfComponentSequences uint32 `protobuf:"varint,11,opt,name=number_of_component_sequences,json=numberOfComponentSequences,proto3" json:"number_of_component_sequences,omitempty"`
	// The number of GC base-pairs in the assembly
	GcCount uint64 `protobuf:"varint,12,opt,name=gc_count,json=gcCount,proto3" json:"gc_count,omitempty"`
}

func (x *AssemblyStats) Reset() {
	*x = AssemblyStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyStats) ProtoMessage() {}

func (x *AssemblyStats) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyStats.ProtoReflect.Descriptor instead.
func (*AssemblyStats) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP(), []int{2}
}

func (x *AssemblyStats) GetTotalNumberOfChromosomes() uint32 {
	if x != nil {
		return x.TotalNumberOfChromosomes
	}
	return 0
}

func (x *AssemblyStats) GetTotalSequenceLength() uint64 {
	if x != nil {
		return x.TotalSequenceLength
	}
	return 0
}

func (x *AssemblyStats) GetTotalUngappedLength() uint64 {
	if x != nil {
		return x.TotalUngappedLength
	}
	return 0
}

func (x *AssemblyStats) GetNumberOfContigs() uint32 {
	if x != nil {
		return x.NumberOfContigs
	}
	return 0
}

func (x *AssemblyStats) GetContigN50() uint32 {
	if x != nil {
		return x.ContigN50
	}
	return 0
}

func (x *AssemblyStats) GetContigL50() uint32 {
	if x != nil {
		return x.ContigL50
	}
	return 0
}

func (x *AssemblyStats) GetNumberOfScaffolds() uint32 {
	if x != nil {
		return x.NumberOfScaffolds
	}
	return 0
}

func (x *AssemblyStats) GetScaffoldN50() uint32 {
	if x != nil {
		return x.ScaffoldN50
	}
	return 0
}

func (x *AssemblyStats) GetScaffoldL50() uint32 {
	if x != nil {
		return x.ScaffoldL50
	}
	return 0
}

func (x *AssemblyStats) GetGapsBetweenScaffoldsCount() uint32 {
	if x != nil {
		return x.GapsBetweenScaffoldsCount
	}
	return 0
}

func (x *AssemblyStats) GetNumberOfComponentSequences() uint32 {
	if x != nil {
		return x.NumberOfComponentSequences
	}
	return 0
}

func (x *AssemblyStats) GetGcCount() uint64 {
	if x != nil {
		return x.GcCount
	}
	return 0
}

type OrganelleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of associated nuclear assembly
	AssemblyName string `protobuf:"bytes,1,opt,name=assembly_name,json=assemblyName,proto3" json:"assembly_name,omitempty"`
	// The strain, breed, cultivar or ecotype of the organism from which the sequences in the assembly were derived
	InfraspecificName string `protobuf:"bytes,2,opt,name=infraspecific_name,json=infraspecificName,proto3" json:"infraspecific_name,omitempty"`
	// The associated BioProject accession, when available
	Bioproject []string `protobuf:"bytes,3,rep,name=bioproject,proto3" json:"bioproject,omitempty"`
	// Long description of the organelle genome
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// Sequence length of the organelle genome
	TotalSeqLength uint64 `protobuf:"varint,5,opt,name=total_seq_length,json=totalSeqLength,proto3" json:"total_seq_length,omitempty"`
	// Name of submitter
	Submitter string `protobuf:"bytes,6,opt,name=submitter,proto3" json:"submitter,omitempty"`
}

func (x *OrganelleInfo) Reset() {
	*x = OrganelleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganelleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganelleInfo) ProtoMessage() {}

func (x *OrganelleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganelleInfo.ProtoReflect.Descriptor instead.
func (*OrganelleInfo) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP(), []int{3}
}

func (x *OrganelleInfo) GetAssemblyName() string {
	if x != nil {
		return x.AssemblyName
	}
	return ""
}

func (x *OrganelleInfo) GetInfraspecificName() string {
	if x != nil {
		return x.InfraspecificName
	}
	return ""
}

func (x *OrganelleInfo) GetBioproject() []string {
	if x != nil {
		return x.Bioproject
	}
	return nil
}

func (x *OrganelleInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *OrganelleInfo) GetTotalSeqLength() uint64 {
	if x != nil {
		return x.TotalSeqLength
	}
	return 0
}

func (x *OrganelleInfo) GetSubmitter() string {
	if x != nil {
		return x.Submitter
	}
	return ""
}

type AnnotationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source      string         `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	ReleaseDate string         `protobuf:"bytes,3,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	ReportUrl   string         `protobuf:"bytes,4,opt,name=report_url,json=reportUrl,proto3" json:"report_url,omitempty"`
	Stats       *FeatureCounts `protobuf:"bytes,5,opt,name=stats,proto3" json:"stats,omitempty"`
	Busco       *BuscoStat     `protobuf:"bytes,6,opt,name=busco,proto3" json:"busco,omitempty"`
}

func (x *AnnotationInfo) Reset() {
	*x = AnnotationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotationInfo) ProtoMessage() {}

func (x *AnnotationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotationInfo.ProtoReflect.Descriptor instead.
func (*AnnotationInfo) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP(), []int{4}
}

func (x *AnnotationInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AnnotationInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *AnnotationInfo) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

func (x *AnnotationInfo) GetReportUrl() string {
	if x != nil {
		return x.ReportUrl
	}
	return ""
}

func (x *AnnotationInfo) GetStats() *FeatureCounts {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *AnnotationInfo) GetBusco() *BuscoStat {
	if x != nil {
		return x.Busco
	}
	return nil
}

type FeatureCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Counts of gene types
	GeneCounts *GeneCounts `protobuf:"bytes,1,opt,name=gene_counts,json=geneCounts,proto3" json:"gene_counts,omitempty"`
}

func (x *FeatureCounts) Reset() {
	*x = FeatureCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureCounts) ProtoMessage() {}

func (x *FeatureCounts) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureCounts.ProtoReflect.Descriptor instead.
func (*FeatureCounts) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureCounts) GetGeneCounts() *GeneCounts {
	if x != nil {
		return x.GeneCounts
	}
	return nil
}

type BuscoStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BUSCO Lineage
	BuscoLineage string `protobuf:"bytes,1,opt,name=busco_lineage,json=buscoLineage,proto3" json:"busco_lineage,omitempty"`
	// BUSCO Version
	BuscoVer string `protobuf:"bytes,2,opt,name=busco_ver,json=buscoVer,proto3" json:"busco_ver,omitempty"`
	// BUSCO score: Complete
	Complete float32 `protobuf:"fixed32,3,opt,name=complete,proto3" json:"complete,omitempty"`
	// BUSCO score: Single Copy
	SingleCopy float32 `protobuf:"fixed32,4,opt,name=single_copy,json=singleCopy,proto3" json:"single_copy,omitempty"`
	// BUSCO score: Duplicated
	Duplicated float32 `protobuf:"fixed32,5,opt,name=duplicated,proto3" json:"duplicated,omitempty"`
	// BUSCO score: Fragmented
	Fragmented float32 `protobuf:"fixed32,6,opt,name=fragmented,proto3" json:"fragmented,omitempty"`
	// BUSCO score: Missing
	Missing float32 `protobuf:"fixed32,7,opt,name=missing,proto3" json:"missing,omitempty"`
	// BUSCO score: Total Count
	TotalCount uint64 `protobuf:"varint,8,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *BuscoStat) Reset() {
	*x = BuscoStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuscoStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuscoStat) ProtoMessage() {}

func (x *BuscoStat) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuscoStat.ProtoReflect.Descriptor instead.
func (*BuscoStat) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP(), []int{6}
}

func (x *BuscoStat) GetBuscoLineage() string {
	if x != nil {
		return x.BuscoLineage
	}
	return ""
}

func (x *BuscoStat) GetBuscoVer() string {
	if x != nil {
		return x.BuscoVer
	}
	return ""
}

func (x *BuscoStat) GetComplete() float32 {
	if x != nil {
		return x.Complete
	}
	return 0
}

func (x *BuscoStat) GetSingleCopy() float32 {
	if x != nil {
		return x.SingleCopy
	}
	return 0
}

func (x *BuscoStat) GetDuplicated() float32 {
	if x != nil {
		return x.Duplicated
	}
	return 0
}

func (x *BuscoStat) GetFragmented() float32 {
	if x != nil {
		return x.Fragmented
	}
	return 0
}

func (x *BuscoStat) GetMissing() float32 {
	if x != nil {
		return x.Missing
	}
	return 0
}

func (x *BuscoStat) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GeneCounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of annotated genes
	Total uint32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// Count of annotated genes that encode a protein
	ProteinCoding uint32 `protobuf:"varint,2,opt,name=protein_coding,json=proteinCoding,proto3" json:"protein_coding,omitempty"`
	// Count of transcribed non-coding genes (e.g. lncRNAs, miRNAs, rRNAs, etc...) excludes transcribed pseudogenes
	NonCoding uint32 `protobuf:"varint,3,opt,name=non_coding,json=nonCoding,proto3" json:"non_coding,omitempty"`
	// Count of transcribed and non-transcribed pseudogenes
	Pseudogene uint32 `protobuf:"varint,4,opt,name=pseudogene,proto3" json:"pseudogene,omitempty"`
	// Count of genic region GeneIDs and non-genic regulatory GeneIDs
	Other uint32 `protobuf:"varint,5,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *GeneCounts) Reset() {
	*x = GeneCounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeneCounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneCounts) ProtoMessage() {}

func (x *GeneCounts) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneCounts.ProtoReflect.Descriptor instead.
func (*GeneCounts) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP(), []int{7}
}

func (x *GeneCounts) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GeneCounts) GetProteinCoding() uint32 {
	if x != nil {
		return x.ProteinCoding
	}
	return 0
}

func (x *GeneCounts) GetNonCoding() uint32 {
	if x != nil {
		return x.NonCoding
	}
	return 0
}

func (x *GeneCounts) GetPseudogene() uint32 {
	if x != nil {
		return x.Pseudogene
	}
	return 0
}

func (x *GeneCounts) GetOther() uint32 {
	if x != nil {
		return x.Other
	}
	return 0
}

// Whole Genome Shotgun (WGS) projects are genome assemblies of incomplete genomes or incomplete chromosomes of prokaryotes
// or eukaryotes that are generally being sequenced by a whole genome shotgun strategy.
type WGSInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WgsProjectAccession string `protobuf:"bytes,1,opt,name=wgs_project_accession,json=wgsProjectAccession,proto3" json:"wgs_project_accession,omitempty"`
	MasterWgsUrl        string `protobuf:"bytes,2,opt,name=master_wgs_url,json=masterWgsUrl,proto3" json:"master_wgs_url,omitempty"`
	WgsContigsUrl       string `protobuf:"bytes,3,opt,name=wgs_contigs_url,json=wgsContigsUrl,proto3" json:"wgs_contigs_url,omitempty"`
}

func (x *WGSInfo) Reset() {
	*x = WGSInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WGSInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WGSInfo) ProtoMessage() {}

func (x *WGSInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WGSInfo.ProtoReflect.Descriptor instead.
func (*WGSInfo) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP(), []int{8}
}

func (x *WGSInfo) GetWgsProjectAccession() string {
	if x != nil {
		return x.WgsProjectAccession
	}
	return ""
}

func (x *WGSInfo) GetMasterWgsUrl() string {
	if x != nil {
		return x.MasterWgsUrl
	}
	return ""
}

func (x *WGSInfo) GetWgsContigsUrl() string {
	if x != nil {
		return x.WgsContigsUrl
	}
	return ""
}

var File_ncbi_datasets_v1_reports_assembly_proto protoreflect.FileDescriptor

var file_ncbi_datasets_v1_reports_assembly_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x63, 0x62, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x1a, 0x28, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x62, 0x69,
	0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6e,
	0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x09, 0x0a, 0x12, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x67, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x46, 0xc2, 0xf3, 0x18, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x05, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x32, 0x09, 0x7a, 0x65, 0x62,
	0x72, 0x61, 0x66, 0x69, 0x73, 0x68, 0x32, 0x14, 0x70, 0x61, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x20, 0x73, 0x68, 0x72, 0x69, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x5e, 0xc2, 0xf3, 0x18, 0x5a, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d,
	0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x32, 0x0c, 0x48, 0x6f, 0x6d, 0x6f, 0x20, 0x73, 0x61, 0x70, 0x69, 0x65,
	0x6e, 0x73, 0x32, 0x14, 0x41, 0x72, 0x61, 0x62, 0x69, 0x64, 0x6f, 0x70, 0x73, 0x69, 0x73, 0x20,
	0x74, 0x68, 0x61, 0x6c, 0x69, 0x61, 0x6e, 0x61, 0x32, 0x16, 0x43, 0x61, 0x6e, 0x69, 0x73, 0x20,
	0x6c, 0x75, 0x70, 0x75, 0x73, 0x20, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x69, 0x73,
	0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xc2,
	0xf3, 0x18, 0x1f, 0x0a, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64, 0x12, 0x05, 0x42, 0x72, 0x65, 0x65,
	0x64, 0x32, 0x08, 0x48, 0x65, 0x72, 0x65, 0x66, 0x6f, 0x72, 0x64, 0x32, 0x05, 0x62, 0x6f, 0x78,
	0x65, 0x72, 0x52, 0x05, 0x62, 0x72, 0x65, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x75, 0x6c,
	0x74, 0x69, 0x76, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc2, 0xf3, 0x18,
	0x19, 0x0a, 0x08, 0x63, 0x75, 0x6c, 0x74, 0x69, 0x76, 0x61, 0x72, 0x12, 0x08, 0x43, 0x75, 0x6c,
	0x74, 0x69, 0x76, 0x61, 0x72, 0x32, 0x03, 0x42, 0x37, 0x33, 0x52, 0x08, 0x63, 0x75, 0x6c, 0x74,
	0x69, 0x76, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x65, 0x63, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a, 0x0a, 0x07, 0x65, 0x63, 0x6f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x07, 0x45, 0x63, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x32, 0x06, 0x41,
	0x6c, 0x70, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x65, 0x63, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6a,
	0x0a, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x50, 0xc2, 0xf3, 0x18, 0x4c, 0x0a, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x07,
	0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x32, 0x2f, 0x4c, 0x31, 0x20, 0x44, 0x6f, 0x6d, 0x69,
	0x6e, 0x65, 0x74, 0x74, 0x65, 0x20, 0x30, 0x31, 0x34, 0x34, 0x39, 0x20, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20,
	0x34, 0x32, 0x31, 0x39, 0x30, 0x36, 0x38, 0x30, 0x32, 0x07, 0x50, 0x6d, 0x61, 0x6c, 0x65, 0x30,
	0x39, 0x52, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x03, 0x73, 0x65,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xc2, 0xf3, 0x18, 0x12, 0x0a, 0x03, 0x73,
	0x65, 0x78, 0x12, 0x03, 0x53, 0x65, 0x78, 0x32, 0x06, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x52,
	0x03, 0x73, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xc2, 0xf3, 0x18, 0x10, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x12, 0x06, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x52, 0x06, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x2d, 0x69, 0x64,
	0x12, 0x0c, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x20, 0x49, 0x44, 0x52, 0x05,
	0x74, 0x61, 0x78, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x09, 0x61, 0x73, 0x73, 0x6d,
	0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x12, 0x09, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x20,
	0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x71,
	0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x42,
	0x21, 0xc2, 0xf3, 0x18, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x2d, 0x12, 0x0f, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x20, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x20, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x6c, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a, 0x0a, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x65,
	0x6c, 0x6c, 0x65, 0x2d, 0x12, 0x0a, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x20,
	0x52, 0x0d, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x75, 0x0a, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x22, 0xc2, 0xf3, 0x18, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x2d, 0x12, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x52, 0x0e, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x08, 0x77, 0x67, 0x73, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x57, 0x47, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x10, 0xc2, 0xf3, 0x18,
	0x0c, 0x0a, 0x04, 0x77, 0x67, 0x73, 0x2d, 0x12, 0x04, 0x57, 0x47, 0x53, 0x20, 0x52, 0x07, 0x77,
	0x67, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb7, 0x0d, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5b, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2c, 0xc2, 0xf3, 0x18, 0x28, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32,
	0x10, 0x47, 0x43, 0x46, 0x5f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x34, 0x30, 0x35, 0x2e, 0x34,
	0x30, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x19, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xc2, 0xf3, 0x18, 0x36, 0x0a, 0x10, 0x70,
	0x61, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x10, 0x50, 0x61, 0x69, 0x72, 0x65, 0x64, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x32, 0x10, 0x47, 0x43, 0x41, 0x5f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x34, 0x30, 0x35,
	0x2e, 0x32, 0x38, 0x52, 0x17, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x6d,
	0x62, 0x6c, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x0e,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc2, 0xf3, 0x18, 0x2c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x32, 0x0a, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f,
	0x73, 0x6f, 0x6d, 0x65, 0x32, 0x08, 0x73, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x32, 0x06,
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4e, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x29, 0xc2, 0xf3,
	0x18, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x32, 0x0a,
	0x47, 0x52, 0x43, 0x68, 0x33, 0x38, 0x2e, 0x70, 0x31, 0x34, 0x32, 0x0b, 0x41, 0x53, 0x4d, 0x39,
	0x38, 0x35, 0x38, 0x38, 0x39, 0x76, 0x33, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc2, 0xf3,
	0x18, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x04, 0x54, 0x79, 0x70, 0x65, 0x32, 0x15,
	0x68, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x2d, 0x77, 0x69, 0x74, 0x68, 0x2d, 0x61, 0x6c, 0x74,
	0x2d, 0x6c, 0x6f, 0x63, 0x69, 0x32, 0x07, 0x68, 0x61, 0x70, 0x6c, 0x6f, 0x69, 0x64, 0x52, 0x0c,
	0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x12,
	0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x67, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x42, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x67, 0x65, 0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a, 0x0a, 0x0b, 0x62, 0x69, 0x6f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x12, 0x0b, 0x42, 0x69, 0x6f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x20, 0x52, 0x11, 0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x26, 0xc2, 0xf3, 0x18, 0x22, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e,
	0xc2, 0xf3, 0x18, 0x1a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x77, 0x0a, 0x16, 0x67,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x41, 0xc2, 0xf3, 0x18,
	0x3d, 0x0a, 0x16, 0x67, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x2d, 0x61, 0x73, 0x73, 0x6d, 0x2d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x11, 0x47, 0x65, 0x6e, 0x42, 0x61,
	0x6e, 0x6b, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x10, 0x47, 0x43,
	0x41, 0x5f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x34, 0x30, 0x35, 0x2e, 0x32, 0x38, 0x52, 0x14,
	0x67, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x41, 0x73, 0x73, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x09, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x78,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4f, 0xc2, 0xf3, 0x18, 0x4b, 0x0a, 0x0f, 0x72,
	0x65, 0x66, 0x73, 0x65, 0x71, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0f,
	0x52, 0x65, 0x66, 0x73, 0x65, 0x71, 0x20, 0x44, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32,
	0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x6f, 0x6d,
	0x65, 0x32, 0x15, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x20, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x73, 0x0a, 0x15, 0x72, 0x65, 0x66, 0x73,
	0x65, 0x71, 0x5f, 0x61, 0x73, 0x73, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3f, 0xc2, 0xf3, 0x18, 0x3b, 0x0a, 0x15, 0x72,
	0x65, 0x66, 0x73, 0x65, 0x71, 0x2d, 0x61, 0x73, 0x73, 0x6d, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x52, 0x65, 0x66, 0x53, 0x65, 0x71, 0x20, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x10, 0x47, 0x43, 0x46, 0x5f, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x31, 0x34, 0x30, 0x35, 0x2e, 0x34, 0x30, 0x52, 0x13, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71,
	0x41, 0x73, 0x73, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a,
	0x0e, 0x75, 0x63, 0x73, 0x63, 0x5f, 0x61, 0x73, 0x73, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xc2, 0xf3, 0x18, 0x2a, 0x0a, 0x0e, 0x75, 0x63, 0x73,
	0x63, 0x2d, 0x61, 0x73, 0x73, 0x6d, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x55, 0x43, 0x53,
	0x43, 0x20, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x32,
	0x04, 0x68, 0x67, 0x33, 0x38, 0x52, 0x0c, 0x75, 0x63, 0x73, 0x63, 0x41, 0x73, 0x73, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xc2, 0xf3,
	0x18, 0x1e, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x2d, 0x61, 0x73, 0x73, 0x6d, 0x12,
	0x0f, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x20, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x65, 0x63, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xc2, 0xf3, 0x18, 0x22, 0x0a,
	0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x2d, 0x74, 0x65, 0x63, 0x68,
	0x12, 0x0f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x65, 0x63,
	0x68, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x63,
	0x68, 0x12, 0x6d, 0x0a, 0x13, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c,
	0xc2, 0xf3, 0x18, 0x38, 0x0a, 0x13, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x42, 0x69, 0x6f, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0c,
	0x53, 0x41, 0x4d, 0x4e, 0x30, 0x33, 0x31, 0x34, 0x35, 0x34, 0x34, 0x34, 0x52, 0x12, 0x62, 0x69,
	0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x69, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x42,
	0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x42, 0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a, 0x0a, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2d, 0x12, 0x0a, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20,
	0x52, 0x09, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x62,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x09, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x75, 0x72, 0x6c, 0x12,
	0x09, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x20, 0x55, 0x52, 0x4c, 0x52, 0x08, 0x62, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0xd5, 0x08, 0x0a, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x7d, 0x0a, 0x1b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x3e, 0xc2, 0xf3, 0x18, 0x3a, 0x0a, 0x1b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6f, 0x66, 0x2d, 0x63,
	0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x12, 0x1b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x68, 0x72, 0x6f,
	0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65, 0x73, 0x52, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x68, 0x72, 0x6f, 0x6d, 0x6f, 0x73, 0x6f, 0x6d, 0x65,
	0x73, 0x12, 0x63, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x2f, 0xc2, 0xf3, 0x18, 0x2b, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x6c, 0x65, 0x6e, 0x12, 0x15, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x20, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x63, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x75, 0x6e, 0x67, 0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x2f, 0xc2, 0xf3, 0x18, 0x2b, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x2d, 0x75, 0x6e, 0x67, 0x61, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x6c, 0x65, 0x6e, 0x12,
	0x15, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x55, 0x6e, 0x67, 0x61, 0x70, 0x70, 0x65, 0x64, 0x20,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x67,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x56, 0x0a, 0x11, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2a, 0xc2, 0xf3, 0x18, 0x26, 0x0a, 0x11, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6f, 0x66, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x73, 0x12,
	0x11, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x67, 0x73, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x74,
	0x69, 0x67, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x5f, 0x6e, 0x35,
	0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x67, 0x2d, 0x6e, 0x35, 0x30, 0x12, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x67, 0x20, 0x4e, 0x35, 0x30, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x4e, 0x35, 0x30,
	0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x5f, 0x6c, 0x35, 0x30, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x67, 0x2d, 0x6c, 0x35, 0x30, 0x12, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x20, 0x4c,
	0x35, 0x30, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x4c, 0x35, 0x30, 0x12, 0x5e, 0x0a,
	0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x63, 0x61, 0x66, 0x66,
	0x6f, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2e, 0xc2, 0xf3, 0x18, 0x2a,
	0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x63, 0x61, 0x66,
	0x66, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x13, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66,
	0x20, 0x53, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x53, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x43, 0x0a,
	0x0c, 0x73, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x35, 0x30, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x66, 0x66,
	0x6f, 0x6c, 0x64, 0x2d, 0x6e, 0x35, 0x30, 0x12, 0x0c, 0x53, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c,
	0x64, 0x20, 0x4e, 0x35, 0x30, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x4e,
	0x35, 0x30, 0x12, 0x43, 0x0a, 0x0c, 0x73, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x5f, 0x6c,
	0x35, 0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c, 0x0a, 0x0c,
	0x73, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x2d, 0x6c, 0x35, 0x30, 0x12, 0x0c, 0x53, 0x63,
	0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x20, 0x4c, 0x35, 0x30, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x66,
	0x66, 0x6f, 0x6c, 0x64, 0x4c, 0x35, 0x30, 0x12, 0x81, 0x01, 0x0a, 0x1c, 0x67, 0x61, 0x70, 0x73,
	0x5f, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c,
	0x64, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x40,
	0xc2, 0xf3, 0x18, 0x3c, 0x0a, 0x1c, 0x67, 0x61, 0x70, 0x73, 0x2d, 0x62, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x2d, 0x73, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x2d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x47, 0x61, 0x70, 0x73, 0x20, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x20, 0x53, 0x63, 0x61, 0x66, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x19, 0x67, 0x61, 0x70, 0x73, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x53, 0x63, 0x61,
	0x66, 0x66, 0x6f, 0x6c, 0x64, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x1d,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x42, 0xc2, 0xf3, 0x18, 0x3e, 0x0a, 0x1d, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x2d, 0x6f, 0x66, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x20, 0x6f, 0x66, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x1a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x63, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x42, 0x18, 0xc2, 0xf3, 0x18, 0x14, 0x0a, 0x08, 0x67, 0x63, 0x2d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x08, 0x47, 0x43, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x07, 0x67, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x03, 0x0a, 0x0d, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x65, 0x6c, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x0d, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x22, 0xc2, 0xf3, 0x18, 0x1e, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x20, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2c, 0xc2, 0xf3, 0x18, 0x28, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x72, 0x61, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x49, 0x6e, 0x66, 0x72, 0x61,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x11, 0x69,
	0x6e, 0x66, 0x72, 0x61, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x52, 0x0a, 0x0a, 0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x32, 0xc2, 0xf3, 0x18, 0x2e, 0x0a, 0x15, 0x62, 0x69, 0x6f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x15, 0x42, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x65, 0x71, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x28, 0xc2, 0xf3, 0x18, 0x24, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x2d, 0x73, 0x65,
	0x71, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20,
	0x53, 0x65, 0x71, 0x20, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x53, 0x65, 0x71, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xc2,
	0xf3, 0x18, 0x16, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x09,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x52, 0x09, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x72, 0x22, 0x90, 0x03, 0x0a, 0x0e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xc2,
	0xf3, 0x18, 0x10, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x44,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2d, 0x75, 0x72, 0x6c, 0x12, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x55,
	0x52, 0x4c, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x57, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x18, 0xc2, 0xf3, 0x18, 0x14, 0x0a, 0x0a, 0x66, 0x65, 0x61,
	0x74, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x12, 0x06, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x4f, 0x0a, 0x05, 0x62, 0x75, 0x73, 0x63, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x42, 0x75, 0x73, 0x63, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x42, 0x14, 0xc2, 0xf3, 0x18, 0x10,
	0x0a, 0x06, 0x62, 0x75, 0x73, 0x63, 0x6f, 0x2d, 0x12, 0x06, 0x42, 0x55, 0x53, 0x43, 0x4f, 0x20,
	0x52, 0x05, 0x62, 0x75, 0x73, 0x63, 0x6f, 0x22, 0x6a, 0x0a, 0x0d, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x59, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x42, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x2d,
	0x12, 0x05, 0x47, 0x65, 0x6e, 0x65, 0x20, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x22, 0xdd, 0x03, 0x0a, 0x09, 0x42, 0x75, 0x73, 0x63, 0x6f, 0x53, 0x74, 0x61,
	0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x62, 0x75, 0x73, 0x63, 0x6f, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xc2, 0xf3, 0x18, 0x12, 0x0a, 0x07,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x12, 0x07, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65,
	0x52, 0x0c, 0x62, 0x75, 0x73, 0x63, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x12, 0x2f,
	0x0a, 0x09, 0x62, 0x75, 0x73, 0x63, 0x6f, 0x5f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a, 0x03, 0x76, 0x65, 0x72, 0x12, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x62, 0x75, 0x73, 0x63, 0x6f, 0x56, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x18, 0xc2, 0xf3, 0x18, 0x14, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x08, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x70, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1d, 0xc2, 0xf3, 0x18, 0x19,
	0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x63, 0x6f, 0x70, 0x79, 0x12, 0x0b, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x70, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a,
	0x0a, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0a, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a, 0x0a, 0x66,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x12, 0x0a, 0x46, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x16, 0xc2, 0xf3, 0x18, 0x12, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x12, 0x07, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x42, 0x1d, 0xc2, 0xf3, 0x18, 0x19, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0b, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa8, 0x02, 0x0a, 0x0a, 0x47, 0x65, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x24, 0xc2, 0xf3, 0x18, 0x20, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0a, 0x6e, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xc2,
	0xf3, 0x18, 0x18, 0x0a, 0x0a, 0x6e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x0a, 0x4e, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x6e, 0x6f, 0x6e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f,
	0x67, 0x65, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xc2, 0xf3, 0x18, 0x18,
	0x0a, 0x0a, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x12, 0x0a, 0x50, 0x73,
	0x65, 0x75, 0x64, 0x6f, 0x67, 0x65, 0x6e, 0x65, 0x52, 0x0a, 0x70, 0x73, 0x65, 0x75, 0x64, 0x6f,
	0x67, 0x65, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x12, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0xde,
	0x02, 0x0a, 0x07, 0x57, 0x47, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x70, 0x0a, 0x15, 0x77, 0x67,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0xc2, 0xf3, 0x18, 0x38, 0x0a,
	0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x11, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x06, 0x41, 0x41, 0x45, 0x58, 0x30, 0x33, 0x32, 0x08, 0x43,
	0x41, 0x42, 0x48, 0x4c, 0x46, 0x30, 0x31, 0x52, 0x13, 0x77, 0x67, 0x73, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x69, 0x0a, 0x0e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x77, 0x67, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x43, 0xc2, 0xf3, 0x18, 0x3f, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x03, 0x55, 0x52, 0x4c, 0x32, 0x33, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77,
	0x77, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x6e, 0x6c, 0x6d, 0x2e, 0x6e, 0x69, 0x68, 0x2e, 0x67,
	0x6f, 0x76, 0x2f, 0x6e, 0x75, 0x63, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x41, 0x41, 0x45, 0x58, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2e, 0x33, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x57, 0x67, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x76, 0x0a, 0x0f, 0x77, 0x67, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x67, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x4e, 0xc2, 0xf3, 0x18, 0x4a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x73, 0x2d,
	0x75, 0x72, 0x6c, 0x12, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x73, 0x20, 0x55, 0x52, 0x4c,
	0x32, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6e, 0x63,
	0x62, 0x69, 0x2e, 0x6e, 0x6c, 0x6d, 0x2e, 0x6e, 0x69, 0x68, 0x2e, 0x67, 0x6f, 0x76, 0x2f, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x77, 0x67, 0x73, 0x2f, 0x41, 0x41, 0x45, 0x58, 0x30, 0x33,
	0x52, 0x0d, 0x77, 0x67, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x73, 0x55, 0x72, 0x6c, 0x42,
	0xf9, 0x0a, 0x5a, 0x18, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0xf8, 0x01, 0x01, 0xc2,
	0xf3, 0x18, 0xd7, 0x0a, 0x0a, 0x1b, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x20, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x3b, 0x3c, 0x70, 0x3e, 0x54, 0x68, 0x65, 0x20, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x20,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73,
	0x20, 0x61, 0x20, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x1a, 0x49, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20,
	0x69, 0x6e, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70,
	0x73, 0x3a, 0x2f, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x72, 0x65,
	0x61, 0x64, 0x74, 0x68, 0x65, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x22, 0x3e, 0x4a,
	0x53, 0x4f, 0x4e, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x1a, 0x50, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x3a, 0x20, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x65, 0x6d, 0x3e, 0x6e,
	0x63, 0x62, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6a, 0x73, 0x6f,
	0x6e, 0x6c, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x1a,
	0x78, 0x45, 0x61, 0x63, 0x68, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x63, 0x61, 0x6c, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2d, 0x65, 0x6e, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22,
	0x3e, 0x4a, 0x53, 0x4f, 0x4e, 0x3c, 0x2f, 0x61, 0x3e, 0x1a, 0x79, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x6f, 0x6d,
	0x65, 0x20, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x69, 0x73, 0x20, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x73, 0x1a, 0x70, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x6f, 0x77, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x61,
	0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x1a, 0x4a, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x3c, 0x65, 0x6d, 0x3e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x2e, 0x3c, 0x2f, 0x70,
	0x3e, 0x20, 0x1a, 0x51, 0x3c, 0x70, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x20, 0x61, 0x20, 0x3c, 0x65, 0x6d, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x20, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x3c, 0x2f, 0x65, 0x6d, 0x3e,
	0x20, 0x63, 0x61, 0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74,
	0x68, 0x20, 0x74, 0x68, 0x65, 0x1a, 0x90, 0x01, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
	0x22, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x6f, 0x63,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2f, 0x22, 0x3e, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x27, 0x73, 0x20, 0x3c,
	0x6e, 0x6f, 0x62, 0x72, 0x3e, 0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x2d, 0x2d, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x3c, 0x2f, 0x6e, 0x6f, 0x62, 0x72,
	0x3e, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8e, 0x01, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d,
	0x22, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f,
	0x63, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x6f, 0x63,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2f, 0x22, 0x3e, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x43, 0x4c, 0x49, 0x20, 0x74,
	0x6f, 0x6f, 0x6c, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f,
	0x20, 0x73, 0x65, 0x65, 0x20, 0x68, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e,
	0x20, 0x75, 0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x1a, 0x50, 0x74, 0x6f, 0x6f, 0x6c, 0x20,
	0x74, 0x6f, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x61, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x4c, 0x69, 0x6e,
	0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x20, 0x22, 0x0b, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0b, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x22, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x0f, 0x4c, 0x69,
	0x6e, 0x65, 0x61, 0x67, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x22, 0x08, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x2a, 0x91, 0x01, 0x7b, 0x7b, 0x3c, 0x20, 0x72, 0x65,
	0x61, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x20, 0x66, 0x69,
	0x6c, 0x65, 0x3d, 0x22, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x67,
	0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63, 0x6c, 0x69,
	0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x3d, 0x22,
	0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x22, 0x20, 0x65, 0x6e, 0x64, 0x3d, 0x22, 0x45, 0x4e, 0x44, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3e, 0x7d, 0x7d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ncbi_datasets_v1_reports_assembly_proto_rawDescOnce sync.Once
	file_ncbi_datasets_v1_reports_assembly_proto_rawDescData = file_ncbi_datasets_v1_reports_assembly_proto_rawDesc
)

func file_ncbi_datasets_v1_reports_assembly_proto_rawDescGZIP() []byte {
	file_ncbi_datasets_v1_reports_assembly_proto_rawDescOnce.Do(func() {
		file_ncbi_datasets_v1_reports_assembly_proto_rawDescData = protoimpl.X.CompressGZIP(file_ncbi_datasets_v1_reports_assembly_proto_rawDescData)
	})
	return file_ncbi_datasets_v1_reports_assembly_proto_rawDescData
}

var file_ncbi_datasets_v1_reports_assembly_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ncbi_datasets_v1_reports_assembly_proto_goTypes = []interface{}{
	(*AssemblyDataReport)(nil),  // 0: ncbi.datasets.v1.reports.AssemblyDataReport
	(*AssemblyInfo)(nil),        // 1: ncbi.datasets.v1.reports.AssemblyInfo
	(*AssemblyStats)(nil),       // 2: ncbi.datasets.v1.reports.AssemblyStats
	(*OrganelleInfo)(nil),       // 3: ncbi.datasets.v1.reports.OrganelleInfo
	(*AnnotationInfo)(nil),      // 4: ncbi.datasets.v1.reports.AnnotationInfo
	(*FeatureCounts)(nil),       // 5: ncbi.datasets.v1.reports.FeatureCounts
	(*BuscoStat)(nil),           // 6: ncbi.datasets.v1.reports.BuscoStat
	(*GeneCounts)(nil),          // 7: ncbi.datasets.v1.reports.GeneCounts
	(*WGSInfo)(nil),             // 8: ncbi.datasets.v1.reports.WGSInfo
	(*BioProjectLineage)(nil),   // 9: ncbi.datasets.v1.reports.BioProjectLineage
	(*BioSampleDescriptor)(nil), // 10: ncbi.datasets.v1.reports.BioSampleDescriptor
}
var file_ncbi_datasets_v1_reports_assembly_proto_depIdxs = []int32{
	1,  // 0: ncbi.datasets.v1.reports.AssemblyDataReport.assembly_info:type_name -> ncbi.datasets.v1.reports.AssemblyInfo
	2,  // 1: ncbi.datasets.v1.reports.AssemblyDataReport.assembly_stats:type_name -> ncbi.datasets.v1.reports.AssemblyStats
	3,  // 2: ncbi.datasets.v1.reports.AssemblyDataReport.organelle_info:type_name -> ncbi.datasets.v1.reports.OrganelleInfo
	4,  // 3: ncbi.datasets.v1.reports.AssemblyDataReport.annotation_info:type_name -> ncbi.datasets.v1.reports.AnnotationInfo
	8,  // 4: ncbi.datasets.v1.reports.AssemblyDataReport.wgs_info:type_name -> ncbi.datasets.v1.reports.WGSInfo
	9,  // 5: ncbi.datasets.v1.reports.AssemblyInfo.bioproject_lineage:type_name -> ncbi.datasets.v1.reports.BioProjectLineage
	10, // 6: ncbi.datasets.v1.reports.AssemblyInfo.biosample:type_name -> ncbi.datasets.v1.reports.BioSampleDescriptor
	5,  // 7: ncbi.datasets.v1.reports.AnnotationInfo.stats:type_name -> ncbi.datasets.v1.reports.FeatureCounts
	6,  // 8: ncbi.datasets.v1.reports.AnnotationInfo.busco:type_name -> ncbi.datasets.v1.reports.BuscoStat
	7,  // 9: ncbi.datasets.v1.reports.FeatureCounts.gene_counts:type_name -> ncbi.datasets.v1.reports.GeneCounts
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_ncbi_datasets_v1_reports_assembly_proto_init() }
func file_ncbi_datasets_v1_reports_assembly_proto_init() {
	if File_ncbi_datasets_v1_reports_assembly_proto != nil {
		return
	}
	file_ncbi_datasets_v1_reports_biosample_proto_init()
	file_ncbi_datasets_v1_reports_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyDataReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganelleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuscoStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeneCounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_assembly_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WGSInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ncbi_datasets_v1_reports_assembly_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ncbi_datasets_v1_reports_assembly_proto_goTypes,
		DependencyIndexes: file_ncbi_datasets_v1_reports_assembly_proto_depIdxs,
		MessageInfos:      file_ncbi_datasets_v1_reports_assembly_proto_msgTypes,
	}.Build()
	File_ncbi_datasets_v1_reports_assembly_proto = out.File
	file_ncbi_datasets_v1_reports_assembly_proto_rawDesc = nil
	file_ncbi_datasets_v1_reports_assembly_proto_goTypes = nil
	file_ncbi_datasets_v1_reports_assembly_proto_depIdxs = nil
}
