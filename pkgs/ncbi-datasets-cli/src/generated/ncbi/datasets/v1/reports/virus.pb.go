// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: ncbi/datasets/v1/reports/virus.proto

package reports

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "ncbi/datasets/options"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PurposeOfSampling int32

const (
	PurposeOfSampling_PURPOSE_OF_SAMPLING_UNKNOWN               PurposeOfSampling = 0
	PurposeOfSampling_PURPOSE_OF_SAMPLING_BASELINE_SURVEILLANCE PurposeOfSampling = 1
)

// Enum value maps for PurposeOfSampling.
var (
	PurposeOfSampling_name = map[int32]string{
		0: "PURPOSE_OF_SAMPLING_UNKNOWN",
		1: "PURPOSE_OF_SAMPLING_BASELINE_SURVEILLANCE",
	}
	PurposeOfSampling_value = map[string]int32{
		"PURPOSE_OF_SAMPLING_UNKNOWN":               0,
		"PURPOSE_OF_SAMPLING_BASELINE_SURVEILLANCE": 1,
	}
)

func (x PurposeOfSampling) Enum() *PurposeOfSampling {
	p := new(PurposeOfSampling)
	*p = x
	return p
}

func (x PurposeOfSampling) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PurposeOfSampling) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1_reports_virus_proto_enumTypes[0].Descriptor()
}

func (PurposeOfSampling) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1_reports_virus_proto_enumTypes[0]
}

func (x PurposeOfSampling) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PurposeOfSampling.Descriptor instead.
func (PurposeOfSampling) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{0}
}

type VirusAssembly_Completeness int32

const (
	VirusAssembly_UNKNOWN  VirusAssembly_Completeness = 0
	VirusAssembly_COMPLETE VirusAssembly_Completeness = 1
	VirusAssembly_PARTIAL  VirusAssembly_Completeness = 2
)

// Enum value maps for VirusAssembly_Completeness.
var (
	VirusAssembly_Completeness_name = map[int32]string{
		0: "UNKNOWN",
		1: "COMPLETE",
		2: "PARTIAL",
	}
	VirusAssembly_Completeness_value = map[string]int32{
		"UNKNOWN":  0,
		"COMPLETE": 1,
		"PARTIAL":  2,
	}
)

func (x VirusAssembly_Completeness) Enum() *VirusAssembly_Completeness {
	p := new(VirusAssembly_Completeness)
	*p = x
	return p
}

func (x VirusAssembly_Completeness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VirusAssembly_Completeness) Descriptor() protoreflect.EnumDescriptor {
	return file_ncbi_datasets_v1_reports_virus_proto_enumTypes[1].Descriptor()
}

func (VirusAssembly_Completeness) Type() protoreflect.EnumType {
	return &file_ncbi_datasets_v1_reports_virus_proto_enumTypes[1]
}

func (x VirusAssembly_Completeness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VirusAssembly_Completeness.Descriptor instead.
func (VirusAssembly_Completeness) EnumDescriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{5, 0}
}

type ConservedDomain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cdd accession
	Accession string `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// range on the protein
	Range *Range `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *ConservedDomain) Reset() {
	*x = ConservedDomain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConservedDomain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConservedDomain) ProtoMessage() {}

func (x *ConservedDomain) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConservedDomain.ProtoReflect.Descriptor instead.
func (*ConservedDomain) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{0}
}

func (x *ConservedDomain) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *ConservedDomain) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConservedDomain) GetRange() *Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type SeqRangeSetFasta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Seq_id may include location info in addition to a sequence accession
	SeqId string `protobuf:"bytes,1,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	// Accession and version of the viral nucleotide sequence
	AccessionVersion string `protobuf:"bytes,2,opt,name=accession_version,json=accessionVersion,proto3" json:"accession_version,omitempty"`
	Title            string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Unique identifier for identical sequences
	SequenceHash string `protobuf:"bytes,4,opt,name=sequence_hash,json=sequenceHash,proto3" json:"sequence_hash,omitempty"`
	// Series of intervals on above accession_version
	Range []*Range `protobuf:"bytes,5,rep,name=range,proto3" json:"range,omitempty"`
}

func (x *SeqRangeSetFasta) Reset() {
	*x = SeqRangeSetFasta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SeqRangeSetFasta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeqRangeSetFasta) ProtoMessage() {}

func (x *SeqRangeSetFasta) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeqRangeSetFasta.ProtoReflect.Descriptor instead.
func (*SeqRangeSetFasta) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{1}
}

func (x *SeqRangeSetFasta) GetSeqId() string {
	if x != nil {
		return x.SeqId
	}
	return ""
}

func (x *SeqRangeSetFasta) GetAccessionVersion() string {
	if x != nil {
		return x.AccessionVersion
	}
	return ""
}

func (x *SeqRangeSetFasta) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SeqRangeSetFasta) GetSequenceHash() string {
	if x != nil {
		return x.SequenceHash
	}
	return ""
}

func (x *SeqRangeSetFasta) GetRange() []*Range {
	if x != nil {
		return x.Range
	}
	return nil
}

type VirusPeptide struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Protein accession and version
	Accession string `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	// Protein name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Alternate names for this protein
	OtherNames []string `protobuf:"bytes,3,rep,name=other_names,json=otherNames,proto3" json:"other_names,omitempty"`
	// The interval on the genomic nucleotide record of this mature-peptide feature
	Nucleotide *SeqRangeSetFasta `protobuf:"bytes,4,opt,name=nucleotide,proto3" json:"nucleotide,omitempty"`
	// The full polyprotein record or interval on the polyprotein for mature-peptide features
	Protein *SeqRangeSetFasta `protobuf:"bytes,5,opt,name=protein,proto3" json:"protein,omitempty"`
	// PDB identifiers for this protein
	PdbIds []string `protobuf:"bytes,6,rep,name=pdb_ids,json=pdbIds,proto3" json:"pdb_ids,omitempty"`
	// Conserved Domains associated with this protein
	Cdd []*ConservedDomain `protobuf:"bytes,7,rep,name=cdd,proto3" json:"cdd,omitempty"`
	// UniProt identifier
	UniProtKb *VirusPeptide_UniProtId `protobuf:"bytes,8,opt,name=uni_prot_kb,json=uniProtKb,proto3" json:"uni_prot_kb,omitempty"`
	// Enzymatically processed products of a polyprotein
	MaturePeptide []*VirusPeptide `protobuf:"bytes,9,rep,name=mature_peptide,json=maturePeptide,proto3" json:"mature_peptide,omitempty"`
	// Protein completeness
	ProteinCompleteness VirusAssembly_Completeness `protobuf:"varint,10,opt,name=protein_completeness,json=proteinCompleteness,proto3,enum=ncbi.datasets.v1.reports.VirusAssembly_Completeness" json:"protein_completeness,omitempty"`
}

func (x *VirusPeptide) Reset() {
	*x = VirusPeptide{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirusPeptide) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirusPeptide) ProtoMessage() {}

func (x *VirusPeptide) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirusPeptide.ProtoReflect.Descriptor instead.
func (*VirusPeptide) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{2}
}

func (x *VirusPeptide) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *VirusPeptide) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirusPeptide) GetOtherNames() []string {
	if x != nil {
		return x.OtherNames
	}
	return nil
}

func (x *VirusPeptide) GetNucleotide() *SeqRangeSetFasta {
	if x != nil {
		return x.Nucleotide
	}
	return nil
}

func (x *VirusPeptide) GetProtein() *SeqRangeSetFasta {
	if x != nil {
		return x.Protein
	}
	return nil
}

func (x *VirusPeptide) GetPdbIds() []string {
	if x != nil {
		return x.PdbIds
	}
	return nil
}

func (x *VirusPeptide) GetCdd() []*ConservedDomain {
	if x != nil {
		return x.Cdd
	}
	return nil
}

func (x *VirusPeptide) GetUniProtKb() *VirusPeptide_UniProtId {
	if x != nil {
		return x.UniProtKb
	}
	return nil
}

func (x *VirusPeptide) GetMaturePeptide() []*VirusPeptide {
	if x != nil {
		return x.MaturePeptide
	}
	return nil
}

func (x *VirusPeptide) GetProteinCompleteness() VirusAssembly_Completeness {
	if x != nil {
		return x.ProteinCompleteness
	}
	return VirusAssembly_UNKNOWN
}

type VirusGene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GeneId uint32 `protobuf:"varint,2,opt,name=gene_id,json=geneId,proto3" json:"gene_id,omitempty"`
	// The interval on the genomic nucleotide record of the CDS feature.
	Nucleotide *SeqRangeSetFasta `protobuf:"bytes,3,opt,name=nucleotide,proto3" json:"nucleotide,omitempty"`
	// polyprotein or protein cds
	Cds []*VirusPeptide `protobuf:"bytes,4,rep,name=cds,proto3" json:"cds,omitempty"`
}

func (x *VirusGene) Reset() {
	*x = VirusGene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirusGene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirusGene) ProtoMessage() {}

func (x *VirusGene) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirusGene.ProtoReflect.Descriptor instead.
func (*VirusGene) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{3}
}

func (x *VirusGene) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirusGene) GetGeneId() uint32 {
	if x != nil {
		return x.GeneId
	}
	return 0
}

func (x *VirusGene) GetNucleotide() *SeqRangeSetFasta {
	if x != nil {
		return x.Nucleotide
	}
	return nil
}

func (x *VirusGene) GetCds() []*VirusPeptide {
	if x != nil {
		return x.Cds
	}
	return nil
}

type VirusAnnotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genes []*VirusGene `protobuf:"bytes,1,rep,name=genes,proto3" json:"genes,omitempty"`
}

func (x *VirusAnnotation) Reset() {
	*x = VirusAnnotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirusAnnotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirusAnnotation) ProtoMessage() {}

func (x *VirusAnnotation) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirusAnnotation.ProtoReflect.Descriptor instead.
func (*VirusAnnotation) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{4}
}

func (x *VirusAnnotation) GetGenes() []*VirusGene {
	if x != nil {
		return x.Genes
	}
	return nil
}

type VirusAssembly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The accession.version of the viral nucleotide sequence. Includes both GenBank and RefSeq accessions
	Accession string `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	// Deprecated: Do not use.
	IsComplete bool `protobuf:"varint,2,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`
	// The viral genome has been annotated by either the submitter (GenBank) or by NCBI (RefSeq)
	IsAnnotated bool                   `protobuf:"varint,3,opt,name=is_annotated,json=isAnnotated,proto3" json:"is_annotated,omitempty"`
	Isolate     *VirusAssembly_Isolate `protobuf:"bytes,4,opt,name=isolate,proto3" json:"isolate,omitempty"`
	// Indicates if the source of the viral nucleotide record is from a GenBank submitter or from NCBI-derived curation (RefSeq)
	SourceDatabase string `protobuf:"bytes,5,opt,name=source_database,json=sourceDatabase,proto3" json:"source_database,omitempty"`
	// The total count of annotated proteins including both proteins and polyproteins but not processed mature peptides
	ProteinCount uint32 `protobuf:"varint,6,opt,name=protein_count,json=proteinCount,proto3" json:"protein_count,omitempty"`
	// Taxon from which the virus sample was isolated
	Host *Organism `protobuf:"bytes,7,opt,name=host,proto3" json:"host,omitempty"`
	// Viral taxon
	Virus *Organism `protobuf:"bytes,8,opt,name=virus,proto3" json:"virus,omitempty"`
	// Associated BioProject accessions, when available
	Bioprojects []string                          `protobuf:"bytes,9,rep,name=bioprojects,proto3" json:"bioprojects,omitempty"`
	Location    *VirusAssembly_CollectionLocation `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	// Date the viral nucleotide accession was last updated in NCBI Virus
	UpdateDate string `protobuf:"bytes,11,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`
	// Date the viral nucleotide accession was first released in NCBI Virus
	ReleaseDate string `protobuf:"bytes,12,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`
	// Value describing if the of the viral nucleotide sequence represents a complete or partial genome
	//
	// Deprecated: Do not use.
	NucleotideCompleteness string                     `protobuf:"bytes,13,opt,name=nucleotide_completeness,json=nucleotideCompleteness,proto3" json:"nucleotide_completeness,omitempty"`
	Completeness           VirusAssembly_Completeness `protobuf:"varint,21,opt,name=completeness,proto3,enum=ncbi.datasets.v1.reports.VirusAssembly_Completeness" json:"completeness,omitempty"`
	// Length of the viral nucleotide sequence
	Length uint32 `protobuf:"varint,14,opt,name=length,proto3" json:"length,omitempty"`
	// Total count of genes annotated on the viral nucleotide sequence
	GeneCount uint32 `protobuf:"varint,15,opt,name=gene_count,json=geneCount,proto3" json:"gene_count,omitempty"`
	// Total count of processed mature peptides annotated on the viral nucleotide sequence
	MaturePeptideCount uint32 `protobuf:"varint,16,opt,name=mature_peptide_count,json=maturePeptideCount,proto3" json:"mature_peptide_count,omitempty"`
	// Associated Biosample accessions
	Biosample string `protobuf:"bytes,17,opt,name=biosample,proto3" json:"biosample,omitempty"`
	// ICTV (International Committee on Taxonomy of Viruses) viral classification based on nucleic acid composition, strandedness and method of replication
	MolType    string           `protobuf:"bytes,18,opt,name=mol_type,json=molType,proto3" json:"mol_type,omitempty"`
	Annotation *VirusAnnotation `protobuf:"bytes,19,opt,name=annotation,proto3" json:"annotation,omitempty"`
	// The whole genomic nucleotide record of the CDS feature.
	Nucleotide        *SeqRangeSetFasta `protobuf:"bytes,20,opt,name=nucleotide,proto3" json:"nucleotide,omitempty"`
	PurposeOfSampling PurposeOfSampling `protobuf:"varint,22,opt,name=purpose_of_sampling,json=purposeOfSampling,proto3,enum=ncbi.datasets.v1.reports.PurposeOfSampling" json:"purpose_of_sampling,omitempty"`
	// SRA accessions linked to the genbank genome
	SraAccessions []string `protobuf:"bytes,30,rep,name=sra_accessions,json=sraAccessions,proto3" json:"sra_accessions,omitempty"`
}

func (x *VirusAssembly) Reset() {
	*x = VirusAssembly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirusAssembly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirusAssembly) ProtoMessage() {}

func (x *VirusAssembly) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirusAssembly.ProtoReflect.Descriptor instead.
func (*VirusAssembly) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{5}
}

func (x *VirusAssembly) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

// Deprecated: Do not use.
func (x *VirusAssembly) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *VirusAssembly) GetIsAnnotated() bool {
	if x != nil {
		return x.IsAnnotated
	}
	return false
}

func (x *VirusAssembly) GetIsolate() *VirusAssembly_Isolate {
	if x != nil {
		return x.Isolate
	}
	return nil
}

func (x *VirusAssembly) GetSourceDatabase() string {
	if x != nil {
		return x.SourceDatabase
	}
	return ""
}

func (x *VirusAssembly) GetProteinCount() uint32 {
	if x != nil {
		return x.ProteinCount
	}
	return 0
}

func (x *VirusAssembly) GetHost() *Organism {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *VirusAssembly) GetVirus() *Organism {
	if x != nil {
		return x.Virus
	}
	return nil
}

func (x *VirusAssembly) GetBioprojects() []string {
	if x != nil {
		return x.Bioprojects
	}
	return nil
}

func (x *VirusAssembly) GetLocation() *VirusAssembly_CollectionLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *VirusAssembly) GetUpdateDate() string {
	if x != nil {
		return x.UpdateDate
	}
	return ""
}

func (x *VirusAssembly) GetReleaseDate() string {
	if x != nil {
		return x.ReleaseDate
	}
	return ""
}

// Deprecated: Do not use.
func (x *VirusAssembly) GetNucleotideCompleteness() string {
	if x != nil {
		return x.NucleotideCompleteness
	}
	return ""
}

func (x *VirusAssembly) GetCompleteness() VirusAssembly_Completeness {
	if x != nil {
		return x.Completeness
	}
	return VirusAssembly_UNKNOWN
}

func (x *VirusAssembly) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *VirusAssembly) GetGeneCount() uint32 {
	if x != nil {
		return x.GeneCount
	}
	return 0
}

func (x *VirusAssembly) GetMaturePeptideCount() uint32 {
	if x != nil {
		return x.MaturePeptideCount
	}
	return 0
}

func (x *VirusAssembly) GetBiosample() string {
	if x != nil {
		return x.Biosample
	}
	return ""
}

func (x *VirusAssembly) GetMolType() string {
	if x != nil {
		return x.MolType
	}
	return ""
}

func (x *VirusAssembly) GetAnnotation() *VirusAnnotation {
	if x != nil {
		return x.Annotation
	}
	return nil
}

func (x *VirusAssembly) GetNucleotide() *SeqRangeSetFasta {
	if x != nil {
		return x.Nucleotide
	}
	return nil
}

func (x *VirusAssembly) GetPurposeOfSampling() PurposeOfSampling {
	if x != nil {
		return x.PurposeOfSampling
	}
	return PurposeOfSampling_PURPOSE_OF_SAMPLING_UNKNOWN
}

func (x *VirusAssembly) GetSraAccessions() []string {
	if x != nil {
		return x.SraAccessions
	}
	return nil
}

type VirusPeptide_UniProtId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UniProt ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// UniProt name
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VirusPeptide_UniProtId) Reset() {
	*x = VirusPeptide_UniProtId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirusPeptide_UniProtId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirusPeptide_UniProtId) ProtoMessage() {}

func (x *VirusPeptide_UniProtId) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirusPeptide_UniProtId.ProtoReflect.Descriptor instead.
func (*VirusPeptide_UniProtId) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{2, 0}
}

func (x *VirusPeptide_UniProtId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VirusPeptide_UniProtId) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VirusAssembly_Isolate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// BioSample harmonized attribute names https://www.ncbi.nlm.nih.gov/biosample/docs/attributes/
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Source material from which the viral specimen was isolated
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The collection date for the sample from which the viral nucleotide sequence was derived
	CollectionDate string `protobuf:"bytes,3,opt,name=collection_date,json=collectionDate,proto3" json:"collection_date,omitempty"`
}

func (x *VirusAssembly_Isolate) Reset() {
	*x = VirusAssembly_Isolate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirusAssembly_Isolate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirusAssembly_Isolate) ProtoMessage() {}

func (x *VirusAssembly_Isolate) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirusAssembly_Isolate.ProtoReflect.Descriptor instead.
func (*VirusAssembly_Isolate) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{5, 0}
}

func (x *VirusAssembly_Isolate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VirusAssembly_Isolate) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *VirusAssembly_Isolate) GetCollectionDate() string {
	if x != nil {
		return x.CollectionDate
	}
	return ""
}

type VirusAssembly_CollectionLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Country of virus specimen collection
	GeographicLocation string `protobuf:"bytes,1,opt,name=geographic_location,json=geographicLocation,proto3" json:"geographic_location,omitempty"`
	// Region of virus specimen collection
	GeographicRegion string `protobuf:"bytes,2,opt,name=geographic_region,json=geographicRegion,proto3" json:"geographic_region,omitempty"`
}

func (x *VirusAssembly_CollectionLocation) Reset() {
	*x = VirusAssembly_CollectionLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirusAssembly_CollectionLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirusAssembly_CollectionLocation) ProtoMessage() {}

func (x *VirusAssembly_CollectionLocation) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_virus_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirusAssembly_CollectionLocation.ProtoReflect.Descriptor instead.
func (*VirusAssembly_CollectionLocation) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP(), []int{5, 1}
}

func (x *VirusAssembly_CollectionLocation) GetGeographicLocation() string {
	if x != nil {
		return x.GeographicLocation
	}
	return ""
}

func (x *VirusAssembly_CollectionLocation) GetGeographicRegion() string {
	if x != nil {
		return x.GeographicRegion
	}
	return ""
}

var File_ncbi_datasets_v1_reports_virus_proto protoreflect.FileDescriptor

var file_ncbi_datasets_v1_reports_virus_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x76, 0x69, 0x72, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x1a, 0x25, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x38, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x4b, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42,
	0x14, 0xc2, 0xf3, 0x18, 0x10, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x12, 0x06, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x20, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xbb, 0x02, 0x0a,
	0x10, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x46, 0x61, 0x73, 0x74,
	0x61, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xc2, 0xf3, 0x18, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x2d, 0x69, 0x64, 0x12,
	0x0b, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x49, 0x44, 0x52, 0x05, 0x73, 0x65,
	0x71, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xc2, 0xf3, 0x18,
	0x0e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xc2,
	0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x04, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4b, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x14, 0xc2,
	0xf3, 0x18, 0x10, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x12, 0x06, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x20, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xd5, 0x07, 0x0a, 0x0c, 0x56,
	0x69, 0x72, 0x75, 0x73, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a,
	0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a, 0x0a, 0x0b, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x2d, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x0b, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x6f, 0x0a, 0x0a,
	0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x46, 0x61, 0x73, 0x74, 0x61, 0x42, 0x23, 0xc2, 0xf3,
	0x18, 0x1f, 0x0a, 0x0a, 0x6e, 0x75, 0x63, 0x2d, 0x66, 0x61, 0x73, 0x74, 0x61, 0x2d, 0x12, 0x11,
	0x4e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x20, 0x46, 0x41, 0x53, 0x54, 0x41,
	0x20, 0x52, 0x0a, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x12, 0x6a, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x46, 0x61, 0x73, 0x74, 0x61, 0x42, 0x24, 0xc2, 0xf3, 0x18, 0x20,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x2d, 0x66, 0x61, 0x73, 0x74, 0x61, 0x2d,
	0x12, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x20, 0x46, 0x41, 0x53, 0x54, 0x41, 0x20,
	0x52, 0x07, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x64, 0x62,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0xc2, 0xf3, 0x18, 0x12,
	0x0a, 0x07, 0x70, 0x64, 0x62, 0x2d, 0x69, 0x64, 0x73, 0x12, 0x07, 0x50, 0x44, 0x42, 0x20, 0x49,
	0x44, 0x73, 0x52, 0x06, 0x70, 0x64, 0x62, 0x49, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x03, 0x63, 0x64,
	0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x63, 0x64, 0x64, 0x2d, 0x12, 0x04,
	0x43, 0x44, 0x44, 0x20, 0x52, 0x03, 0x63, 0x64, 0x64, 0x12, 0x69, 0x0a, 0x0b, 0x75, 0x6e, 0x69,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x5f, 0x6b, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x50,
	0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x49, 0x64,
	0x42, 0x17, 0xc2, 0xf3, 0x18, 0x13, 0x0a, 0x08, 0x75, 0x6e, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x2d,
	0x12, 0x07, 0x55, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x50, 0x72,
	0x6f, 0x74, 0x4b, 0x62, 0x12, 0x72, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70,
	0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e,
	0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x50, 0x65, 0x70,
	0x74, 0x69, 0x64, 0x65, 0x42, 0x23, 0xc2, 0xf3, 0x18, 0x1f, 0x0a, 0x0c, 0x6d, 0x61, 0x74, 0x2d,
	0x70, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x2d, 0x12, 0x0f, 0x4d, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x20, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x20, 0x52, 0x0d, 0x6d, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x12, 0x96, 0x01, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x2d, 0xc2,
	0xf3, 0x18, 0x29, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x20,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x13, 0x70, 0x72,
	0x6f, 0x74, 0x65, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x1a, 0x4f, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xc2, 0xf3, 0x18, 0x08,
	0x0a, 0x02, 0x69, 0x64, 0x12, 0x02, 0x49, 0x44, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x98, 0x02, 0x0a, 0x09, 0x56, 0x69, 0x72, 0x75, 0x73, 0x47, 0x65, 0x6e, 0x65,
	0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x07, 0x67,
	0x65, 0x6e, 0x65, 0x2d, 0x69, 0x64, 0x12, 0x0b, 0x4e, 0x43, 0x42, 0x49, 0x20, 0x47, 0x65, 0x6e,
	0x65, 0x49, 0x44, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x0a, 0x6e,
	0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x46, 0x61, 0x73, 0x74, 0x61, 0x42, 0x18, 0xc2, 0xf3, 0x18,
	0x14, 0x0a, 0x08, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x2d, 0x12, 0x08, 0x47, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x63, 0x20, 0x52, 0x0a, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64,
	0x65, 0x12, 0x4a, 0x0a, 0x03, 0x63, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x50,
	0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x63, 0x64,
	0x73, 0x2d, 0x12, 0x04, 0x43, 0x44, 0x53, 0x20, 0x52, 0x03, 0x63, 0x64, 0x73, 0x22, 0x60, 0x0a,
	0x0f, 0x56, 0x69, 0x72, 0x75, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x4d, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73,
	0x47, 0x65, 0x6e, 0x65, 0x42, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x65,
	0x2d, 0x12, 0x05, 0x47, 0x65, 0x6e, 0x65, 0x20, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x22,
	0xf4, 0x12, 0x0a, 0x0d, 0x56, 0x69, 0x72, 0x75, 0x73, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x12, 0x45, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xc2, 0xf3, 0x18, 0x23, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x32, 0x0b, 0x4e, 0x43, 0x5f, 0x30, 0x34, 0x35, 0x35, 0x31, 0x32, 0x2e, 0x32, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x20, 0x18,
	0x01, 0xc2, 0xf3, 0x18, 0x1a, 0x0a, 0x0b, 0x69, 0x73, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x0b, 0x49, 0x73, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x69,
	0x73, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c, 0x0a, 0x0c, 0x69, 0x73, 0x2d, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0c, 0x49, 0x73, 0x20, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x0b, 0x69, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x63, 0x0a, 0x07, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x56, 0x69, 0x72,
	0x75, 0x73, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2e, 0x49, 0x73, 0x6f, 0x6c, 0x61,
	0x74, 0x65, 0x42, 0x18, 0xc2, 0xf3, 0x18, 0x14, 0x0a, 0x08, 0x69, 0x73, 0x6f, 0x6c, 0x61, 0x74,
	0x65, 0x2d, 0x12, 0x08, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x20, 0x52, 0x07, 0x69, 0x73,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30,
	0xc2, 0xf3, 0x18, 0x2c, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x62, 0x12, 0x0f,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x32,
	0x06, 0x52, 0x65, 0x66, 0x53, 0x65, 0x71, 0x32, 0x07, 0x47, 0x65, 0x6e, 0x42, 0x61, 0x6e, 0x6b,
	0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x22, 0xc2, 0xf3, 0x18, 0x1e, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0d, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x69, 0x6e, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x12, 0xc2, 0xf3, 0x18,
	0x0e, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x2d, 0x12, 0x05, 0x48, 0x6f, 0x73, 0x74, 0x20, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x69, 0x72, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x42, 0x14, 0xc2, 0xf3, 0x18, 0x10, 0x0a, 0x06,
	0x76, 0x69, 0x72, 0x75, 0x73, 0x2d, 0x12, 0x06, 0x56, 0x69, 0x72, 0x75, 0x73, 0x20, 0x52, 0x05,
	0x76, 0x69, 0x72, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x42, 0x2b, 0xc2, 0xf3, 0x18, 0x27,
	0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x0b, 0x42,
	0x69, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x32, 0x0b, 0x50, 0x52, 0x4a, 0x4e,
	0x41, 0x34, 0x38, 0x35, 0x34, 0x38, 0x31, 0x52, 0x0b, 0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x6f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x17, 0xc2, 0xf3, 0x18, 0x13, 0x0a, 0x04, 0x67, 0x65, 0x6f, 0x2d, 0x12, 0x0b,
	0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x20, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a,
	0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xc2, 0xf3,
	0x18, 0x1c, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2d, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x0c, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x71, 0x0a, 0x17, 0x6e,
	0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0x18, 0x01,
	0xc2, 0xf3, 0x18, 0x32, 0x0a, 0x17, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65,
	0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x17, 0x4e,
	0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x16, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x7a,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x56, 0x69, 0x72, 0x75, 0x73, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0c,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x6c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xc2, 0xf3, 0x18, 0x10,
	0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x06, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1c, 0xc2, 0xf3,
	0x18, 0x18, 0x0a, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0a,
	0x47, 0x65, 0x6e, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x70, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x2c, 0xc2, 0xf3, 0x18, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x70, 0x65,
	0x70, 0x74, 0x69, 0x64, 0x65, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x4d, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x20, 0x70, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x12, 0x6d, 0x61, 0x74, 0x75, 0x72, 0x65, 0x50, 0x65, 0x70, 0x74, 0x69, 0x64, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x09, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0xc2, 0xf3, 0x18, 0x32, 0x0a, 0x0d,
	0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2d, 0x61, 0x63, 0x63, 0x12, 0x13, 0x42,
	0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x32, 0x0c, 0x53, 0x41, 0x4d, 0x4e, 0x31, 0x35, 0x33, 0x39, 0x34, 0x31, 0x32, 0x39,
	0x52, 0x09, 0x62, 0x69, 0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6d,
	0x6f, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc2,
	0xf3, 0x18, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x6c, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x4d,
	0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x6f,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x64, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0xc2, 0xf3, 0x18, 0x15, 0x0a, 0x06, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x2d, 0x12, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52,
	0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x6e,
	0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x46, 0x61, 0x73, 0x74, 0x61, 0x52, 0x0a, 0x6e, 0x75, 0x63,
	0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x12, 0x8b, 0x01, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x2e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4f, 0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x42, 0x2e, 0xc2, 0xf3, 0x18, 0x2a, 0x0a, 0x13, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x2d, 0x6f, 0x66, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x13, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x11, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4f, 0x66, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x72, 0x61, 0x5f, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0xc2,
	0xf3, 0x18, 0x1a, 0x0a, 0x08, 0x73, 0x72, 0x61, 0x2d, 0x61, 0x63, 0x63, 0x73, 0x12, 0x0e, 0x53,
	0x52, 0x41, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73,
	0x72, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xd8, 0x01, 0x0a,
	0x07, 0x49, 0x73, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xc2, 0xf3, 0x18, 0x12, 0x0a, 0x07, 0x6c, 0x69,
	0x6e, 0x65, 0x61, 0x67, 0x65, 0x12, 0x07, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x38, 0xc2, 0xf3, 0x18, 0x34, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x65,
	0x61, 0x67, 0x65, 0x2d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x4c, 0x69, 0x6e, 0x65,
	0x61, 0x67, 0x65, 0x20, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x05, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x32, 0x05, 0x66, 0x65, 0x63, 0x65, 0x73, 0x32, 0x04, 0x6c, 0x75, 0x6e, 0x67, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x26, 0xc2, 0xf3, 0x18, 0x22, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xc4, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56,
	0x0a, 0x13, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0xc2, 0xf3, 0x18,
	0x21, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x03, 0x55, 0x53, 0x41, 0x32, 0x06, 0x46, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x12, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x11, 0x67, 0x65, 0x6f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x29, 0xc2, 0xf3, 0x18, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x32, 0x04, 0x41, 0x73, 0x69, 0x61, 0x32, 0x0d, 0x4e,
	0x6f, 0x72, 0x74, 0x68, 0x20, 0x41, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x52, 0x10, 0x67, 0x65,
	0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x36,
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x11, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x4f, 0x66, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x1b, 0x50,
	0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29,
	0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x55, 0x52,
	0x56, 0x45, 0x49, 0x4c, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x42, 0x8c, 0x0a, 0x5a, 0x18,
	0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0xf8, 0x01, 0x01, 0xc2, 0xf3, 0x18, 0xea, 0x09,
	0x0a, 0x11, 0x56, 0x69, 0x72, 0x75, 0x73, 0x20, 0x44, 0x61, 0x74, 0x61, 0x20, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x0d, 0x56, 0x69, 0x72, 0x75, 0x73, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62,
	0x6c, 0x79, 0x1a, 0x3f, 0x3c, 0x70, 0x3e, 0x54, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x20, 0x76, 0x69, 0x72, 0x75, 0x73, 0x20, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x20, 0x76,
	0x69, 0x72, 0x75, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x20, 0x69, 0x6e, 0x1a, 0x3a, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e,
	0x72, 0x65, 0x61, 0x64, 0x74, 0x68, 0x65, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x22,
	0x3e, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x1a,
	0x4f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66,
	0x69, 0x6c, 0x65, 0x3a, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x65, 0x6d, 0x3e,
	0x6e, 0x63, 0x62, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6a, 0x73,
	0x6f, 0x6e, 0x6c, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e,
	0x1a, 0x6e, 0x45, 0x61, 0x63, 0x68, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x76, 0x69, 0x72, 0x75, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x68,
	0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x3c, 0x61, 0x20, 0x68,
	0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77,
	0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2d, 0x65,
	0x6e, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22, 0x3e, 0x4a, 0x53, 0x4f, 0x4e, 0x3c, 0x2f, 0x61, 0x3e,
	0x1a, 0x71, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x72, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x20, 0x76, 0x69, 0x72, 0x75, 0x73, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x20,
	0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x76, 0x69, 0x72, 0x75, 0x73, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x20, 0x69,
	0x73, 0x20, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x20, 0x77, 0x68,
	0x65, 0x72, 0x65, 0x1a, 0x64, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x6f, 0x77, 0x20, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f,
	0x66, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x1a, 0x44, 0x54, 0x68, 0x65, 0x20, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x20, 0x69, 0x73, 0x20, 0x3c, 0x65, 0x6d, 0x3e, 0x56, 0x69, 0x72, 0x75, 0x73, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x1a,
	0x51, 0x3c, 0x70, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x61, 0x20,
	0x3c, 0x65, 0x6d, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20,
	0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x20, 0x63, 0x61,
	0x6e, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74,
	0x68, 0x65, 0x1a, 0x66, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2f, 0x22, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c,
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x27, 0x73, 0x1a, 0x37, 0x3c, 0x6e, 0x6f, 0x62,
	0x72, 0x3e, 0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x2d, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x3c, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x3c, 0x2f, 0x6e, 0x6f, 0x62, 0x72, 0x3e, 0x20, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x1a, 0x6c, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x2f, 0x22, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x43, 0x4c, 0x49, 0x20, 0x74, 0x6f, 0x6f, 0x6c,
	0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65,
	0x65, 0x1a, 0x61, 0x68, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x75,
	0x73, 0x65, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x69, 0x72, 0x75, 0x73, 0x20,
	0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f,
	0x6d, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e,
	0x3c, 0x2f, 0x70, 0x3e, 0x22, 0x0b, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65,
	0x74, 0x2a, 0x96, 0x01, 0x7b, 0x7b, 0x3c, 0x20, 0x72, 0x65, 0x61, 0x64, 0x66, 0x69, 0x6c, 0x65,
	0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x6c, 0x61, 0x6e, 0x67,
	0x3d, 0x22, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x3d, 0x22, 0x2f, 0x64,
	0x6f, 0x63, 0x73, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x73, 0x61, 0x72, 0x73, 0x32, 0x2d, 0x76,
	0x69, 0x72, 0x75, 0x73, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x2e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x3d, 0x22, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x20, 0x65, 0x6e, 0x64, 0x3d, 0x22, 0x45, 0x4e, 0x44, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3e, 0x7d, 0x7d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_ncbi_datasets_v1_reports_virus_proto_rawDescOnce sync.Once
	file_ncbi_datasets_v1_reports_virus_proto_rawDescData = file_ncbi_datasets_v1_reports_virus_proto_rawDesc
)

func file_ncbi_datasets_v1_reports_virus_proto_rawDescGZIP() []byte {
	file_ncbi_datasets_v1_reports_virus_proto_rawDescOnce.Do(func() {
		file_ncbi_datasets_v1_reports_virus_proto_rawDescData = protoimpl.X.CompressGZIP(file_ncbi_datasets_v1_reports_virus_proto_rawDescData)
	})
	return file_ncbi_datasets_v1_reports_virus_proto_rawDescData
}

var file_ncbi_datasets_v1_reports_virus_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ncbi_datasets_v1_reports_virus_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_ncbi_datasets_v1_reports_virus_proto_goTypes = []interface{}{
	(PurposeOfSampling)(0),                   // 0: ncbi.datasets.v1.reports.PurposeOfSampling
	(VirusAssembly_Completeness)(0),          // 1: ncbi.datasets.v1.reports.VirusAssembly.Completeness
	(*ConservedDomain)(nil),                  // 2: ncbi.datasets.v1.reports.ConservedDomain
	(*SeqRangeSetFasta)(nil),                 // 3: ncbi.datasets.v1.reports.SeqRangeSetFasta
	(*VirusPeptide)(nil),                     // 4: ncbi.datasets.v1.reports.VirusPeptide
	(*VirusGene)(nil),                        // 5: ncbi.datasets.v1.reports.VirusGene
	(*VirusAnnotation)(nil),                  // 6: ncbi.datasets.v1.reports.VirusAnnotation
	(*VirusAssembly)(nil),                    // 7: ncbi.datasets.v1.reports.VirusAssembly
	(*VirusPeptide_UniProtId)(nil),           // 8: ncbi.datasets.v1.reports.VirusPeptide.UniProtId
	(*VirusAssembly_Isolate)(nil),            // 9: ncbi.datasets.v1.reports.VirusAssembly.Isolate
	(*VirusAssembly_CollectionLocation)(nil), // 10: ncbi.datasets.v1.reports.VirusAssembly.CollectionLocation
	(*Range)(nil),                            // 11: ncbi.datasets.v1.reports.Range
	(*Organism)(nil),                         // 12: ncbi.datasets.v1.reports.Organism
}
var file_ncbi_datasets_v1_reports_virus_proto_depIdxs = []int32{
	11, // 0: ncbi.datasets.v1.reports.ConservedDomain.range:type_name -> ncbi.datasets.v1.reports.Range
	11, // 1: ncbi.datasets.v1.reports.SeqRangeSetFasta.range:type_name -> ncbi.datasets.v1.reports.Range
	3,  // 2: ncbi.datasets.v1.reports.VirusPeptide.nucleotide:type_name -> ncbi.datasets.v1.reports.SeqRangeSetFasta
	3,  // 3: ncbi.datasets.v1.reports.VirusPeptide.protein:type_name -> ncbi.datasets.v1.reports.SeqRangeSetFasta
	2,  // 4: ncbi.datasets.v1.reports.VirusPeptide.cdd:type_name -> ncbi.datasets.v1.reports.ConservedDomain
	8,  // 5: ncbi.datasets.v1.reports.VirusPeptide.uni_prot_kb:type_name -> ncbi.datasets.v1.reports.VirusPeptide.UniProtId
	4,  // 6: ncbi.datasets.v1.reports.VirusPeptide.mature_peptide:type_name -> ncbi.datasets.v1.reports.VirusPeptide
	1,  // 7: ncbi.datasets.v1.reports.VirusPeptide.protein_completeness:type_name -> ncbi.datasets.v1.reports.VirusAssembly.Completeness
	3,  // 8: ncbi.datasets.v1.reports.VirusGene.nucleotide:type_name -> ncbi.datasets.v1.reports.SeqRangeSetFasta
	4,  // 9: ncbi.datasets.v1.reports.VirusGene.cds:type_name -> ncbi.datasets.v1.reports.VirusPeptide
	5,  // 10: ncbi.datasets.v1.reports.VirusAnnotation.genes:type_name -> ncbi.datasets.v1.reports.VirusGene
	9,  // 11: ncbi.datasets.v1.reports.VirusAssembly.isolate:type_name -> ncbi.datasets.v1.reports.VirusAssembly.Isolate
	12, // 12: ncbi.datasets.v1.reports.VirusAssembly.host:type_name -> ncbi.datasets.v1.reports.Organism
	12, // 13: ncbi.datasets.v1.reports.VirusAssembly.virus:type_name -> ncbi.datasets.v1.reports.Organism
	10, // 14: ncbi.datasets.v1.reports.VirusAssembly.location:type_name -> ncbi.datasets.v1.reports.VirusAssembly.CollectionLocation
	1,  // 15: ncbi.datasets.v1.reports.VirusAssembly.completeness:type_name -> ncbi.datasets.v1.reports.VirusAssembly.Completeness
	6,  // 16: ncbi.datasets.v1.reports.VirusAssembly.annotation:type_name -> ncbi.datasets.v1.reports.VirusAnnotation
	3,  // 17: ncbi.datasets.v1.reports.VirusAssembly.nucleotide:type_name -> ncbi.datasets.v1.reports.SeqRangeSetFasta
	0,  // 18: ncbi.datasets.v1.reports.VirusAssembly.purpose_of_sampling:type_name -> ncbi.datasets.v1.reports.PurposeOfSampling
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_ncbi_datasets_v1_reports_virus_proto_init() }
func file_ncbi_datasets_v1_reports_virus_proto_init() {
	if File_ncbi_datasets_v1_reports_virus_proto != nil {
		return
	}
	file_ncbi_datasets_v1_reports_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ncbi_datasets_v1_reports_virus_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConservedDomain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_virus_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SeqRangeSetFasta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_virus_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirusPeptide); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_virus_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirusGene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_virus_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirusAnnotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_virus_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirusAssembly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_virus_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirusPeptide_UniProtId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_virus_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirusAssembly_Isolate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_virus_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirusAssembly_CollectionLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ncbi_datasets_v1_reports_virus_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ncbi_datasets_v1_reports_virus_proto_goTypes,
		DependencyIndexes: file_ncbi_datasets_v1_reports_virus_proto_depIdxs,
		EnumInfos:         file_ncbi_datasets_v1_reports_virus_proto_enumTypes,
		MessageInfos:      file_ncbi_datasets_v1_reports_virus_proto_msgTypes,
	}.Build()
	File_ncbi_datasets_v1_reports_virus_proto = out.File
	file_ncbi_datasets_v1_reports_virus_proto_rawDesc = nil
	file_ncbi_datasets_v1_reports_virus_proto_goTypes = nil
	file_ncbi_datasets_v1_reports_virus_proto_depIdxs = nil
}
