// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: ncbi/datasets/v1/reports/prokaryote_gene.proto

package reports

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "ncbi/datasets/options"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProkaryoteGene struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The RefSeq WP_ prefixed accession for the protein sequence.
	Accession string `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	// The gene symbol
	GeneSymbol string `protobuf:"bytes,2,opt,name=gene_symbol,json=geneSymbol,proto3" json:"gene_symbol,omitempty"`
	// The protein name
	ProteinName string `protobuf:"bytes,3,opt,name=protein_name,json=proteinName,proto3" json:"protein_name,omitempty"`
	// Length of the protein
	ProteinLength uint32    `protobuf:"varint,4,opt,name=protein_length,json=proteinLength,proto3" json:"protein_length,omitempty"`
	TaxonomyScope *Organism `protobuf:"bytes,5,opt,name=taxonomy_scope,json=taxonomyScope,proto3" json:"taxonomy_scope,omitempty"`
	// The number of nucleotide mappings
	NumberOfGenomeMappings uint32                              `protobuf:"varint,6,opt,name=number_of_genome_mappings,json=numberOfGenomeMappings,proto3" json:"number_of_genome_mappings,omitempty"`
	ProteinNameEvidence    *ProkaryoteGene_ProteinNameEvidence `protobuf:"bytes,7,opt,name=protein_name_evidence,json=proteinNameEvidence,proto3" json:"protein_name_evidence,omitempty"`
	// Description
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
	// EC Number
	EcNumber []string `protobuf:"bytes,9,rep,name=ec_number,json=ecNumber,proto3" json:"ec_number,omitempty"`
}

func (x *ProkaryoteGene) Reset() {
	*x = ProkaryoteGene{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_prokaryote_gene_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProkaryoteGene) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProkaryoteGene) ProtoMessage() {}

func (x *ProkaryoteGene) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_prokaryote_gene_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProkaryoteGene.ProtoReflect.Descriptor instead.
func (*ProkaryoteGene) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDescGZIP(), []int{0}
}

func (x *ProkaryoteGene) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *ProkaryoteGene) GetGeneSymbol() string {
	if x != nil {
		return x.GeneSymbol
	}
	return ""
}

func (x *ProkaryoteGene) GetProteinName() string {
	if x != nil {
		return x.ProteinName
	}
	return ""
}

func (x *ProkaryoteGene) GetProteinLength() uint32 {
	if x != nil {
		return x.ProteinLength
	}
	return 0
}

func (x *ProkaryoteGene) GetTaxonomyScope() *Organism {
	if x != nil {
		return x.TaxonomyScope
	}
	return nil
}

func (x *ProkaryoteGene) GetNumberOfGenomeMappings() uint32 {
	if x != nil {
		return x.NumberOfGenomeMappings
	}
	return 0
}

func (x *ProkaryoteGene) GetProteinNameEvidence() *ProkaryoteGene_ProteinNameEvidence {
	if x != nil {
		return x.ProteinNameEvidence
	}
	return nil
}

func (x *ProkaryoteGene) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ProkaryoteGene) GetEcNumber() []string {
	if x != nil {
		return x.EcNumber
	}
	return nil
}

type ProkaryoteGene_ProteinNameEvidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Accession
	Accession string `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	// Catagory
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// Source
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ProkaryoteGene_ProteinNameEvidence) Reset() {
	*x = ProkaryoteGene_ProteinNameEvidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_prokaryote_gene_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProkaryoteGene_ProteinNameEvidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProkaryoteGene_ProteinNameEvidence) ProtoMessage() {}

func (x *ProkaryoteGene_ProteinNameEvidence) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_prokaryote_gene_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProkaryoteGene_ProteinNameEvidence.ProtoReflect.Descriptor instead.
func (*ProkaryoteGene_ProteinNameEvidence) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ProkaryoteGene_ProteinNameEvidence) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *ProkaryoteGene_ProteinNameEvidence) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *ProkaryoteGene_ProteinNameEvidence) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

var File_ncbi_datasets_v1_reports_prokaryote_gene_proto protoreflect.FileDescriptor

var file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x6b, 0x61,
	0x72, 0x79, 0x6f, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x25, 0x6e, 0x63, 0x62, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x22, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x08, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6b, 0x61, 0x72,
	0x79, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0xc2, 0xf3, 0x18,
	0x26, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0e, 0x57, 0x50, 0x5f, 0x30, 0x30, 0x30, 0x34,
	0x34, 0x33, 0x36, 0x36, 0x35, 0x2e, 0x31, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xc2, 0xf3, 0x18, 0x20, 0x0a, 0x0b, 0x67,
	0x65, 0x6e, 0x65, 0x2d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x0b, 0x47, 0x65, 0x6e, 0x65,
	0x20, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x32, 0x04, 0x6c, 0x69, 0x67, 0x41, 0x52, 0x0a, 0x67,
	0x65, 0x6e, 0x65, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x62, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x3f, 0xc2, 0xf3, 0x18, 0x3b, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x2d, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x20, 0x4e, 0x61, 0x6d,
	0x65, 0x32, 0x1d, 0x4e, 0x41, 0x44, 0x2d, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74,
	0x20, 0x44, 0x4e, 0x41, 0x20, 0x6c, 0x69, 0x67, 0x61, 0x73, 0x65, 0x20, 0x4c, 0x69, 0x67, 0x41,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x29, 0xc2, 0xf3, 0x18, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x2d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x0e, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x69, 0x6e, 0x20, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x32, 0x03, 0x36, 0x37, 0x31,
	0x52, 0x0d, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x49, 0x0a, 0x0e, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x52, 0x0d, 0x74, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x19, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x65, 0x5f, 0x6d,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x34, 0xc2,
	0xf3, 0x18, 0x30, 0x0a, 0x0d, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2d, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x19, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x47, 0x65,
	0x6e, 0x6f, 0x6d, 0x65, 0x20, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x32, 0x04, 0x37,
	0x36, 0x34, 0x32, 0x52, 0x16, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x47, 0x65, 0x6e,
	0x6f, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x15,
	0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6e, 0x63,
	0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79, 0x6f, 0x74,
	0x65, 0x47, 0x65, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x2b, 0xc2, 0xf3, 0x18, 0x27, 0x0a,
	0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x12,
	0x15, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x20, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x45, 0x76,
	0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0xa0, 0x01, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x7e, 0xc2, 0xf3, 0x18, 0x7a, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x32, 0x5e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x70, 0x68, 0x6f, 0x73, 0x70, 0x68, 0x6f, 0x64, 0x69, 0x65, 0x73, 0x74, 0x65, 0x72, 0x20, 0x61,
	0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x69, 0x74, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x61, 0x20,
	0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x2d, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x20, 0x69, 0x6e, 0x20, 0x64, 0x75, 0x70, 0x6c, 0x65, 0x78, 0x20, 0x44, 0x4e,
	0x41, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x09, 0x65, 0x63, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x23, 0xc2, 0xf3, 0x18, 0x1f, 0x0a, 0x09, 0x65, 0x63, 0x2d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x09, 0x45, 0x43, 0x20, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x32, 0x07, 0x36,
	0x2e, 0x35, 0x2e, 0x31, 0x2e, 0x32, 0x52, 0x08, 0x65, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0xe0, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xc2, 0xf3, 0x18,
	0x22, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0a, 0x4e, 0x46, 0x30, 0x30, 0x35, 0x39, 0x33,
	0x32, 0x2e, 0x31, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xc2, 0xf3, 0x18, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x32, 0x03, 0x48, 0x4d, 0x4d, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0xc2, 0xf3, 0x18, 0x2c, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32,
	0x1a, 0x4e, 0x43, 0x42, 0x49, 0x20, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x20, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x20, 0x28, 0x50, 0x52, 0x4b, 0x29, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x42, 0xde, 0x0a, 0x5a, 0x18, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0xf8, 0x01, 0x01, 0xc2, 0xf3, 0x18, 0xbc, 0x0a, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x6b, 0x61, 0x72,
	0x79, 0x6f, 0x74, 0x65, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x0e, 0x50, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x65,
	0x1a, 0x4e, 0x3c, 0x70, 0x3e, 0x54, 0x68, 0x65, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79, 0x6f, 0x74, 0x65, 0x20, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x20,
	0x61, 0x20, 0x70, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79, 0x6f, 0x74, 0x65, 0x20, 0x67, 0x65, 0x6e,
	0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x6e,
	0x1a, 0x3a, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61,
	0x64, 0x74, 0x68, 0x65, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x22, 0x3e, 0x4a, 0x53,
	0x4f, 0x4e, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x1a, 0x50, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65,
	0x3a, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x65, 0x6d, 0x3e, 0x20, 0x6e, 0x63,
	0x62, 0x69, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x6a, 0x73, 0x6f, 0x6e,
	0x6c, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x3c, 0x62, 0x72, 0x3e, 0x1a, 0x43,
	0x45, 0x61, 0x63, 0x68, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x70, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79, 0x6f, 0x74, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65,
	0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x66, 0x69, 0x6c,
	0x65, 0x20, 0x69, 0x73, 0x20, 0x61, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x69,
	0x63, 0x61, 0x6c, 0x1a, 0x34, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x2d, 0x65, 0x6e, 0x2e, 0x68, 0x74, 0x6d, 0x6c, 0x22,
	0x3e, 0x4a, 0x53, 0x4f, 0x4e, 0x3c, 0x2f, 0x61, 0x3e, 0x1a, 0x60, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6b, 0x61,
	0x72, 0x79, 0x6f, 0x74, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x20, 0x6f, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79, 0x6f, 0x74, 0x65, 0x20,
	0x67, 0x65, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x68, 0x69, 0x73, 0x20,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x62, 0x65, 0x6c, 0x6f, 0x77, 0x20, 0x77, 0x68, 0x65, 0x72,
	0x65, 0x20, 0x65, 0x61, 0x63, 0x68, 0x20, 0x72, 0x6f, 0x77, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x73, 0x20, 0x61, 0x20, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x73, 0x75, 0x62, 0x2d, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x2c, 0x1a, 0x66, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20,
	0x61, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x2e, 0x20, 0x54, 0x68, 0x65, 0x20, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20,
	0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x73,
	0x20, 0x3c, 0x65, 0x6d, 0x3e, 0x50, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79, 0x6f, 0x74, 0x65, 0x47,
	0x65, 0x6e, 0x65, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x1a, 0x51, 0x3c,
	0x70, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x20, 0x74,
	0x68, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x61, 0x20, 0x3c, 0x65,
	0x6d, 0x3e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x20, 0x4d, 0x6e,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x3c, 0x2f, 0x65, 0x6d, 0x3e, 0x20, 0x63, 0x61, 0x6e, 0x20,
	0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65,
	0x1a, 0x66, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x2f, 0x22, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e,
	0x65, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x27, 0x73, 0x1a, 0x37, 0x3c, 0x6e, 0x6f, 0x62, 0x72, 0x3e,
	0x3c, 0x63, 0x6f, 0x64, 0x65, 0x3e, 0x2d, 0x2d, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3c, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x3e, 0x3c, 0x2f, 0x6e, 0x6f, 0x62, 0x72, 0x3e, 0x20, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x52, 0x65, 0x66, 0x65, 0x72, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68,
	0x65, 0x1a, 0x74, 0x3c, 0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x64, 0x6f, 0x63, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2d, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x2f, 0x22, 0x3e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x3c, 0x2f, 0x61, 0x3e, 0x20, 0x43, 0x4c, 0x49, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x20, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x65, 0x65, 0x20,
	0x68, 0x6f, 0x77, 0x20, 0x79, 0x6f, 0x75, 0x1a, 0x63, 0x63, 0x61, 0x6e, 0x20, 0x75, 0x73, 0x65,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x6f, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x70, 0x72, 0x6f, 0x6b, 0x61, 0x72, 0x79, 0x6f,
	0x74, 0x65, 0x20, 0x67, 0x65, 0x6e, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x4c,
	0x69, 0x6e, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x20,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x22, 0x0b, 0x4f, 0x72,
	0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0b, 0x53, 0x65, 0x71, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x22, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x2a, 0x94, 0x01,
	0x7b, 0x7b, 0x3c, 0x20, 0x72, 0x65, 0x61, 0x64, 0x66, 0x69, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x64,
	0x65, 0x2d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x20, 0x6c, 0x61, 0x6e, 0x67, 0x3d, 0x22, 0x6a, 0x73,
	0x6f, 0x6e, 0x22, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x3d, 0x22, 0x2f, 0x64, 0x6f, 0x63, 0x73, 0x5f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2d, 0x63, 0x6c, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6b, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x2d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x63, 0x6c, 0x69, 0x2e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x22, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x3d, 0x22, 0x53, 0x54, 0x41, 0x52, 0x54, 0x20, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x20, 0x65, 0x6e, 0x64, 0x3d,
	0x22, 0x45, 0x4e, 0x44, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0x3e, 0x7d, 0x7d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDescOnce sync.Once
	file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDescData = file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDesc
)

func file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDescGZIP() []byte {
	file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDescOnce.Do(func() {
		file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDescData = protoimpl.X.CompressGZIP(file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDescData)
	})
	return file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDescData
}

var file_ncbi_datasets_v1_reports_prokaryote_gene_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ncbi_datasets_v1_reports_prokaryote_gene_proto_goTypes = []interface{}{
	(*ProkaryoteGene)(nil),                     // 0: ncbi.datasets.v1.reports.ProkaryoteGene
	(*ProkaryoteGene_ProteinNameEvidence)(nil), // 1: ncbi.datasets.v1.reports.ProkaryoteGene.ProteinNameEvidence
	(*Organism)(nil),                           // 2: ncbi.datasets.v1.reports.Organism
}
var file_ncbi_datasets_v1_reports_prokaryote_gene_proto_depIdxs = []int32{
	2, // 0: ncbi.datasets.v1.reports.ProkaryoteGene.taxonomy_scope:type_name -> ncbi.datasets.v1.reports.Organism
	1, // 1: ncbi.datasets.v1.reports.ProkaryoteGene.protein_name_evidence:type_name -> ncbi.datasets.v1.reports.ProkaryoteGene.ProteinNameEvidence
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_ncbi_datasets_v1_reports_prokaryote_gene_proto_init() }
func file_ncbi_datasets_v1_reports_prokaryote_gene_proto_init() {
	if File_ncbi_datasets_v1_reports_prokaryote_gene_proto != nil {
		return
	}
	file_ncbi_datasets_v1_reports_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ncbi_datasets_v1_reports_prokaryote_gene_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProkaryoteGene); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_prokaryote_gene_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProkaryoteGene_ProteinNameEvidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ncbi_datasets_v1_reports_prokaryote_gene_proto_goTypes,
		DependencyIndexes: file_ncbi_datasets_v1_reports_prokaryote_gene_proto_depIdxs,
		MessageInfos:      file_ncbi_datasets_v1_reports_prokaryote_gene_proto_msgTypes,
	}.Build()
	File_ncbi_datasets_v1_reports_prokaryote_gene_proto = out.File
	file_ncbi_datasets_v1_reports_prokaryote_gene_proto_rawDesc = nil
	file_ncbi_datasets_v1_reports_prokaryote_gene_proto_goTypes = nil
	file_ncbi_datasets_v1_reports_prokaryote_gene_proto_depIdxs = nil
}
