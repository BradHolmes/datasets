// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: ncbi/datasets/v1/reports/refgene_catalog.proto

package reports

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PathogenRefGeneCatalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allele            string       `protobuf:"bytes,1,opt,name=allele,proto3" json:"allele,omitempty"`
	GeneFamily        string       `protobuf:"bytes,2,opt,name=gene_family,json=geneFamily,proto3" json:"gene_family,omitempty"`
	WhitelistedTaxa   []string     `protobuf:"bytes,3,rep,name=whitelisted_taxa,json=whitelistedTaxa,proto3" json:"whitelisted_taxa,omitempty"`
	Organism          string       `protobuf:"bytes,4,opt,name=organism,proto3" json:"organism,omitempty"`
	ProductName       string       `protobuf:"bytes,5,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	Scope             string       `protobuf:"bytes,6,opt,name=scope,proto3" json:"scope,omitempty"`
	Type              string       `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Subtype           string       `protobuf:"bytes,8,opt,name=subtype,proto3" json:"subtype,omitempty"`
	Class             string       `protobuf:"bytes,9,opt,name=class,proto3" json:"class,omitempty"`
	Subclass          string       `protobuf:"bytes,10,opt,name=subclass,proto3" json:"subclass,omitempty"`
	RefseqNucleotide  *SeqRangeSet `protobuf:"bytes,11,opt,name=refseq_nucleotide,json=refseqNucleotide,proto3" json:"refseq_nucleotide,omitempty"`
	RefseqProtein     *SeqRangeSet `protobuf:"bytes,12,opt,name=refseq_protein,json=refseqProtein,proto3" json:"refseq_protein,omitempty"`
	GenbankNucleotide *SeqRangeSet `protobuf:"bytes,13,opt,name=genbank_nucleotide,json=genbankNucleotide,proto3" json:"genbank_nucleotide,omitempty"`
	GenbankProtein    *SeqRangeSet `protobuf:"bytes,14,opt,name=genbank_protein,json=genbankProtein,proto3" json:"genbank_protein,omitempty"`
	DbVersion         string       `protobuf:"bytes,15,opt,name=db_version,json=dbVersion,proto3" json:"db_version,omitempty"`
}

func (x *PathogenRefGeneCatalog) Reset() {
	*x = PathogenRefGeneCatalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_refgene_catalog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathogenRefGeneCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathogenRefGeneCatalog) ProtoMessage() {}

func (x *PathogenRefGeneCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_refgene_catalog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathogenRefGeneCatalog.ProtoReflect.Descriptor instead.
func (*PathogenRefGeneCatalog) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDescGZIP(), []int{0}
}

func (x *PathogenRefGeneCatalog) GetAllele() string {
	if x != nil {
		return x.Allele
	}
	return ""
}

func (x *PathogenRefGeneCatalog) GetGeneFamily() string {
	if x != nil {
		return x.GeneFamily
	}
	return ""
}

func (x *PathogenRefGeneCatalog) GetWhitelistedTaxa() []string {
	if x != nil {
		return x.WhitelistedTaxa
	}
	return nil
}

func (x *PathogenRefGeneCatalog) GetOrganism() string {
	if x != nil {
		return x.Organism
	}
	return ""
}

func (x *PathogenRefGeneCatalog) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *PathogenRefGeneCatalog) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *PathogenRefGeneCatalog) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PathogenRefGeneCatalog) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *PathogenRefGeneCatalog) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *PathogenRefGeneCatalog) GetSubclass() string {
	if x != nil {
		return x.Subclass
	}
	return ""
}

func (x *PathogenRefGeneCatalog) GetRefseqNucleotide() *SeqRangeSet {
	if x != nil {
		return x.RefseqNucleotide
	}
	return nil
}

func (x *PathogenRefGeneCatalog) GetRefseqProtein() *SeqRangeSet {
	if x != nil {
		return x.RefseqProtein
	}
	return nil
}

func (x *PathogenRefGeneCatalog) GetGenbankNucleotide() *SeqRangeSet {
	if x != nil {
		return x.GenbankNucleotide
	}
	return nil
}

func (x *PathogenRefGeneCatalog) GetGenbankProtein() *SeqRangeSet {
	if x != nil {
		return x.GenbankProtein
	}
	return nil
}

func (x *PathogenRefGeneCatalog) GetDbVersion() string {
	if x != nil {
		return x.DbVersion
	}
	return ""
}

var File_ncbi_datasets_v1_reports_refgene_catalog_proto protoreflect.FileDescriptor

var file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x72, 0x65, 0x66, 0x67, 0x65,
	0x6e, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x18, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x1a, 0x25, 0x6e, 0x63, 0x62, 0x69,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x98, 0x05, 0x0a, 0x16, 0x50, 0x61, 0x74, 0x68, 0x6f, 0x67, 0x65, 0x6e, 0x52, 0x65,
	0x66, 0x47, 0x65, 0x6e, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x5f, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x65, 0x6e, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x78, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x77, 0x68, 0x69, 0x74, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x54, 0x61, 0x78, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x5f,
	0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x52, 0x10, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71, 0x4e,
	0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x73, 0x65, 0x71, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53, 0x65, 0x71,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x73, 0x65, 0x71,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x54, 0x0a, 0x12, 0x67, 0x65, 0x6e, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x53,
	0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x52, 0x11, 0x67, 0x65, 0x6e, 0x62,
	0x61, 0x6e, 0x6b, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x6f, 0x74, 0x69, 0x64, 0x65, 0x12, 0x4e, 0x0a,
	0x0f, 0x67, 0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0e, 0x67,
	0x65, 0x6e, 0x62, 0x61, 0x6e, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x64, 0x62, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x64, 0x62, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x1d, 0x5a, 0x18,
	0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDescOnce sync.Once
	file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDescData = file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDesc
)

func file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDescGZIP() []byte {
	file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDescOnce.Do(func() {
		file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDescData = protoimpl.X.CompressGZIP(file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDescData)
	})
	return file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDescData
}

var file_ncbi_datasets_v1_reports_refgene_catalog_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_ncbi_datasets_v1_reports_refgene_catalog_proto_goTypes = []interface{}{
	(*PathogenRefGeneCatalog)(nil), // 0: ncbi.datasets.v1.reports.PathogenRefGeneCatalog
	(*SeqRangeSet)(nil),            // 1: ncbi.datasets.v1.reports.SeqRangeSet
}
var file_ncbi_datasets_v1_reports_refgene_catalog_proto_depIdxs = []int32{
	1, // 0: ncbi.datasets.v1.reports.PathogenRefGeneCatalog.refseq_nucleotide:type_name -> ncbi.datasets.v1.reports.SeqRangeSet
	1, // 1: ncbi.datasets.v1.reports.PathogenRefGeneCatalog.refseq_protein:type_name -> ncbi.datasets.v1.reports.SeqRangeSet
	1, // 2: ncbi.datasets.v1.reports.PathogenRefGeneCatalog.genbank_nucleotide:type_name -> ncbi.datasets.v1.reports.SeqRangeSet
	1, // 3: ncbi.datasets.v1.reports.PathogenRefGeneCatalog.genbank_protein:type_name -> ncbi.datasets.v1.reports.SeqRangeSet
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_ncbi_datasets_v1_reports_refgene_catalog_proto_init() }
func file_ncbi_datasets_v1_reports_refgene_catalog_proto_init() {
	if File_ncbi_datasets_v1_reports_refgene_catalog_proto != nil {
		return
	}
	file_ncbi_datasets_v1_reports_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ncbi_datasets_v1_reports_refgene_catalog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathogenRefGeneCatalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ncbi_datasets_v1_reports_refgene_catalog_proto_goTypes,
		DependencyIndexes: file_ncbi_datasets_v1_reports_refgene_catalog_proto_depIdxs,
		MessageInfos:      file_ncbi_datasets_v1_reports_refgene_catalog_proto_msgTypes,
	}.Build()
	File_ncbi_datasets_v1_reports_refgene_catalog_proto = out.File
	file_ncbi_datasets_v1_reports_refgene_catalog_proto_rawDesc = nil
	file_ncbi_datasets_v1_reports_refgene_catalog_proto_goTypes = nil
	file_ncbi_datasets_v1_reports_refgene_catalog_proto_depIdxs = nil
}
