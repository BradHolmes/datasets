// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.14.0
// source: ncbi/datasets/v1/reports/biosample.proto

package reports

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "ncbi/datasets/options"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BioSampleDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accession       string                `protobuf:"bytes,1,opt,name=accession,proto3" json:"accession,omitempty"`
	LastUpdated     string                `protobuf:"bytes,2,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	PublicationDate string                `protobuf:"bytes,3,opt,name=publication_date,json=publicationDate,proto3" json:"publication_date,omitempty"`
	SubmissionDate  string                `protobuf:"bytes,4,opt,name=submission_date,json=submissionDate,proto3" json:"submission_date,omitempty"`
	SampleIds       []*BioSampleId        `protobuf:"bytes,5,rep,name=sample_ids,json=sampleIds,proto3" json:"sample_ids,omitempty"`
	Description     *BioSampleDescription `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	Owner           *BioSampleOwner       `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	Models          []string              `protobuf:"bytes,8,rep,name=models,proto3" json:"models,omitempty"`
	Bioprojects     []*BioProject         `protobuf:"bytes,9,rep,name=bioprojects,proto3" json:"bioprojects,omitempty"`
	Package         string                `protobuf:"bytes,10,opt,name=package,proto3" json:"package,omitempty"`
	Attributes      []*BioSampleAttribute `protobuf:"bytes,11,rep,name=attributes,proto3" json:"attributes,omitempty"`
	Status          *BioSampleStatus      `protobuf:"bytes,12,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *BioSampleDescriptor) Reset() {
	*x = BioSampleDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioSampleDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioSampleDescriptor) ProtoMessage() {}

func (x *BioSampleDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioSampleDescriptor.ProtoReflect.Descriptor instead.
func (*BioSampleDescriptor) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_biosample_proto_rawDescGZIP(), []int{0}
}

func (x *BioSampleDescriptor) GetAccession() string {
	if x != nil {
		return x.Accession
	}
	return ""
}

func (x *BioSampleDescriptor) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *BioSampleDescriptor) GetPublicationDate() string {
	if x != nil {
		return x.PublicationDate
	}
	return ""
}

func (x *BioSampleDescriptor) GetSubmissionDate() string {
	if x != nil {
		return x.SubmissionDate
	}
	return ""
}

func (x *BioSampleDescriptor) GetSampleIds() []*BioSampleId {
	if x != nil {
		return x.SampleIds
	}
	return nil
}

func (x *BioSampleDescriptor) GetDescription() *BioSampleDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *BioSampleDescriptor) GetOwner() *BioSampleOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *BioSampleDescriptor) GetModels() []string {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *BioSampleDescriptor) GetBioprojects() []*BioProject {
	if x != nil {
		return x.Bioprojects
	}
	return nil
}

func (x *BioSampleDescriptor) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *BioSampleDescriptor) GetAttributes() []*BioSampleAttribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *BioSampleDescriptor) GetStatus() *BioSampleStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type BioSampleDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Organism *Organism `protobuf:"bytes,2,opt,name=organism,proto3" json:"organism,omitempty"`
	Comment  string    `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *BioSampleDescription) Reset() {
	*x = BioSampleDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioSampleDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioSampleDescription) ProtoMessage() {}

func (x *BioSampleDescription) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioSampleDescription.ProtoReflect.Descriptor instead.
func (*BioSampleDescription) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_biosample_proto_rawDescGZIP(), []int{1}
}

func (x *BioSampleDescription) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *BioSampleDescription) GetOrganism() *Organism {
	if x != nil {
		return x.Organism
	}
	return nil
}

func (x *BioSampleDescription) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type BioSampleOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Contacts []*BioSampleContact `protobuf:"bytes,2,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *BioSampleOwner) Reset() {
	*x = BioSampleOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioSampleOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioSampleOwner) ProtoMessage() {}

func (x *BioSampleOwner) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioSampleOwner.ProtoReflect.Descriptor instead.
func (*BioSampleOwner) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_biosample_proto_rawDescGZIP(), []int{2}
}

func (x *BioSampleOwner) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BioSampleOwner) GetContacts() []*BioSampleContact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

type BioSampleContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lab string `protobuf:"bytes,1,opt,name=lab,proto3" json:"lab,omitempty"`
}

func (x *BioSampleContact) Reset() {
	*x = BioSampleContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioSampleContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioSampleContact) ProtoMessage() {}

func (x *BioSampleContact) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioSampleContact.ProtoReflect.Descriptor instead.
func (*BioSampleContact) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_biosample_proto_rawDescGZIP(), []int{3}
}

func (x *BioSampleContact) GetLab() string {
	if x != nil {
		return x.Lab
	}
	return ""
}

type BioSampleAttribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BioSampleAttribute) Reset() {
	*x = BioSampleAttribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioSampleAttribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioSampleAttribute) ProtoMessage() {}

func (x *BioSampleAttribute) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioSampleAttribute.ProtoReflect.Descriptor instead.
func (*BioSampleAttribute) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_biosample_proto_rawDescGZIP(), []int{4}
}

func (x *BioSampleAttribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BioSampleAttribute) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BioSampleId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Db    string `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BioSampleId) Reset() {
	*x = BioSampleId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioSampleId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioSampleId) ProtoMessage() {}

func (x *BioSampleId) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioSampleId.ProtoReflect.Descriptor instead.
func (*BioSampleId) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_biosample_proto_rawDescGZIP(), []int{5}
}

func (x *BioSampleId) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *BioSampleId) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BioSampleId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type BioSampleStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	When   string `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
}

func (x *BioSampleStatus) Reset() {
	*x = BioSampleStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BioSampleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BioSampleStatus) ProtoMessage() {}

func (x *BioSampleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BioSampleStatus.ProtoReflect.Descriptor instead.
func (*BioSampleStatus) Descriptor() ([]byte, []int) {
	return file_ncbi_datasets_v1_reports_biosample_proto_rawDescGZIP(), []int{6}
}

func (x *BioSampleStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BioSampleStatus) GetWhen() string {
	if x != nil {
		return x.When
	}
	return ""
}

var File_ncbi_datasets_v1_reports_biosample_proto protoreflect.FileDescriptor

var file_ncbi_datasets_v1_reports_biosample_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x62, 0x69, 0x6f, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x6e, 0x63, 0x62, 0x69,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x1a, 0x25, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x6e, 0x63, 0x62,
	0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x99, 0x08, 0x0a, 0x13, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28, 0xc2, 0xf3, 0x18, 0x24,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x09, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x0c, 0x53, 0x41, 0x4d, 0x4e, 0x32, 0x30, 0x30, 0x35,
	0x35, 0x30, 0x30, 0x36, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x28,
	0xc2, 0xf3, 0x18, 0x24, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x26, 0xc2, 0xf3, 0x18, 0x22, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x64, 0x42, 0x1f, 0xc2, 0xf3, 0x18, 0x1b, 0x0a, 0x04, 0x69, 0x64, 0x73,
	0x2d, 0x12, 0x13, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x20, 0x52, 0x09, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x72, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x2e, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x20, 0xc2, 0xf3, 0x18, 0x1c, 0x0a, 0x0c, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x12, 0x0c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e,
	0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x42, 0x14,
	0xc2, 0xf3, 0x18, 0x10, 0x0a, 0x06, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x2d, 0x12, 0x06, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x20, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14, 0xc2, 0xf3, 0x18,
	0x10, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x06, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x66, 0x0a, 0x0b, 0x62, 0x69, 0x6f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x42, 0x69, 0x6f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x42, 0x1e, 0xc2, 0xf3, 0x18, 0x1a, 0x0a, 0x0b, 0x62, 0x69, 0x6f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x12, 0x0b, 0x42, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x20, 0x52, 0x0b, 0x62, 0x69, 0x6f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x41, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x27, 0xc2, 0xf3, 0x18, 0x23, 0x0a, 0x07, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x32, 0x0f, 0x4d, 0x49, 0x47, 0x53,
	0x2e, 0x62, 0x61, 0x2e, 0x61, 0x69, 0x72, 0x2e, 0x34, 0x2e, 0x30, 0x52, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x12, 0x6a, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x2e, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x42, 0x1c, 0xc2, 0xf3, 0x18, 0x18, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x2d, 0x12, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x20, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x59, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x42, 0x69, 0x6f, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x16, 0xc2, 0xf3, 0x18,
	0x12, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2d, 0x12, 0x07, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x20, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x14,
	0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x5a,
	0x0a, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x2e, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x42, 0x1a, 0xc2, 0xf3, 0x18, 0x16, 0x0a, 0x09, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x6d, 0x2d, 0x12, 0x09, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x20,
	0x52, 0x08, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xc2, 0xf3, 0x18,
	0x12, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x07, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x98, 0x01, 0x0a,
	0x0e, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xc2,
	0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x63, 0x62, 0x69, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x2e, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x42, 0x18, 0xc2, 0xf3, 0x18, 0x14, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x2d, 0x12, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x10, 0x42, 0x69, 0x6f, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x6c,
	0x61, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xc2, 0xf3, 0x18, 0x0a, 0x0a, 0x03,
	0x6c, 0x61, 0x62, 0x12, 0x03, 0x4c, 0x61, 0x62, 0x52, 0x03, 0x6c, 0x61, 0x62, 0x22, 0x64, 0x0a,
	0x12, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x10, 0xc2, 0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xc2, 0xf3, 0x18, 0x0e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x0b, 0x42, 0x69, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2d, 0xc2, 0xf3, 0x18, 0x29, 0x0a, 0x02, 0x64, 0x62, 0x12, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x32, 0x19, 0x57, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x53, 0x61,
	0x6e, 0x67, 0x65, 0x72, 0x20, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x65, 0x52, 0x02,
	0x64, 0x62, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1f, 0xc2, 0xf3, 0x18, 0x1b, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x32, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xc2, 0xf3, 0x18, 0x23, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x13, 0x43, 0x4f,
	0x47, 0x2d, 0x55, 0x4b, 0x2f, 0x41, 0x4c, 0x44, 0x50, 0x2d, 0x31, 0x37, 0x41, 0x36, 0x41, 0x38,
	0x43, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6b, 0x0a, 0x0f, 0x42, 0x69, 0x6f, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xc2, 0xf3, 0x18,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x04, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xc2,
	0xf3, 0x18, 0x0c, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x04, 0x57, 0x68, 0x65, 0x6e, 0x52,
	0x04, 0x77, 0x68, 0x65, 0x6e, 0x42, 0x83, 0x02, 0x5a, 0x18, 0x6e, 0x63, 0x62, 0x69, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0xf8, 0x01, 0x01, 0xc2, 0xf3, 0x18, 0xe1, 0x01, 0x0a, 0x10, 0x42, 0x69, 0x6f, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x13, 0x42, 0x69,
	0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x1a, 0x56, 0x3c, 0x70, 0x3e, 0x4e, 0x43, 0x42, 0x49, 0x20, 0x42, 0x69, 0x6f, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x69, 0x6e, 0x3c,
	0x61, 0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x22, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x74, 0x68,
	0x65, 0x64, 0x6f, 0x63, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x22, 0x3e, 0x4a, 0x53, 0x4f, 0x4e, 0x20,
	0x4c, 0x69, 0x6e, 0x65, 0x73, 0x3c, 0x2f, 0x61, 0x3e, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x2e, 0x20, 0x54, 0x68, 0x69, 0x73, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x69, 0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x2e, 0x3c, 0x2f, 0x70, 0x3e, 0x22, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x0b, 0x53, 0x65, 0x71, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x65, 0x74, 0x22, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x0f, 0x4c, 0x69, 0x6e, 0x65,
	0x61, 0x67, 0x65, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_ncbi_datasets_v1_reports_biosample_proto_rawDescOnce sync.Once
	file_ncbi_datasets_v1_reports_biosample_proto_rawDescData = file_ncbi_datasets_v1_reports_biosample_proto_rawDesc
)

func file_ncbi_datasets_v1_reports_biosample_proto_rawDescGZIP() []byte {
	file_ncbi_datasets_v1_reports_biosample_proto_rawDescOnce.Do(func() {
		file_ncbi_datasets_v1_reports_biosample_proto_rawDescData = protoimpl.X.CompressGZIP(file_ncbi_datasets_v1_reports_biosample_proto_rawDescData)
	})
	return file_ncbi_datasets_v1_reports_biosample_proto_rawDescData
}

var file_ncbi_datasets_v1_reports_biosample_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_ncbi_datasets_v1_reports_biosample_proto_goTypes = []interface{}{
	(*BioSampleDescriptor)(nil),  // 0: ncbi.datasets.v1.reports.BioSampleDescriptor
	(*BioSampleDescription)(nil), // 1: ncbi.datasets.v1.reports.BioSampleDescription
	(*BioSampleOwner)(nil),       // 2: ncbi.datasets.v1.reports.BioSampleOwner
	(*BioSampleContact)(nil),     // 3: ncbi.datasets.v1.reports.BioSampleContact
	(*BioSampleAttribute)(nil),   // 4: ncbi.datasets.v1.reports.BioSampleAttribute
	(*BioSampleId)(nil),          // 5: ncbi.datasets.v1.reports.BioSampleId
	(*BioSampleStatus)(nil),      // 6: ncbi.datasets.v1.reports.BioSampleStatus
	(*BioProject)(nil),           // 7: ncbi.datasets.v1.reports.BioProject
	(*Organism)(nil),             // 8: ncbi.datasets.v1.reports.Organism
}
var file_ncbi_datasets_v1_reports_biosample_proto_depIdxs = []int32{
	5, // 0: ncbi.datasets.v1.reports.BioSampleDescriptor.sample_ids:type_name -> ncbi.datasets.v1.reports.BioSampleId
	1, // 1: ncbi.datasets.v1.reports.BioSampleDescriptor.description:type_name -> ncbi.datasets.v1.reports.BioSampleDescription
	2, // 2: ncbi.datasets.v1.reports.BioSampleDescriptor.owner:type_name -> ncbi.datasets.v1.reports.BioSampleOwner
	7, // 3: ncbi.datasets.v1.reports.BioSampleDescriptor.bioprojects:type_name -> ncbi.datasets.v1.reports.BioProject
	4, // 4: ncbi.datasets.v1.reports.BioSampleDescriptor.attributes:type_name -> ncbi.datasets.v1.reports.BioSampleAttribute
	6, // 5: ncbi.datasets.v1.reports.BioSampleDescriptor.status:type_name -> ncbi.datasets.v1.reports.BioSampleStatus
	8, // 6: ncbi.datasets.v1.reports.BioSampleDescription.organism:type_name -> ncbi.datasets.v1.reports.Organism
	3, // 7: ncbi.datasets.v1.reports.BioSampleOwner.contacts:type_name -> ncbi.datasets.v1.reports.BioSampleContact
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_ncbi_datasets_v1_reports_biosample_proto_init() }
func file_ncbi_datasets_v1_reports_biosample_proto_init() {
	if File_ncbi_datasets_v1_reports_biosample_proto != nil {
		return
	}
	file_ncbi_datasets_v1_reports_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioSampleDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioSampleDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioSampleOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioSampleContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioSampleAttribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioSampleId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ncbi_datasets_v1_reports_biosample_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BioSampleStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ncbi_datasets_v1_reports_biosample_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ncbi_datasets_v1_reports_biosample_proto_goTypes,
		DependencyIndexes: file_ncbi_datasets_v1_reports_biosample_proto_depIdxs,
		MessageInfos:      file_ncbi_datasets_v1_reports_biosample_proto_msgTypes,
	}.Build()
	File_ncbi_datasets_v1_reports_biosample_proto = out.File
	file_ncbi_datasets_v1_reports_biosample_proto_rawDesc = nil
	file_ncbi_datasets_v1_reports_biosample_proto_goTypes = nil
	file_ncbi_datasets_v1_reports_biosample_proto_depIdxs = nil
}
