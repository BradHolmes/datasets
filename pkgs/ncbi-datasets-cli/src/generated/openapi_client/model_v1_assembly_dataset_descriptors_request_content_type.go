/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1AssemblyDatasetDescriptorsRequestContentType the model 'V1AssemblyDatasetDescriptorsRequestContentType'
type V1AssemblyDatasetDescriptorsRequestContentType string

// List of v1AssemblyDatasetDescriptorsRequestContentType
const (
	V1ASSEMBLYDATASETDESCRIPTORSREQUESTCONTENTTYPE_COMPLETE V1AssemblyDatasetDescriptorsRequestContentType = "COMPLETE"
	V1ASSEMBLYDATASETDESCRIPTORSREQUESTCONTENTTYPE_ASSM_ACC V1AssemblyDatasetDescriptorsRequestContentType = "ASSM_ACC"
	V1ASSEMBLYDATASETDESCRIPTORSREQUESTCONTENTTYPE_COUNTS V1AssemblyDatasetDescriptorsRequestContentType = "COUNTS"
)

var allowedV1AssemblyDatasetDescriptorsRequestContentTypeEnumValues = []V1AssemblyDatasetDescriptorsRequestContentType{
	"COMPLETE",
	"ASSM_ACC",
	"COUNTS",
}

func (v *V1AssemblyDatasetDescriptorsRequestContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1AssemblyDatasetDescriptorsRequestContentType(value)
	for _, existing := range allowedV1AssemblyDatasetDescriptorsRequestContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1AssemblyDatasetDescriptorsRequestContentType", value)
}

// NewV1AssemblyDatasetDescriptorsRequestContentTypeFromValue returns a pointer to a valid V1AssemblyDatasetDescriptorsRequestContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1AssemblyDatasetDescriptorsRequestContentTypeFromValue(v string) (*V1AssemblyDatasetDescriptorsRequestContentType, error) {
	ev := V1AssemblyDatasetDescriptorsRequestContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1AssemblyDatasetDescriptorsRequestContentType: valid values are %v", v, allowedV1AssemblyDatasetDescriptorsRequestContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1AssemblyDatasetDescriptorsRequestContentType) IsValid() bool {
	for _, existing := range allowedV1AssemblyDatasetDescriptorsRequestContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1AssemblyDatasetDescriptorsRequestContentType value
func (v V1AssemblyDatasetDescriptorsRequestContentType) Ptr() *V1AssemblyDatasetDescriptorsRequestContentType {
	return &v
}

type NullableV1AssemblyDatasetDescriptorsRequestContentType struct {
	value *V1AssemblyDatasetDescriptorsRequestContentType
	isSet bool
}

func (v NullableV1AssemblyDatasetDescriptorsRequestContentType) Get() *V1AssemblyDatasetDescriptorsRequestContentType {
	return v.value
}

func (v *NullableV1AssemblyDatasetDescriptorsRequestContentType) Set(val *V1AssemblyDatasetDescriptorsRequestContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AssemblyDatasetDescriptorsRequestContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AssemblyDatasetDescriptorsRequestContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AssemblyDatasetDescriptorsRequestContentType(val *V1AssemblyDatasetDescriptorsRequestContentType) *NullableV1AssemblyDatasetDescriptorsRequestContentType {
	return &NullableV1AssemblyDatasetDescriptorsRequestContentType{value: val, isSet: true}
}

func (v NullableV1AssemblyDatasetDescriptorsRequestContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AssemblyDatasetDescriptorsRequestContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

