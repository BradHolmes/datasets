/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsAnnotation struct for V1reportsAnnotation
type V1reportsAnnotation struct {
	ReleaseName *string `json:"release_name,omitempty"`
	ReleaseDate *string `json:"release_date,omitempty"`
	AssembliesInScope *[]V1reportsAnnotatedAssemblies `json:"assemblies_in_scope,omitempty"`
}

// NewV1reportsAnnotation instantiates a new V1reportsAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsAnnotation() *V1reportsAnnotation {
	this := V1reportsAnnotation{}
	return &this
}

// NewV1reportsAnnotationWithDefaults instantiates a new V1reportsAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsAnnotationWithDefaults() *V1reportsAnnotation {
	this := V1reportsAnnotation{}
	return &this
}

// GetReleaseName returns the ReleaseName field value if set, zero value otherwise.
func (o *V1reportsAnnotation) GetReleaseName() string {
	if o == nil || o.ReleaseName == nil {
		var ret string
		return ret
	}
	return *o.ReleaseName
}

// GetReleaseNameOk returns a tuple with the ReleaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAnnotation) GetReleaseNameOk() (*string, bool) {
	if o == nil || o.ReleaseName == nil {
		return nil, false
	}
	return o.ReleaseName, true
}

// HasReleaseName returns a boolean if a field has been set.
func (o *V1reportsAnnotation) HasReleaseName() bool {
	if o != nil && o.ReleaseName != nil {
		return true
	}

	return false
}

// SetReleaseName gets a reference to the given string and assigns it to the ReleaseName field.
func (o *V1reportsAnnotation) SetReleaseName(v string) {
	o.ReleaseName = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *V1reportsAnnotation) GetReleaseDate() string {
	if o == nil || o.ReleaseDate == nil {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAnnotation) GetReleaseDateOk() (*string, bool) {
	if o == nil || o.ReleaseDate == nil {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *V1reportsAnnotation) HasReleaseDate() bool {
	if o != nil && o.ReleaseDate != nil {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *V1reportsAnnotation) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetAssembliesInScope returns the AssembliesInScope field value if set, zero value otherwise.
func (o *V1reportsAnnotation) GetAssembliesInScope() []V1reportsAnnotatedAssemblies {
	if o == nil || o.AssembliesInScope == nil {
		var ret []V1reportsAnnotatedAssemblies
		return ret
	}
	return *o.AssembliesInScope
}

// GetAssembliesInScopeOk returns a tuple with the AssembliesInScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAnnotation) GetAssembliesInScopeOk() (*[]V1reportsAnnotatedAssemblies, bool) {
	if o == nil || o.AssembliesInScope == nil {
		return nil, false
	}
	return o.AssembliesInScope, true
}

// HasAssembliesInScope returns a boolean if a field has been set.
func (o *V1reportsAnnotation) HasAssembliesInScope() bool {
	if o != nil && o.AssembliesInScope != nil {
		return true
	}

	return false
}

// SetAssembliesInScope gets a reference to the given []V1reportsAnnotatedAssemblies and assigns it to the AssembliesInScope field.
func (o *V1reportsAnnotation) SetAssembliesInScope(v []V1reportsAnnotatedAssemblies) {
	o.AssembliesInScope = &v
}

func (o V1reportsAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReleaseName != nil  {
		toSerialize["release_name"] = o.ReleaseName
	}
	if o.ReleaseDate != nil  {
		toSerialize["release_date"] = o.ReleaseDate
	}
	if o.AssembliesInScope != nil && len(o.GetAssembliesInScope()) > 0  {
		toSerialize["assemblies_in_scope"] = o.AssembliesInScope
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsAnnotation struct {
	value *V1reportsAnnotation
	isSet bool
}

func (v NullableV1reportsAnnotation) Get() *V1reportsAnnotation {
	return v.value
}

func (v *NullableV1reportsAnnotation) Set(val *V1reportsAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsAnnotation(val *V1reportsAnnotation) *NullableV1reportsAnnotation {
	return &NullableV1reportsAnnotation{value: val, isSet: true}
}

func (v NullableV1reportsAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


