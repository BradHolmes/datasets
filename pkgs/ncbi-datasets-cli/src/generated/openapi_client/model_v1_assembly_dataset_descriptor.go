/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 1 API is considred stable and will not be subject to breaking changes. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1AssemblyDatasetDescriptor struct for V1AssemblyDatasetDescriptor
type V1AssemblyDatasetDescriptor struct {
	AssemblyAccession *string `json:"assembly_accession,omitempty"`
	PairedAssemblyAccession *string `json:"paired_assembly_accession,omitempty"`
	BioprojectLineages *[]V1BioProjectLineage `json:"bioproject_lineages,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Org *V1Organism `json:"org,omitempty"`
	Chromosomes *[]V1AssemblyDatasetDescriptorChromosome `json:"chromosomes,omitempty"`
	AssemblyCategory *string `json:"assembly_category,omitempty"`
	AnnotationMetadata *V1AnnotationForAssembly `json:"annotation_metadata,omitempty"`
	AssemblyLevel *string `json:"assembly_level,omitempty"`
	Submitter *string `json:"submitter,omitempty"`
	SubmissionDate *string `json:"submission_date,omitempty"`
	ContigN50 *int32 `json:"contig_n50,omitempty"`
	EstimatedSize *string `json:"estimated_size,omitempty"`
	SeqLength *string `json:"seq_length,omitempty"`
	BiosampleAccession *string `json:"biosample_accession,omitempty"`
	Biosample *V1reportsBioSampleDescriptor `json:"biosample,omitempty"`
	BlastUrl *string `json:"blast_url,omitempty"`
	GcCount *string `json:"gc_count,omitempty"`
}

// NewV1AssemblyDatasetDescriptor instantiates a new V1AssemblyDatasetDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AssemblyDatasetDescriptor() *V1AssemblyDatasetDescriptor {
	this := V1AssemblyDatasetDescriptor{}
	return &this
}

// NewV1AssemblyDatasetDescriptorWithDefaults instantiates a new V1AssemblyDatasetDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AssemblyDatasetDescriptorWithDefaults() *V1AssemblyDatasetDescriptor {
	this := V1AssemblyDatasetDescriptor{}
	return &this
}

// GetAssemblyAccession returns the AssemblyAccession field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetAssemblyAccession() string {
	if o == nil || o.AssemblyAccession == nil {
		var ret string
		return ret
	}
	return *o.AssemblyAccession
}

// GetAssemblyAccessionOk returns a tuple with the AssemblyAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetAssemblyAccessionOk() (*string, bool) {
	if o == nil || o.AssemblyAccession == nil {
		return nil, false
	}
	return o.AssemblyAccession, true
}

// HasAssemblyAccession returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasAssemblyAccession() bool {
	if o != nil && o.AssemblyAccession != nil {
		return true
	}

	return false
}

// SetAssemblyAccession gets a reference to the given string and assigns it to the AssemblyAccession field.
func (o *V1AssemblyDatasetDescriptor) SetAssemblyAccession(v string) {
	o.AssemblyAccession = &v
}

// GetPairedAssemblyAccession returns the PairedAssemblyAccession field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetPairedAssemblyAccession() string {
	if o == nil || o.PairedAssemblyAccession == nil {
		var ret string
		return ret
	}
	return *o.PairedAssemblyAccession
}

// GetPairedAssemblyAccessionOk returns a tuple with the PairedAssemblyAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetPairedAssemblyAccessionOk() (*string, bool) {
	if o == nil || o.PairedAssemblyAccession == nil {
		return nil, false
	}
	return o.PairedAssemblyAccession, true
}

// HasPairedAssemblyAccession returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasPairedAssemblyAccession() bool {
	if o != nil && o.PairedAssemblyAccession != nil {
		return true
	}

	return false
}

// SetPairedAssemblyAccession gets a reference to the given string and assigns it to the PairedAssemblyAccession field.
func (o *V1AssemblyDatasetDescriptor) SetPairedAssemblyAccession(v string) {
	o.PairedAssemblyAccession = &v
}

// GetBioprojectLineages returns the BioprojectLineages field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetBioprojectLineages() []V1BioProjectLineage {
	if o == nil || o.BioprojectLineages == nil {
		var ret []V1BioProjectLineage
		return ret
	}
	return *o.BioprojectLineages
}

// GetBioprojectLineagesOk returns a tuple with the BioprojectLineages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetBioprojectLineagesOk() (*[]V1BioProjectLineage, bool) {
	if o == nil || o.BioprojectLineages == nil {
		return nil, false
	}
	return o.BioprojectLineages, true
}

// HasBioprojectLineages returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasBioprojectLineages() bool {
	if o != nil && o.BioprojectLineages != nil {
		return true
	}

	return false
}

// SetBioprojectLineages gets a reference to the given []V1BioProjectLineage and assigns it to the BioprojectLineages field.
func (o *V1AssemblyDatasetDescriptor) SetBioprojectLineages(v []V1BioProjectLineage) {
	o.BioprojectLineages = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *V1AssemblyDatasetDescriptor) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetOrg() V1Organism {
	if o == nil || o.Org == nil {
		var ret V1Organism
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetOrgOk() (*V1Organism, bool) {
	if o == nil || o.Org == nil {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasOrg() bool {
	if o != nil && o.Org != nil {
		return true
	}

	return false
}

// SetOrg gets a reference to the given V1Organism and assigns it to the Org field.
func (o *V1AssemblyDatasetDescriptor) SetOrg(v V1Organism) {
	o.Org = &v
}

// GetChromosomes returns the Chromosomes field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetChromosomes() []V1AssemblyDatasetDescriptorChromosome {
	if o == nil || o.Chromosomes == nil {
		var ret []V1AssemblyDatasetDescriptorChromosome
		return ret
	}
	return *o.Chromosomes
}

// GetChromosomesOk returns a tuple with the Chromosomes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetChromosomesOk() (*[]V1AssemblyDatasetDescriptorChromosome, bool) {
	if o == nil || o.Chromosomes == nil {
		return nil, false
	}
	return o.Chromosomes, true
}

// HasChromosomes returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasChromosomes() bool {
	if o != nil && o.Chromosomes != nil {
		return true
	}

	return false
}

// SetChromosomes gets a reference to the given []V1AssemblyDatasetDescriptorChromosome and assigns it to the Chromosomes field.
func (o *V1AssemblyDatasetDescriptor) SetChromosomes(v []V1AssemblyDatasetDescriptorChromosome) {
	o.Chromosomes = &v
}

// GetAssemblyCategory returns the AssemblyCategory field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetAssemblyCategory() string {
	if o == nil || o.AssemblyCategory == nil {
		var ret string
		return ret
	}
	return *o.AssemblyCategory
}

// GetAssemblyCategoryOk returns a tuple with the AssemblyCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetAssemblyCategoryOk() (*string, bool) {
	if o == nil || o.AssemblyCategory == nil {
		return nil, false
	}
	return o.AssemblyCategory, true
}

// HasAssemblyCategory returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasAssemblyCategory() bool {
	if o != nil && o.AssemblyCategory != nil {
		return true
	}

	return false
}

// SetAssemblyCategory gets a reference to the given string and assigns it to the AssemblyCategory field.
func (o *V1AssemblyDatasetDescriptor) SetAssemblyCategory(v string) {
	o.AssemblyCategory = &v
}

// GetAnnotationMetadata returns the AnnotationMetadata field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetAnnotationMetadata() V1AnnotationForAssembly {
	if o == nil || o.AnnotationMetadata == nil {
		var ret V1AnnotationForAssembly
		return ret
	}
	return *o.AnnotationMetadata
}

// GetAnnotationMetadataOk returns a tuple with the AnnotationMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetAnnotationMetadataOk() (*V1AnnotationForAssembly, bool) {
	if o == nil || o.AnnotationMetadata == nil {
		return nil, false
	}
	return o.AnnotationMetadata, true
}

// HasAnnotationMetadata returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasAnnotationMetadata() bool {
	if o != nil && o.AnnotationMetadata != nil {
		return true
	}

	return false
}

// SetAnnotationMetadata gets a reference to the given V1AnnotationForAssembly and assigns it to the AnnotationMetadata field.
func (o *V1AssemblyDatasetDescriptor) SetAnnotationMetadata(v V1AnnotationForAssembly) {
	o.AnnotationMetadata = &v
}

// GetAssemblyLevel returns the AssemblyLevel field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetAssemblyLevel() string {
	if o == nil || o.AssemblyLevel == nil {
		var ret string
		return ret
	}
	return *o.AssemblyLevel
}

// GetAssemblyLevelOk returns a tuple with the AssemblyLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetAssemblyLevelOk() (*string, bool) {
	if o == nil || o.AssemblyLevel == nil {
		return nil, false
	}
	return o.AssemblyLevel, true
}

// HasAssemblyLevel returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasAssemblyLevel() bool {
	if o != nil && o.AssemblyLevel != nil {
		return true
	}

	return false
}

// SetAssemblyLevel gets a reference to the given string and assigns it to the AssemblyLevel field.
func (o *V1AssemblyDatasetDescriptor) SetAssemblyLevel(v string) {
	o.AssemblyLevel = &v
}

// GetSubmitter returns the Submitter field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetSubmitter() string {
	if o == nil || o.Submitter == nil {
		var ret string
		return ret
	}
	return *o.Submitter
}

// GetSubmitterOk returns a tuple with the Submitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetSubmitterOk() (*string, bool) {
	if o == nil || o.Submitter == nil {
		return nil, false
	}
	return o.Submitter, true
}

// HasSubmitter returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasSubmitter() bool {
	if o != nil && o.Submitter != nil {
		return true
	}

	return false
}

// SetSubmitter gets a reference to the given string and assigns it to the Submitter field.
func (o *V1AssemblyDatasetDescriptor) SetSubmitter(v string) {
	o.Submitter = &v
}

// GetSubmissionDate returns the SubmissionDate field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetSubmissionDate() string {
	if o == nil || o.SubmissionDate == nil {
		var ret string
		return ret
	}
	return *o.SubmissionDate
}

// GetSubmissionDateOk returns a tuple with the SubmissionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetSubmissionDateOk() (*string, bool) {
	if o == nil || o.SubmissionDate == nil {
		return nil, false
	}
	return o.SubmissionDate, true
}

// HasSubmissionDate returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasSubmissionDate() bool {
	if o != nil && o.SubmissionDate != nil {
		return true
	}

	return false
}

// SetSubmissionDate gets a reference to the given string and assigns it to the SubmissionDate field.
func (o *V1AssemblyDatasetDescriptor) SetSubmissionDate(v string) {
	o.SubmissionDate = &v
}

// GetContigN50 returns the ContigN50 field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetContigN50() int32 {
	if o == nil || o.ContigN50 == nil {
		var ret int32
		return ret
	}
	return *o.ContigN50
}

// GetContigN50Ok returns a tuple with the ContigN50 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetContigN50Ok() (*int32, bool) {
	if o == nil || o.ContigN50 == nil {
		return nil, false
	}
	return o.ContigN50, true
}

// HasContigN50 returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasContigN50() bool {
	if o != nil && o.ContigN50 != nil {
		return true
	}

	return false
}

// SetContigN50 gets a reference to the given int32 and assigns it to the ContigN50 field.
func (o *V1AssemblyDatasetDescriptor) SetContigN50(v int32) {
	o.ContigN50 = &v
}

// GetEstimatedSize returns the EstimatedSize field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetEstimatedSize() string {
	if o == nil || o.EstimatedSize == nil {
		var ret string
		return ret
	}
	return *o.EstimatedSize
}

// GetEstimatedSizeOk returns a tuple with the EstimatedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetEstimatedSizeOk() (*string, bool) {
	if o == nil || o.EstimatedSize == nil {
		return nil, false
	}
	return o.EstimatedSize, true
}

// HasEstimatedSize returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasEstimatedSize() bool {
	if o != nil && o.EstimatedSize != nil {
		return true
	}

	return false
}

// SetEstimatedSize gets a reference to the given string and assigns it to the EstimatedSize field.
func (o *V1AssemblyDatasetDescriptor) SetEstimatedSize(v string) {
	o.EstimatedSize = &v
}

// GetSeqLength returns the SeqLength field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetSeqLength() string {
	if o == nil || o.SeqLength == nil {
		var ret string
		return ret
	}
	return *o.SeqLength
}

// GetSeqLengthOk returns a tuple with the SeqLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetSeqLengthOk() (*string, bool) {
	if o == nil || o.SeqLength == nil {
		return nil, false
	}
	return o.SeqLength, true
}

// HasSeqLength returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasSeqLength() bool {
	if o != nil && o.SeqLength != nil {
		return true
	}

	return false
}

// SetSeqLength gets a reference to the given string and assigns it to the SeqLength field.
func (o *V1AssemblyDatasetDescriptor) SetSeqLength(v string) {
	o.SeqLength = &v
}

// GetBiosampleAccession returns the BiosampleAccession field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetBiosampleAccession() string {
	if o == nil || o.BiosampleAccession == nil {
		var ret string
		return ret
	}
	return *o.BiosampleAccession
}

// GetBiosampleAccessionOk returns a tuple with the BiosampleAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetBiosampleAccessionOk() (*string, bool) {
	if o == nil || o.BiosampleAccession == nil {
		return nil, false
	}
	return o.BiosampleAccession, true
}

// HasBiosampleAccession returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasBiosampleAccession() bool {
	if o != nil && o.BiosampleAccession != nil {
		return true
	}

	return false
}

// SetBiosampleAccession gets a reference to the given string and assigns it to the BiosampleAccession field.
func (o *V1AssemblyDatasetDescriptor) SetBiosampleAccession(v string) {
	o.BiosampleAccession = &v
}

// GetBiosample returns the Biosample field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetBiosample() V1reportsBioSampleDescriptor {
	if o == nil || o.Biosample == nil {
		var ret V1reportsBioSampleDescriptor
		return ret
	}
	return *o.Biosample
}

// GetBiosampleOk returns a tuple with the Biosample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetBiosampleOk() (*V1reportsBioSampleDescriptor, bool) {
	if o == nil || o.Biosample == nil {
		return nil, false
	}
	return o.Biosample, true
}

// HasBiosample returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasBiosample() bool {
	if o != nil && o.Biosample != nil {
		return true
	}

	return false
}

// SetBiosample gets a reference to the given V1reportsBioSampleDescriptor and assigns it to the Biosample field.
func (o *V1AssemblyDatasetDescriptor) SetBiosample(v V1reportsBioSampleDescriptor) {
	o.Biosample = &v
}

// GetBlastUrl returns the BlastUrl field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetBlastUrl() string {
	if o == nil || o.BlastUrl == nil {
		var ret string
		return ret
	}
	return *o.BlastUrl
}

// GetBlastUrlOk returns a tuple with the BlastUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetBlastUrlOk() (*string, bool) {
	if o == nil || o.BlastUrl == nil {
		return nil, false
	}
	return o.BlastUrl, true
}

// HasBlastUrl returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasBlastUrl() bool {
	if o != nil && o.BlastUrl != nil {
		return true
	}

	return false
}

// SetBlastUrl gets a reference to the given string and assigns it to the BlastUrl field.
func (o *V1AssemblyDatasetDescriptor) SetBlastUrl(v string) {
	o.BlastUrl = &v
}

// GetGcCount returns the GcCount field value if set, zero value otherwise.
func (o *V1AssemblyDatasetDescriptor) GetGcCount() string {
	if o == nil || o.GcCount == nil {
		var ret string
		return ret
	}
	return *o.GcCount
}

// GetGcCountOk returns a tuple with the GcCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AssemblyDatasetDescriptor) GetGcCountOk() (*string, bool) {
	if o == nil || o.GcCount == nil {
		return nil, false
	}
	return o.GcCount, true
}

// HasGcCount returns a boolean if a field has been set.
func (o *V1AssemblyDatasetDescriptor) HasGcCount() bool {
	if o != nil && o.GcCount != nil {
		return true
	}

	return false
}

// SetGcCount gets a reference to the given string and assigns it to the GcCount field.
func (o *V1AssemblyDatasetDescriptor) SetGcCount(v string) {
	o.GcCount = &v
}

func (o V1AssemblyDatasetDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssemblyAccession != nil  {
		toSerialize["assembly_accession"] = o.AssemblyAccession
	}
	if o.PairedAssemblyAccession != nil  {
		toSerialize["paired_assembly_accession"] = o.PairedAssemblyAccession
	}
	if o.BioprojectLineages != nil && len(o.GetBioprojectLineages()) > 0  {
		toSerialize["bioproject_lineages"] = o.BioprojectLineages
	}
	if o.DisplayName != nil  {
		toSerialize["display_name"] = o.DisplayName
	}
	if o.Org != nil  {
		toSerialize["org"] = o.Org
	}
	if o.Chromosomes != nil && len(o.GetChromosomes()) > 0  {
		toSerialize["chromosomes"] = o.Chromosomes
	}
	if o.AssemblyCategory != nil  {
		toSerialize["assembly_category"] = o.AssemblyCategory
	}
	if o.AnnotationMetadata != nil  {
		toSerialize["annotation_metadata"] = o.AnnotationMetadata
	}
	if o.AssemblyLevel != nil  {
		toSerialize["assembly_level"] = o.AssemblyLevel
	}
	if o.Submitter != nil  {
		toSerialize["submitter"] = o.Submitter
	}
	if o.SubmissionDate != nil  {
		toSerialize["submission_date"] = o.SubmissionDate
	}
	if o.ContigN50 != nil  {
		toSerialize["contig_n50"] = o.ContigN50
	}
	if o.EstimatedSize != nil  {
		toSerialize["estimated_size"] = o.EstimatedSize
	}
	if o.SeqLength != nil  {
		toSerialize["seq_length"] = o.SeqLength
	}
	if o.BiosampleAccession != nil  {
		toSerialize["biosample_accession"] = o.BiosampleAccession
	}
	if o.Biosample != nil  {
		toSerialize["biosample"] = o.Biosample
	}
	if o.BlastUrl != nil  {
		toSerialize["blast_url"] = o.BlastUrl
	}
	if o.GcCount != nil  {
		toSerialize["gc_count"] = o.GcCount
	}
	return json.Marshal(toSerialize)
}

type NullableV1AssemblyDatasetDescriptor struct {
	value *V1AssemblyDatasetDescriptor
	isSet bool
}

func (v NullableV1AssemblyDatasetDescriptor) Get() *V1AssemblyDatasetDescriptor {
	return v.value
}

func (v *NullableV1AssemblyDatasetDescriptor) Set(val *V1AssemblyDatasetDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AssemblyDatasetDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AssemblyDatasetDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AssemblyDatasetDescriptor(val *V1AssemblyDatasetDescriptor) *NullableV1AssemblyDatasetDescriptor {
	return &NullableV1AssemblyDatasetDescriptor{value: val, isSet: true}
}

func (v NullableV1AssemblyDatasetDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AssemblyDatasetDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


