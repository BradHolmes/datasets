/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsGenomicLocation struct for V1reportsGenomicLocation
type V1reportsGenomicLocation struct {
	GenomicAccessionVersion *string `json:"genomic_accession_version,omitempty"`
	SequenceName *string `json:"sequence_name,omitempty"`
	GenomicRange *V1reportsRange `json:"genomic_range,omitempty"`
	Exons *[]V1reportsRange `json:"exons,omitempty"`
}

// NewV1reportsGenomicLocation instantiates a new V1reportsGenomicLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsGenomicLocation() *V1reportsGenomicLocation {
	this := V1reportsGenomicLocation{}
	return &this
}

// NewV1reportsGenomicLocationWithDefaults instantiates a new V1reportsGenomicLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsGenomicLocationWithDefaults() *V1reportsGenomicLocation {
	this := V1reportsGenomicLocation{}
	return &this
}

// GetGenomicAccessionVersion returns the GenomicAccessionVersion field value if set, zero value otherwise.
func (o *V1reportsGenomicLocation) GetGenomicAccessionVersion() string {
	if o == nil || o.GenomicAccessionVersion == nil {
		var ret string
		return ret
	}
	return *o.GenomicAccessionVersion
}

// GetGenomicAccessionVersionOk returns a tuple with the GenomicAccessionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsGenomicLocation) GetGenomicAccessionVersionOk() (*string, bool) {
	if o == nil || o.GenomicAccessionVersion == nil {
		return nil, false
	}
	return o.GenomicAccessionVersion, true
}

// HasGenomicAccessionVersion returns a boolean if a field has been set.
func (o *V1reportsGenomicLocation) HasGenomicAccessionVersion() bool {
	if o != nil && o.GenomicAccessionVersion != nil {
		return true
	}

	return false
}

// SetGenomicAccessionVersion gets a reference to the given string and assigns it to the GenomicAccessionVersion field.
func (o *V1reportsGenomicLocation) SetGenomicAccessionVersion(v string) {
	o.GenomicAccessionVersion = &v
}

// GetSequenceName returns the SequenceName field value if set, zero value otherwise.
func (o *V1reportsGenomicLocation) GetSequenceName() string {
	if o == nil || o.SequenceName == nil {
		var ret string
		return ret
	}
	return *o.SequenceName
}

// GetSequenceNameOk returns a tuple with the SequenceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsGenomicLocation) GetSequenceNameOk() (*string, bool) {
	if o == nil || o.SequenceName == nil {
		return nil, false
	}
	return o.SequenceName, true
}

// HasSequenceName returns a boolean if a field has been set.
func (o *V1reportsGenomicLocation) HasSequenceName() bool {
	if o != nil && o.SequenceName != nil {
		return true
	}

	return false
}

// SetSequenceName gets a reference to the given string and assigns it to the SequenceName field.
func (o *V1reportsGenomicLocation) SetSequenceName(v string) {
	o.SequenceName = &v
}

// GetGenomicRange returns the GenomicRange field value if set, zero value otherwise.
func (o *V1reportsGenomicLocation) GetGenomicRange() V1reportsRange {
	if o == nil || o.GenomicRange == nil {
		var ret V1reportsRange
		return ret
	}
	return *o.GenomicRange
}

// GetGenomicRangeOk returns a tuple with the GenomicRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsGenomicLocation) GetGenomicRangeOk() (*V1reportsRange, bool) {
	if o == nil || o.GenomicRange == nil {
		return nil, false
	}
	return o.GenomicRange, true
}

// HasGenomicRange returns a boolean if a field has been set.
func (o *V1reportsGenomicLocation) HasGenomicRange() bool {
	if o != nil && o.GenomicRange != nil {
		return true
	}

	return false
}

// SetGenomicRange gets a reference to the given V1reportsRange and assigns it to the GenomicRange field.
func (o *V1reportsGenomicLocation) SetGenomicRange(v V1reportsRange) {
	o.GenomicRange = &v
}

// GetExons returns the Exons field value if set, zero value otherwise.
func (o *V1reportsGenomicLocation) GetExons() []V1reportsRange {
	if o == nil || o.Exons == nil {
		var ret []V1reportsRange
		return ret
	}
	return *o.Exons
}

// GetExonsOk returns a tuple with the Exons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsGenomicLocation) GetExonsOk() (*[]V1reportsRange, bool) {
	if o == nil || o.Exons == nil {
		return nil, false
	}
	return o.Exons, true
}

// HasExons returns a boolean if a field has been set.
func (o *V1reportsGenomicLocation) HasExons() bool {
	if o != nil && o.Exons != nil {
		return true
	}

	return false
}

// SetExons gets a reference to the given []V1reportsRange and assigns it to the Exons field.
func (o *V1reportsGenomicLocation) SetExons(v []V1reportsRange) {
	o.Exons = &v
}

func (o V1reportsGenomicLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GenomicAccessionVersion != nil  {
		toSerialize["genomic_accession_version"] = o.GenomicAccessionVersion
	}
	if o.SequenceName != nil  {
		toSerialize["sequence_name"] = o.SequenceName
	}
	if o.GenomicRange != nil  {
		toSerialize["genomic_range"] = o.GenomicRange
	}
	if o.Exons != nil && len(o.GetExons()) > 0  {
		toSerialize["exons"] = o.Exons
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsGenomicLocation struct {
	value *V1reportsGenomicLocation
	isSet bool
}

func (v NullableV1reportsGenomicLocation) Get() *V1reportsGenomicLocation {
	return v.value
}

func (v *NullableV1reportsGenomicLocation) Set(val *V1reportsGenomicLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsGenomicLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsGenomicLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsGenomicLocation(val *V1reportsGenomicLocation) *NullableV1reportsGenomicLocation {
	return &NullableV1reportsGenomicLocation{value: val, isSet: true}
}

func (v NullableV1reportsGenomicLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsGenomicLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


