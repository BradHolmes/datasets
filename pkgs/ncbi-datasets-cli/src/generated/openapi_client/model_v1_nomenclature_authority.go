/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1NomenclatureAuthority struct for V1NomenclatureAuthority
type V1NomenclatureAuthority struct {
	Authority *string `json:"authority,omitempty"`
	Identifier *string `json:"identifier,omitempty"`
}

// NewV1NomenclatureAuthority instantiates a new V1NomenclatureAuthority object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1NomenclatureAuthority() *V1NomenclatureAuthority {
	this := V1NomenclatureAuthority{}
	return &this
}

// NewV1NomenclatureAuthorityWithDefaults instantiates a new V1NomenclatureAuthority object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1NomenclatureAuthorityWithDefaults() *V1NomenclatureAuthority {
	this := V1NomenclatureAuthority{}
	return &this
}

// GetAuthority returns the Authority field value if set, zero value otherwise.
func (o *V1NomenclatureAuthority) GetAuthority() string {
	if o == nil || o.Authority == nil {
		var ret string
		return ret
	}
	return *o.Authority
}

// GetAuthorityOk returns a tuple with the Authority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NomenclatureAuthority) GetAuthorityOk() (*string, bool) {
	if o == nil || o.Authority == nil {
		return nil, false
	}
	return o.Authority, true
}

// HasAuthority returns a boolean if a field has been set.
func (o *V1NomenclatureAuthority) HasAuthority() bool {
	if o != nil && o.Authority != nil {
		return true
	}

	return false
}

// SetAuthority gets a reference to the given string and assigns it to the Authority field.
func (o *V1NomenclatureAuthority) SetAuthority(v string) {
	o.Authority = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *V1NomenclatureAuthority) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1NomenclatureAuthority) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *V1NomenclatureAuthority) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *V1NomenclatureAuthority) SetIdentifier(v string) {
	o.Identifier = &v
}

func (o V1NomenclatureAuthority) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Authority != nil  {
		toSerialize["authority"] = o.Authority
	}
	if o.Identifier != nil  {
		toSerialize["identifier"] = o.Identifier
	}
	return json.Marshal(toSerialize)
}

type NullableV1NomenclatureAuthority struct {
	value *V1NomenclatureAuthority
	isSet bool
}

func (v NullableV1NomenclatureAuthority) Get() *V1NomenclatureAuthority {
	return v.value
}

func (v *NullableV1NomenclatureAuthority) Set(val *V1NomenclatureAuthority) {
	v.value = val
	v.isSet = true
}

func (v NullableV1NomenclatureAuthority) IsSet() bool {
	return v.isSet
}

func (v *NullableV1NomenclatureAuthority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1NomenclatureAuthority(val *V1NomenclatureAuthority) *NullableV1NomenclatureAuthority {
	return &NullableV1NomenclatureAuthority{value: val, isSet: true}
}

func (v NullableV1NomenclatureAuthority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1NomenclatureAuthority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


