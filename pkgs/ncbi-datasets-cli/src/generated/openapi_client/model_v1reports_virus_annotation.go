/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsVirusAnnotation struct for V1reportsVirusAnnotation
type V1reportsVirusAnnotation struct {
	Genes *[]V1reportsVirusGene `json:"genes,omitempty"`
}

// NewV1reportsVirusAnnotation instantiates a new V1reportsVirusAnnotation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsVirusAnnotation() *V1reportsVirusAnnotation {
	this := V1reportsVirusAnnotation{}
	return &this
}

// NewV1reportsVirusAnnotationWithDefaults instantiates a new V1reportsVirusAnnotation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsVirusAnnotationWithDefaults() *V1reportsVirusAnnotation {
	this := V1reportsVirusAnnotation{}
	return &this
}

// GetGenes returns the Genes field value if set, zero value otherwise.
func (o *V1reportsVirusAnnotation) GetGenes() []V1reportsVirusGene {
	if o == nil || o.Genes == nil {
		var ret []V1reportsVirusGene
		return ret
	}
	return *o.Genes
}

// GetGenesOk returns a tuple with the Genes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsVirusAnnotation) GetGenesOk() (*[]V1reportsVirusGene, bool) {
	if o == nil || o.Genes == nil {
		return nil, false
	}
	return o.Genes, true
}

// HasGenes returns a boolean if a field has been set.
func (o *V1reportsVirusAnnotation) HasGenes() bool {
	if o != nil && o.Genes != nil {
		return true
	}

	return false
}

// SetGenes gets a reference to the given []V1reportsVirusGene and assigns it to the Genes field.
func (o *V1reportsVirusAnnotation) SetGenes(v []V1reportsVirusGene) {
	o.Genes = &v
}

func (o V1reportsVirusAnnotation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Genes != nil && len(o.GetGenes()) > 0  {
		toSerialize["genes"] = o.Genes
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsVirusAnnotation struct {
	value *V1reportsVirusAnnotation
	isSet bool
}

func (v NullableV1reportsVirusAnnotation) Get() *V1reportsVirusAnnotation {
	return v.value
}

func (v *NullableV1reportsVirusAnnotation) Set(val *V1reportsVirusAnnotation) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsVirusAnnotation) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsVirusAnnotation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsVirusAnnotation(val *V1reportsVirusAnnotation) *NullableV1reportsVirusAnnotation {
	return &NullableV1reportsVirusAnnotation{value: val, isSet: true}
}

func (v NullableV1reportsVirusAnnotation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsVirusAnnotation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


