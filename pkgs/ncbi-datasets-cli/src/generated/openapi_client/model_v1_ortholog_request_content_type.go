/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 1 API is considred stable and will not be subject to breaking changes. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1OrthologRequestContentType the model 'V1OrthologRequestContentType'
type V1OrthologRequestContentType string

// List of v1OrthologRequestContentType
const (
	V1ORTHOLOGREQUESTCONTENTTYPE_COMPLETE V1OrthologRequestContentType = "COMPLETE"
	V1ORTHOLOGREQUESTCONTENTTYPE_IDS_ONLY V1OrthologRequestContentType = "IDS_ONLY"
)

// All allowed values of V1OrthologRequestContentType enum
var AllowedV1OrthologRequestContentTypeEnumValues = []V1OrthologRequestContentType{
	"COMPLETE",
	"IDS_ONLY",
}

func (v *V1OrthologRequestContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1OrthologRequestContentType(value)
	for _, existing := range AllowedV1OrthologRequestContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1OrthologRequestContentType", value)
}

// NewV1OrthologRequestContentTypeFromValue returns a pointer to a valid V1OrthologRequestContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1OrthologRequestContentTypeFromValue(v string) (*V1OrthologRequestContentType, error) {
	ev := V1OrthologRequestContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1OrthologRequestContentType: valid values are %v", v, AllowedV1OrthologRequestContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1OrthologRequestContentType) IsValid() bool {
	for _, existing := range AllowedV1OrthologRequestContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1OrthologRequestContentType value
func (v V1OrthologRequestContentType) Ptr() *V1OrthologRequestContentType {
	return &v
}

type NullableV1OrthologRequestContentType struct {
	value *V1OrthologRequestContentType
	isSet bool
}

func (v NullableV1OrthologRequestContentType) Get() *V1OrthologRequestContentType {
	return v.value
}

func (v *NullableV1OrthologRequestContentType) Set(val *V1OrthologRequestContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1OrthologRequestContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1OrthologRequestContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1OrthologRequestContentType(val *V1OrthologRequestContentType) *NullableV1OrthologRequestContentType {
	return &NullableV1OrthologRequestContentType{value: val, isSet: true}
}

func (v NullableV1OrthologRequestContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1OrthologRequestContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

