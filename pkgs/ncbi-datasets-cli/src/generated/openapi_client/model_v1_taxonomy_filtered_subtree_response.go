/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 1 API is considred stable and will not be subject to breaking changes. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1TaxonomyFilteredSubtreeResponse struct for V1TaxonomyFilteredSubtreeResponse
type V1TaxonomyFilteredSubtreeResponse struct {
	RootNodes *[]int32 `json:"root_nodes,omitempty"`
	Edges *V1TaxonomyFilteredSubtreeResponseEdgesEntry `json:"edges,omitempty"`
	Warnings *[]V1Warning `json:"warnings,omitempty"`
	Errors *[]V1Error `json:"errors,omitempty"`
}

// NewV1TaxonomyFilteredSubtreeResponse instantiates a new V1TaxonomyFilteredSubtreeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TaxonomyFilteredSubtreeResponse() *V1TaxonomyFilteredSubtreeResponse {
	this := V1TaxonomyFilteredSubtreeResponse{}
	return &this
}

// NewV1TaxonomyFilteredSubtreeResponseWithDefaults instantiates a new V1TaxonomyFilteredSubtreeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TaxonomyFilteredSubtreeResponseWithDefaults() *V1TaxonomyFilteredSubtreeResponse {
	this := V1TaxonomyFilteredSubtreeResponse{}
	return &this
}

// GetRootNodes returns the RootNodes field value if set, zero value otherwise.
func (o *V1TaxonomyFilteredSubtreeResponse) GetRootNodes() []int32 {
	if o == nil || o.RootNodes == nil {
		var ret []int32
		return ret
	}
	return *o.RootNodes
}

// GetRootNodesOk returns a tuple with the RootNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TaxonomyFilteredSubtreeResponse) GetRootNodesOk() (*[]int32, bool) {
	if o == nil || o.RootNodes == nil {
		return nil, false
	}
	return o.RootNodes, true
}

// HasRootNodes returns a boolean if a field has been set.
func (o *V1TaxonomyFilteredSubtreeResponse) HasRootNodes() bool {
	if o != nil && o.RootNodes != nil {
		return true
	}

	return false
}

// SetRootNodes gets a reference to the given []int32 and assigns it to the RootNodes field.
func (o *V1TaxonomyFilteredSubtreeResponse) SetRootNodes(v []int32) {
	o.RootNodes = &v
}

// GetEdges returns the Edges field value if set, zero value otherwise.
func (o *V1TaxonomyFilteredSubtreeResponse) GetEdges() V1TaxonomyFilteredSubtreeResponseEdgesEntry {
	if o == nil || o.Edges == nil {
		var ret V1TaxonomyFilteredSubtreeResponseEdgesEntry
		return ret
	}
	return *o.Edges
}

// GetEdgesOk returns a tuple with the Edges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TaxonomyFilteredSubtreeResponse) GetEdgesOk() (*V1TaxonomyFilteredSubtreeResponseEdgesEntry, bool) {
	if o == nil || o.Edges == nil {
		return nil, false
	}
	return o.Edges, true
}

// HasEdges returns a boolean if a field has been set.
func (o *V1TaxonomyFilteredSubtreeResponse) HasEdges() bool {
	if o != nil && o.Edges != nil {
		return true
	}

	return false
}

// SetEdges gets a reference to the given V1TaxonomyFilteredSubtreeResponseEdgesEntry and assigns it to the Edges field.
func (o *V1TaxonomyFilteredSubtreeResponse) SetEdges(v V1TaxonomyFilteredSubtreeResponseEdgesEntry) {
	o.Edges = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *V1TaxonomyFilteredSubtreeResponse) GetWarnings() []V1Warning {
	if o == nil || o.Warnings == nil {
		var ret []V1Warning
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TaxonomyFilteredSubtreeResponse) GetWarningsOk() (*[]V1Warning, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *V1TaxonomyFilteredSubtreeResponse) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []V1Warning and assigns it to the Warnings field.
func (o *V1TaxonomyFilteredSubtreeResponse) SetWarnings(v []V1Warning) {
	o.Warnings = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *V1TaxonomyFilteredSubtreeResponse) GetErrors() []V1Error {
	if o == nil || o.Errors == nil {
		var ret []V1Error
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TaxonomyFilteredSubtreeResponse) GetErrorsOk() (*[]V1Error, bool) {
	if o == nil || o.Errors == nil {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *V1TaxonomyFilteredSubtreeResponse) HasErrors() bool {
	if o != nil && o.Errors != nil {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []V1Error and assigns it to the Errors field.
func (o *V1TaxonomyFilteredSubtreeResponse) SetErrors(v []V1Error) {
	o.Errors = &v
}

func (o V1TaxonomyFilteredSubtreeResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RootNodes != nil && len(o.GetRootNodes()) > 0  {
		toSerialize["root_nodes"] = o.RootNodes
	}
	if o.Edges != nil  {
		toSerialize["edges"] = o.Edges
	}
	if o.Warnings != nil && len(o.GetWarnings()) > 0  {
		toSerialize["warnings"] = o.Warnings
	}
	if o.Errors != nil && len(o.GetErrors()) > 0  {
		toSerialize["errors"] = o.Errors
	}
	return json.Marshal(toSerialize)
}

type NullableV1TaxonomyFilteredSubtreeResponse struct {
	value *V1TaxonomyFilteredSubtreeResponse
	isSet bool
}

func (v NullableV1TaxonomyFilteredSubtreeResponse) Get() *V1TaxonomyFilteredSubtreeResponse {
	return v.value
}

func (v *NullableV1TaxonomyFilteredSubtreeResponse) Set(val *V1TaxonomyFilteredSubtreeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TaxonomyFilteredSubtreeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TaxonomyFilteredSubtreeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TaxonomyFilteredSubtreeResponse(val *V1TaxonomyFilteredSubtreeResponse) *NullableV1TaxonomyFilteredSubtreeResponse {
	return &NullableV1TaxonomyFilteredSubtreeResponse{value: val, isSet: true}
}

func (v NullableV1TaxonomyFilteredSubtreeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TaxonomyFilteredSubtreeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


