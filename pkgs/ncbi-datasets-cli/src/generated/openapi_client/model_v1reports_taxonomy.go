/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsTaxonomy struct for V1reportsTaxonomy
type V1reportsTaxonomy struct {
	Group *string `json:"group,omitempty"`
	ScientificName *string `json:"scientific_name,omitempty"`
}

// NewV1reportsTaxonomy instantiates a new V1reportsTaxonomy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsTaxonomy() *V1reportsTaxonomy {
	this := V1reportsTaxonomy{}
	return &this
}

// NewV1reportsTaxonomyWithDefaults instantiates a new V1reportsTaxonomy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsTaxonomyWithDefaults() *V1reportsTaxonomy {
	this := V1reportsTaxonomy{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *V1reportsTaxonomy) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsTaxonomy) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *V1reportsTaxonomy) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *V1reportsTaxonomy) SetGroup(v string) {
	o.Group = &v
}

// GetScientificName returns the ScientificName field value if set, zero value otherwise.
func (o *V1reportsTaxonomy) GetScientificName() string {
	if o == nil || o.ScientificName == nil {
		var ret string
		return ret
	}
	return *o.ScientificName
}

// GetScientificNameOk returns a tuple with the ScientificName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsTaxonomy) GetScientificNameOk() (*string, bool) {
	if o == nil || o.ScientificName == nil {
		return nil, false
	}
	return o.ScientificName, true
}

// HasScientificName returns a boolean if a field has been set.
func (o *V1reportsTaxonomy) HasScientificName() bool {
	if o != nil && o.ScientificName != nil {
		return true
	}

	return false
}

// SetScientificName gets a reference to the given string and assigns it to the ScientificName field.
func (o *V1reportsTaxonomy) SetScientificName(v string) {
	o.ScientificName = &v
}

func (o V1reportsTaxonomy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Group != nil  {
		toSerialize["group"] = o.Group
	}
	if o.ScientificName != nil  {
		toSerialize["scientific_name"] = o.ScientificName
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsTaxonomy struct {
	value *V1reportsTaxonomy
	isSet bool
}

func (v NullableV1reportsTaxonomy) Get() *V1reportsTaxonomy {
	return v.value
}

func (v *NullableV1reportsTaxonomy) Set(val *V1reportsTaxonomy) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsTaxonomy) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsTaxonomy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsTaxonomy(val *V1reportsTaxonomy) *NullableV1reportsTaxonomy {
	return &NullableV1reportsTaxonomy{value: val, isSet: true}
}

func (v NullableV1reportsTaxonomy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsTaxonomy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


