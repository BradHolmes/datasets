/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1reportsProkaryoteGeneLocationCompleteness the model 'V1reportsProkaryoteGeneLocationCompleteness'
type V1reportsProkaryoteGeneLocationCompleteness string

// List of v1reportsProkaryoteGeneLocationCompleteness
const (
	V1REPORTSPROKARYOTEGENELOCATIONCOMPLETENESS_COMPLETE V1reportsProkaryoteGeneLocationCompleteness = "complete"
	V1REPORTSPROKARYOTEGENELOCATIONCOMPLETENESS_PARTIAL V1reportsProkaryoteGeneLocationCompleteness = "partial"
)

// All allowed values of V1reportsProkaryoteGeneLocationCompleteness enum
var AllowedV1reportsProkaryoteGeneLocationCompletenessEnumValues = []V1reportsProkaryoteGeneLocationCompleteness{
	"complete",
	"partial",
}

func (v *V1reportsProkaryoteGeneLocationCompleteness) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1reportsProkaryoteGeneLocationCompleteness(value)
	for _, existing := range AllowedV1reportsProkaryoteGeneLocationCompletenessEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1reportsProkaryoteGeneLocationCompleteness", value)
}

// NewV1reportsProkaryoteGeneLocationCompletenessFromValue returns a pointer to a valid V1reportsProkaryoteGeneLocationCompleteness
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1reportsProkaryoteGeneLocationCompletenessFromValue(v string) (*V1reportsProkaryoteGeneLocationCompleteness, error) {
	ev := V1reportsProkaryoteGeneLocationCompleteness(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1reportsProkaryoteGeneLocationCompleteness: valid values are %v", v, AllowedV1reportsProkaryoteGeneLocationCompletenessEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1reportsProkaryoteGeneLocationCompleteness) IsValid() bool {
	for _, existing := range AllowedV1reportsProkaryoteGeneLocationCompletenessEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1reportsProkaryoteGeneLocationCompleteness value
func (v V1reportsProkaryoteGeneLocationCompleteness) Ptr() *V1reportsProkaryoteGeneLocationCompleteness {
	return &v
}

type NullableV1reportsProkaryoteGeneLocationCompleteness struct {
	value *V1reportsProkaryoteGeneLocationCompleteness
	isSet bool
}

func (v NullableV1reportsProkaryoteGeneLocationCompleteness) Get() *V1reportsProkaryoteGeneLocationCompleteness {
	return v.value
}

func (v *NullableV1reportsProkaryoteGeneLocationCompleteness) Set(val *V1reportsProkaryoteGeneLocationCompleteness) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsProkaryoteGeneLocationCompleteness) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsProkaryoteGeneLocationCompleteness) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsProkaryoteGeneLocationCompleteness(val *V1reportsProkaryoteGeneLocationCompleteness) *NullableV1reportsProkaryoteGeneLocationCompleteness {
	return &NullableV1reportsProkaryoteGeneLocationCompleteness{value: val, isSet: true}
}

func (v NullableV1reportsProkaryoteGeneLocationCompleteness) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsProkaryoteGeneLocationCompleteness) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

