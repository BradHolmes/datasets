/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsProkaryoteGeneLocationDefline struct for V1reportsProkaryoteGeneLocationDefline
type V1reportsProkaryoteGeneLocationDefline struct {
	GeneLocation *V1reportsProkaryoteGeneLocation `json:"gene_location,omitempty"`
	Name *string `json:"name,omitempty"`
	Gene *string `json:"gene,omitempty"`
}

// NewV1reportsProkaryoteGeneLocationDefline instantiates a new V1reportsProkaryoteGeneLocationDefline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsProkaryoteGeneLocationDefline() *V1reportsProkaryoteGeneLocationDefline {
	this := V1reportsProkaryoteGeneLocationDefline{}
	return &this
}

// NewV1reportsProkaryoteGeneLocationDeflineWithDefaults instantiates a new V1reportsProkaryoteGeneLocationDefline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsProkaryoteGeneLocationDeflineWithDefaults() *V1reportsProkaryoteGeneLocationDefline {
	this := V1reportsProkaryoteGeneLocationDefline{}
	return &this
}

// GetGeneLocation returns the GeneLocation field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGeneLocationDefline) GetGeneLocation() V1reportsProkaryoteGeneLocation {
	if o == nil || o.GeneLocation == nil {
		var ret V1reportsProkaryoteGeneLocation
		return ret
	}
	return *o.GeneLocation
}

// GetGeneLocationOk returns a tuple with the GeneLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGeneLocationDefline) GetGeneLocationOk() (*V1reportsProkaryoteGeneLocation, bool) {
	if o == nil || o.GeneLocation == nil {
		return nil, false
	}
	return o.GeneLocation, true
}

// HasGeneLocation returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGeneLocationDefline) HasGeneLocation() bool {
	if o != nil && o.GeneLocation != nil {
		return true
	}

	return false
}

// SetGeneLocation gets a reference to the given V1reportsProkaryoteGeneLocation and assigns it to the GeneLocation field.
func (o *V1reportsProkaryoteGeneLocationDefline) SetGeneLocation(v V1reportsProkaryoteGeneLocation) {
	o.GeneLocation = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGeneLocationDefline) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGeneLocationDefline) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGeneLocationDefline) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1reportsProkaryoteGeneLocationDefline) SetName(v string) {
	o.Name = &v
}

// GetGene returns the Gene field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGeneLocationDefline) GetGene() string {
	if o == nil || o.Gene == nil {
		var ret string
		return ret
	}
	return *o.Gene
}

// GetGeneOk returns a tuple with the Gene field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGeneLocationDefline) GetGeneOk() (*string, bool) {
	if o == nil || o.Gene == nil {
		return nil, false
	}
	return o.Gene, true
}

// HasGene returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGeneLocationDefline) HasGene() bool {
	if o != nil && o.Gene != nil {
		return true
	}

	return false
}

// SetGene gets a reference to the given string and assigns it to the Gene field.
func (o *V1reportsProkaryoteGeneLocationDefline) SetGene(v string) {
	o.Gene = &v
}

func (o V1reportsProkaryoteGeneLocationDefline) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GeneLocation != nil  {
		toSerialize["gene_location"] = o.GeneLocation
	}
	if o.Name != nil  {
		toSerialize["name"] = o.Name
	}
	if o.Gene != nil  {
		toSerialize["gene"] = o.Gene
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsProkaryoteGeneLocationDefline struct {
	value *V1reportsProkaryoteGeneLocationDefline
	isSet bool
}

func (v NullableV1reportsProkaryoteGeneLocationDefline) Get() *V1reportsProkaryoteGeneLocationDefline {
	return v.value
}

func (v *NullableV1reportsProkaryoteGeneLocationDefline) Set(val *V1reportsProkaryoteGeneLocationDefline) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsProkaryoteGeneLocationDefline) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsProkaryoteGeneLocationDefline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsProkaryoteGeneLocationDefline(val *V1reportsProkaryoteGeneLocationDefline) *NullableV1reportsProkaryoteGeneLocationDefline {
	return &NullableV1reportsProkaryoteGeneLocationDefline{value: val, isSet: true}
}

func (v NullableV1reportsProkaryoteGeneLocationDefline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsProkaryoteGeneLocationDefline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


