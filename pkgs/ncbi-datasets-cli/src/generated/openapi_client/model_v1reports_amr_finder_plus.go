/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsAmrFinderPlus struct for V1reportsAmrFinderPlus
type V1reportsAmrFinderPlus struct {
	Version *string `json:"version,omitempty"`
	Type *string `json:"type,omitempty"`
	DbVersion *string `json:"db_version,omitempty"`
}

// NewV1reportsAmrFinderPlus instantiates a new V1reportsAmrFinderPlus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsAmrFinderPlus() *V1reportsAmrFinderPlus {
	this := V1reportsAmrFinderPlus{}
	return &this
}

// NewV1reportsAmrFinderPlusWithDefaults instantiates a new V1reportsAmrFinderPlus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsAmrFinderPlusWithDefaults() *V1reportsAmrFinderPlus {
	this := V1reportsAmrFinderPlus{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *V1reportsAmrFinderPlus) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAmrFinderPlus) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *V1reportsAmrFinderPlus) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *V1reportsAmrFinderPlus) SetVersion(v string) {
	o.Version = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1reportsAmrFinderPlus) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAmrFinderPlus) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1reportsAmrFinderPlus) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *V1reportsAmrFinderPlus) SetType(v string) {
	o.Type = &v
}

// GetDbVersion returns the DbVersion field value if set, zero value otherwise.
func (o *V1reportsAmrFinderPlus) GetDbVersion() string {
	if o == nil || o.DbVersion == nil {
		var ret string
		return ret
	}
	return *o.DbVersion
}

// GetDbVersionOk returns a tuple with the DbVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAmrFinderPlus) GetDbVersionOk() (*string, bool) {
	if o == nil || o.DbVersion == nil {
		return nil, false
	}
	return o.DbVersion, true
}

// HasDbVersion returns a boolean if a field has been set.
func (o *V1reportsAmrFinderPlus) HasDbVersion() bool {
	if o != nil && o.DbVersion != nil {
		return true
	}

	return false
}

// SetDbVersion gets a reference to the given string and assigns it to the DbVersion field.
func (o *V1reportsAmrFinderPlus) SetDbVersion(v string) {
	o.DbVersion = &v
}

func (o V1reportsAmrFinderPlus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil  {
		toSerialize["version"] = o.Version
	}
	if o.Type != nil  {
		toSerialize["type"] = o.Type
	}
	if o.DbVersion != nil  {
		toSerialize["db_version"] = o.DbVersion
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsAmrFinderPlus struct {
	value *V1reportsAmrFinderPlus
	isSet bool
}

func (v NullableV1reportsAmrFinderPlus) Get() *V1reportsAmrFinderPlus {
	return v.value
}

func (v *NullableV1reportsAmrFinderPlus) Set(val *V1reportsAmrFinderPlus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsAmrFinderPlus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsAmrFinderPlus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsAmrFinderPlus(val *V1reportsAmrFinderPlus) *NullableV1reportsAmrFinderPlus {
	return &NullableV1reportsAmrFinderPlus{value: val, isSet: true}
}

func (v NullableV1reportsAmrFinderPlus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsAmrFinderPlus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


