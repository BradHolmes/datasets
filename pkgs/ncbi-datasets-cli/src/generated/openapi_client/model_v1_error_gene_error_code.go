/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1ErrorGeneErrorCode the model 'V1ErrorGeneErrorCode'
type V1ErrorGeneErrorCode string

// List of v1ErrorGeneErrorCode
const (
	V1ERRORGENEERRORCODE_UNKNOWN_GENE_ERROR_CODE V1ErrorGeneErrorCode = "UNKNOWN_GENE_ERROR_CODE"
	V1ERRORGENEERRORCODE_INCOMPLETE_LOOKUP_SYMBOL V1ErrorGeneErrorCode = "INCOMPLETE_LOOKUP_SYMBOL"
)

// All allowed values of V1ErrorGeneErrorCode enum
var AllowedV1ErrorGeneErrorCodeEnumValues = []V1ErrorGeneErrorCode{
	"UNKNOWN_GENE_ERROR_CODE",
	"INCOMPLETE_LOOKUP_SYMBOL",
}

func (v *V1ErrorGeneErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1ErrorGeneErrorCode(value)
	for _, existing := range AllowedV1ErrorGeneErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1ErrorGeneErrorCode", value)
}

// NewV1ErrorGeneErrorCodeFromValue returns a pointer to a valid V1ErrorGeneErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1ErrorGeneErrorCodeFromValue(v string) (*V1ErrorGeneErrorCode, error) {
	ev := V1ErrorGeneErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1ErrorGeneErrorCode: valid values are %v", v, AllowedV1ErrorGeneErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1ErrorGeneErrorCode) IsValid() bool {
	for _, existing := range AllowedV1ErrorGeneErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1ErrorGeneErrorCode value
func (v V1ErrorGeneErrorCode) Ptr() *V1ErrorGeneErrorCode {
	return &v
}

type NullableV1ErrorGeneErrorCode struct {
	value *V1ErrorGeneErrorCode
	isSet bool
}

func (v NullableV1ErrorGeneErrorCode) Get() *V1ErrorGeneErrorCode {
	return v.value
}

func (v *NullableV1ErrorGeneErrorCode) Set(val *V1ErrorGeneErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ErrorGeneErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ErrorGeneErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ErrorGeneErrorCode(val *V1ErrorGeneErrorCode) *NullableV1ErrorGeneErrorCode {
	return &NullableV1ErrorGeneErrorCode{value: val, isSet: true}
}

func (v NullableV1ErrorGeneErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ErrorGeneErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

