/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1reportsAssemblyStatus the model 'V1reportsAssemblyStatus'
type V1reportsAssemblyStatus string

// List of v1reportsAssemblyStatus
const (
	V1REPORTSASSEMBLYSTATUS_ASSEMBLY_STATUS_UNKNOWN V1reportsAssemblyStatus = "ASSEMBLY_STATUS_UNKNOWN"
	V1REPORTSASSEMBLYSTATUS_CURRENT V1reportsAssemblyStatus = "current"
	V1REPORTSASSEMBLYSTATUS_PREVIOUS V1reportsAssemblyStatus = "previous"
	V1REPORTSASSEMBLYSTATUS_SUPPRESSED V1reportsAssemblyStatus = "suppressed"
)

// All allowed values of V1reportsAssemblyStatus enum
var AllowedV1reportsAssemblyStatusEnumValues = []V1reportsAssemblyStatus{
	"ASSEMBLY_STATUS_UNKNOWN",
	"current",
	"previous",
	"suppressed",
}

func (v *V1reportsAssemblyStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1reportsAssemblyStatus(value)
	for _, existing := range AllowedV1reportsAssemblyStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1reportsAssemblyStatus", value)
}

// NewV1reportsAssemblyStatusFromValue returns a pointer to a valid V1reportsAssemblyStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1reportsAssemblyStatusFromValue(v string) (*V1reportsAssemblyStatus, error) {
	ev := V1reportsAssemblyStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1reportsAssemblyStatus: valid values are %v", v, AllowedV1reportsAssemblyStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1reportsAssemblyStatus) IsValid() bool {
	for _, existing := range AllowedV1reportsAssemblyStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1reportsAssemblyStatus value
func (v V1reportsAssemblyStatus) Ptr() *V1reportsAssemblyStatus {
	return &v
}

type NullableV1reportsAssemblyStatus struct {
	value *V1reportsAssemblyStatus
	isSet bool
}

func (v NullableV1reportsAssemblyStatus) Get() *V1reportsAssemblyStatus {
	return v.value
}

func (v *NullableV1reportsAssemblyStatus) Set(val *V1reportsAssemblyStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsAssemblyStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsAssemblyStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsAssemblyStatus(val *V1reportsAssemblyStatus) *NullableV1reportsAssemblyStatus {
	return &NullableV1reportsAssemblyStatus{value: val, isSet: true}
}

func (v NullableV1reportsAssemblyStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsAssemblyStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

