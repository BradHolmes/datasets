/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1AnnotationForAssemblyFile struct for V1AnnotationForAssemblyFile
type V1AnnotationForAssemblyFile struct {
	Type *V1AnnotationForAssemblyType `json:"type,omitempty"`
	EstimatedSize *string `json:"estimated_size,omitempty"`
}

// NewV1AnnotationForAssemblyFile instantiates a new V1AnnotationForAssemblyFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1AnnotationForAssemblyFile() *V1AnnotationForAssemblyFile {
	this := V1AnnotationForAssemblyFile{}
	var type_ V1AnnotationForAssemblyType = V1ANNOTATIONFORASSEMBLYTYPE_DEFAULT
	this.Type = &type_
	return &this
}

// NewV1AnnotationForAssemblyFileWithDefaults instantiates a new V1AnnotationForAssemblyFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1AnnotationForAssemblyFileWithDefaults() *V1AnnotationForAssemblyFile {
	this := V1AnnotationForAssemblyFile{}
	var type_ V1AnnotationForAssemblyType = V1ANNOTATIONFORASSEMBLYTYPE_DEFAULT
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1AnnotationForAssemblyFile) GetType() V1AnnotationForAssemblyType {
	if o == nil || o.Type == nil {
		var ret V1AnnotationForAssemblyType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AnnotationForAssemblyFile) GetTypeOk() (*V1AnnotationForAssemblyType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1AnnotationForAssemblyFile) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given V1AnnotationForAssemblyType and assigns it to the Type field.
func (o *V1AnnotationForAssemblyFile) SetType(v V1AnnotationForAssemblyType) {
	o.Type = &v
}

// GetEstimatedSize returns the EstimatedSize field value if set, zero value otherwise.
func (o *V1AnnotationForAssemblyFile) GetEstimatedSize() string {
	if o == nil || o.EstimatedSize == nil {
		var ret string
		return ret
	}
	return *o.EstimatedSize
}

// GetEstimatedSizeOk returns a tuple with the EstimatedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1AnnotationForAssemblyFile) GetEstimatedSizeOk() (*string, bool) {
	if o == nil || o.EstimatedSize == nil {
		return nil, false
	}
	return o.EstimatedSize, true
}

// HasEstimatedSize returns a boolean if a field has been set.
func (o *V1AnnotationForAssemblyFile) HasEstimatedSize() bool {
	if o != nil && o.EstimatedSize != nil {
		return true
	}

	return false
}

// SetEstimatedSize gets a reference to the given string and assigns it to the EstimatedSize field.
func (o *V1AnnotationForAssemblyFile) SetEstimatedSize(v string) {
	o.EstimatedSize = &v
}

func (o V1AnnotationForAssemblyFile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil  {
		toSerialize["type"] = o.Type
	}
	if o.EstimatedSize != nil  {
		toSerialize["estimated_size"] = o.EstimatedSize
	}
	return json.Marshal(toSerialize)
}

type NullableV1AnnotationForAssemblyFile struct {
	value *V1AnnotationForAssemblyFile
	isSet bool
}

func (v NullableV1AnnotationForAssemblyFile) Get() *V1AnnotationForAssemblyFile {
	return v.value
}

func (v *NullableV1AnnotationForAssemblyFile) Set(val *V1AnnotationForAssemblyFile) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AnnotationForAssemblyFile) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AnnotationForAssemblyFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AnnotationForAssemblyFile(val *V1AnnotationForAssemblyFile) *NullableV1AnnotationForAssemblyFile {
	return &NullableV1AnnotationForAssemblyFile{value: val, isSet: true}
}

func (v NullableV1AnnotationForAssemblyFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AnnotationForAssemblyFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


