/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1OrganismCounts struct for V1OrganismCounts
type V1OrganismCounts struct {
	Node *int32 `json:"node,omitempty"`
	Subtree *int32 `json:"subtree,omitempty"`
}

// NewV1OrganismCounts instantiates a new V1OrganismCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1OrganismCounts() *V1OrganismCounts {
	this := V1OrganismCounts{}
	return &this
}

// NewV1OrganismCountsWithDefaults instantiates a new V1OrganismCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1OrganismCountsWithDefaults() *V1OrganismCounts {
	this := V1OrganismCounts{}
	return &this
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *V1OrganismCounts) GetNode() int32 {
	if o == nil || o.Node == nil {
		var ret int32
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1OrganismCounts) GetNodeOk() (*int32, bool) {
	if o == nil || o.Node == nil {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *V1OrganismCounts) HasNode() bool {
	if o != nil && o.Node != nil {
		return true
	}

	return false
}

// SetNode gets a reference to the given int32 and assigns it to the Node field.
func (o *V1OrganismCounts) SetNode(v int32) {
	o.Node = &v
}

// GetSubtree returns the Subtree field value if set, zero value otherwise.
func (o *V1OrganismCounts) GetSubtree() int32 {
	if o == nil || o.Subtree == nil {
		var ret int32
		return ret
	}
	return *o.Subtree
}

// GetSubtreeOk returns a tuple with the Subtree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1OrganismCounts) GetSubtreeOk() (*int32, bool) {
	if o == nil || o.Subtree == nil {
		return nil, false
	}
	return o.Subtree, true
}

// HasSubtree returns a boolean if a field has been set.
func (o *V1OrganismCounts) HasSubtree() bool {
	if o != nil && o.Subtree != nil {
		return true
	}

	return false
}

// SetSubtree gets a reference to the given int32 and assigns it to the Subtree field.
func (o *V1OrganismCounts) SetSubtree(v int32) {
	o.Subtree = &v
}

func (o V1OrganismCounts) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Node != nil  {
		toSerialize["node"] = o.Node
	}
	if o.Subtree != nil  {
		toSerialize["subtree"] = o.Subtree
	}
	return json.Marshal(toSerialize)
}

type NullableV1OrganismCounts struct {
	value *V1OrganismCounts
	isSet bool
}

func (v NullableV1OrganismCounts) Get() *V1OrganismCounts {
	return v.value
}

func (v *NullableV1OrganismCounts) Set(val *V1OrganismCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableV1OrganismCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableV1OrganismCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1OrganismCounts(val *V1OrganismCounts) *NullableV1OrganismCounts {
	return &NullableV1OrganismCounts{value: val, isSet: true}
}

func (v NullableV1OrganismCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1OrganismCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


