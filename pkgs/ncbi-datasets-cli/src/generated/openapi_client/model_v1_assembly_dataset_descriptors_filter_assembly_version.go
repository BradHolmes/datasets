/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1AssemblyDatasetDescriptorsFilterAssemblyVersion the model 'V1AssemblyDatasetDescriptorsFilterAssemblyVersion'
type V1AssemblyDatasetDescriptorsFilterAssemblyVersion string

// List of v1AssemblyDatasetDescriptorsFilterAssemblyVersion
const (
	V1ASSEMBLYDATASETDESCRIPTORSFILTERASSEMBLYVERSION_CURRENT V1AssemblyDatasetDescriptorsFilterAssemblyVersion = "current"
	V1ASSEMBLYDATASETDESCRIPTORSFILTERASSEMBLYVERSION_ALL_ASSEMBLIES V1AssemblyDatasetDescriptorsFilterAssemblyVersion = "all_assemblies"
)

// All allowed values of V1AssemblyDatasetDescriptorsFilterAssemblyVersion enum
var AllowedV1AssemblyDatasetDescriptorsFilterAssemblyVersionEnumValues = []V1AssemblyDatasetDescriptorsFilterAssemblyVersion{
	"current",
	"all_assemblies",
}

func (v *V1AssemblyDatasetDescriptorsFilterAssemblyVersion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1AssemblyDatasetDescriptorsFilterAssemblyVersion(value)
	for _, existing := range AllowedV1AssemblyDatasetDescriptorsFilterAssemblyVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1AssemblyDatasetDescriptorsFilterAssemblyVersion", value)
}

// NewV1AssemblyDatasetDescriptorsFilterAssemblyVersionFromValue returns a pointer to a valid V1AssemblyDatasetDescriptorsFilterAssemblyVersion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1AssemblyDatasetDescriptorsFilterAssemblyVersionFromValue(v string) (*V1AssemblyDatasetDescriptorsFilterAssemblyVersion, error) {
	ev := V1AssemblyDatasetDescriptorsFilterAssemblyVersion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1AssemblyDatasetDescriptorsFilterAssemblyVersion: valid values are %v", v, AllowedV1AssemblyDatasetDescriptorsFilterAssemblyVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1AssemblyDatasetDescriptorsFilterAssemblyVersion) IsValid() bool {
	for _, existing := range AllowedV1AssemblyDatasetDescriptorsFilterAssemblyVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1AssemblyDatasetDescriptorsFilterAssemblyVersion value
func (v V1AssemblyDatasetDescriptorsFilterAssemblyVersion) Ptr() *V1AssemblyDatasetDescriptorsFilterAssemblyVersion {
	return &v
}

type NullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion struct {
	value *V1AssemblyDatasetDescriptorsFilterAssemblyVersion
	isSet bool
}

func (v NullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion) Get() *V1AssemblyDatasetDescriptorsFilterAssemblyVersion {
	return v.value
}

func (v *NullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion) Set(val *V1AssemblyDatasetDescriptorsFilterAssemblyVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion(val *V1AssemblyDatasetDescriptorsFilterAssemblyVersion) *NullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion {
	return &NullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion{value: val, isSet: true}
}

func (v NullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1AssemblyDatasetDescriptorsFilterAssemblyVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

