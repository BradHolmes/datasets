/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1SciNameAndIdsSciNameAndId struct for V1SciNameAndIdsSciNameAndId
type V1SciNameAndIdsSciNameAndId struct {
	SciName *string `json:"sci_name,omitempty"`
	TaxId *string `json:"tax_id,omitempty"`
	CommonName *string `json:"common_name,omitempty"`
	MatchedTerm *string `json:"matched_term,omitempty"`
}

// NewV1SciNameAndIdsSciNameAndId instantiates a new V1SciNameAndIdsSciNameAndId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SciNameAndIdsSciNameAndId() *V1SciNameAndIdsSciNameAndId {
	this := V1SciNameAndIdsSciNameAndId{}
	return &this
}

// NewV1SciNameAndIdsSciNameAndIdWithDefaults instantiates a new V1SciNameAndIdsSciNameAndId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SciNameAndIdsSciNameAndIdWithDefaults() *V1SciNameAndIdsSciNameAndId {
	this := V1SciNameAndIdsSciNameAndId{}
	return &this
}

// GetSciName returns the SciName field value if set, zero value otherwise.
func (o *V1SciNameAndIdsSciNameAndId) GetSciName() string {
	if o == nil || o.SciName == nil {
		var ret string
		return ret
	}
	return *o.SciName
}

// GetSciNameOk returns a tuple with the SciName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SciNameAndIdsSciNameAndId) GetSciNameOk() (*string, bool) {
	if o == nil || o.SciName == nil {
		return nil, false
	}
	return o.SciName, true
}

// HasSciName returns a boolean if a field has been set.
func (o *V1SciNameAndIdsSciNameAndId) HasSciName() bool {
	if o != nil && o.SciName != nil {
		return true
	}

	return false
}

// SetSciName gets a reference to the given string and assigns it to the SciName field.
func (o *V1SciNameAndIdsSciNameAndId) SetSciName(v string) {
	o.SciName = &v
}

// GetTaxId returns the TaxId field value if set, zero value otherwise.
func (o *V1SciNameAndIdsSciNameAndId) GetTaxId() string {
	if o == nil || o.TaxId == nil {
		var ret string
		return ret
	}
	return *o.TaxId
}

// GetTaxIdOk returns a tuple with the TaxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SciNameAndIdsSciNameAndId) GetTaxIdOk() (*string, bool) {
	if o == nil || o.TaxId == nil {
		return nil, false
	}
	return o.TaxId, true
}

// HasTaxId returns a boolean if a field has been set.
func (o *V1SciNameAndIdsSciNameAndId) HasTaxId() bool {
	if o != nil && o.TaxId != nil {
		return true
	}

	return false
}

// SetTaxId gets a reference to the given string and assigns it to the TaxId field.
func (o *V1SciNameAndIdsSciNameAndId) SetTaxId(v string) {
	o.TaxId = &v
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *V1SciNameAndIdsSciNameAndId) GetCommonName() string {
	if o == nil || o.CommonName == nil {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SciNameAndIdsSciNameAndId) GetCommonNameOk() (*string, bool) {
	if o == nil || o.CommonName == nil {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *V1SciNameAndIdsSciNameAndId) HasCommonName() bool {
	if o != nil && o.CommonName != nil {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *V1SciNameAndIdsSciNameAndId) SetCommonName(v string) {
	o.CommonName = &v
}

// GetMatchedTerm returns the MatchedTerm field value if set, zero value otherwise.
func (o *V1SciNameAndIdsSciNameAndId) GetMatchedTerm() string {
	if o == nil || o.MatchedTerm == nil {
		var ret string
		return ret
	}
	return *o.MatchedTerm
}

// GetMatchedTermOk returns a tuple with the MatchedTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SciNameAndIdsSciNameAndId) GetMatchedTermOk() (*string, bool) {
	if o == nil || o.MatchedTerm == nil {
		return nil, false
	}
	return o.MatchedTerm, true
}

// HasMatchedTerm returns a boolean if a field has been set.
func (o *V1SciNameAndIdsSciNameAndId) HasMatchedTerm() bool {
	if o != nil && o.MatchedTerm != nil {
		return true
	}

	return false
}

// SetMatchedTerm gets a reference to the given string and assigns it to the MatchedTerm field.
func (o *V1SciNameAndIdsSciNameAndId) SetMatchedTerm(v string) {
	o.MatchedTerm = &v
}

func (o V1SciNameAndIdsSciNameAndId) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SciName != nil  {
		toSerialize["sci_name"] = o.SciName
	}
	if o.TaxId != nil  {
		toSerialize["tax_id"] = o.TaxId
	}
	if o.CommonName != nil  {
		toSerialize["common_name"] = o.CommonName
	}
	if o.MatchedTerm != nil  {
		toSerialize["matched_term"] = o.MatchedTerm
	}
	return json.Marshal(toSerialize)
}

type NullableV1SciNameAndIdsSciNameAndId struct {
	value *V1SciNameAndIdsSciNameAndId
	isSet bool
}

func (v NullableV1SciNameAndIdsSciNameAndId) Get() *V1SciNameAndIdsSciNameAndId {
	return v.value
}

func (v *NullableV1SciNameAndIdsSciNameAndId) Set(val *V1SciNameAndIdsSciNameAndId) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SciNameAndIdsSciNameAndId) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SciNameAndIdsSciNameAndId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SciNameAndIdsSciNameAndId(val *V1SciNameAndIdsSciNameAndId) *NullableV1SciNameAndIdsSciNameAndId {
	return &NullableV1SciNameAndIdsSciNameAndId{value: val, isSet: true}
}

func (v NullableV1SciNameAndIdsSciNameAndId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SciNameAndIdsSciNameAndId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


