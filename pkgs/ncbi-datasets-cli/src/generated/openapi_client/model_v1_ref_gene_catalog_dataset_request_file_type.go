/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1RefGeneCatalogDatasetRequestFileType the model 'V1RefGeneCatalogDatasetRequestFileType'
type V1RefGeneCatalogDatasetRequestFileType string

// List of v1RefGeneCatalogDatasetRequestFileType
const (
	V1REFGENECATALOGDATASETREQUESTFILETYPE_UNSPECIFIED V1RefGeneCatalogDatasetRequestFileType = "FILE_TYPE_UNSPECIFIED"
	V1REFGENECATALOGDATASETREQUESTFILETYPE_NUCLEOTIDE V1RefGeneCatalogDatasetRequestFileType = "FILE_TYPE_NUCLEOTIDE"
	V1REFGENECATALOGDATASETREQUESTFILETYPE_PROTEIN V1RefGeneCatalogDatasetRequestFileType = "FILE_TYPE_PROTEIN"
)

// All allowed values of V1RefGeneCatalogDatasetRequestFileType enum
var AllowedV1RefGeneCatalogDatasetRequestFileTypeEnumValues = []V1RefGeneCatalogDatasetRequestFileType{
	"FILE_TYPE_UNSPECIFIED",
	"FILE_TYPE_NUCLEOTIDE",
	"FILE_TYPE_PROTEIN",
}

func (v *V1RefGeneCatalogDatasetRequestFileType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1RefGeneCatalogDatasetRequestFileType(value)
	for _, existing := range AllowedV1RefGeneCatalogDatasetRequestFileTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1RefGeneCatalogDatasetRequestFileType", value)
}

// NewV1RefGeneCatalogDatasetRequestFileTypeFromValue returns a pointer to a valid V1RefGeneCatalogDatasetRequestFileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1RefGeneCatalogDatasetRequestFileTypeFromValue(v string) (*V1RefGeneCatalogDatasetRequestFileType, error) {
	ev := V1RefGeneCatalogDatasetRequestFileType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1RefGeneCatalogDatasetRequestFileType: valid values are %v", v, AllowedV1RefGeneCatalogDatasetRequestFileTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1RefGeneCatalogDatasetRequestFileType) IsValid() bool {
	for _, existing := range AllowedV1RefGeneCatalogDatasetRequestFileTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1RefGeneCatalogDatasetRequestFileType value
func (v V1RefGeneCatalogDatasetRequestFileType) Ptr() *V1RefGeneCatalogDatasetRequestFileType {
	return &v
}

type NullableV1RefGeneCatalogDatasetRequestFileType struct {
	value *V1RefGeneCatalogDatasetRequestFileType
	isSet bool
}

func (v NullableV1RefGeneCatalogDatasetRequestFileType) Get() *V1RefGeneCatalogDatasetRequestFileType {
	return v.value
}

func (v *NullableV1RefGeneCatalogDatasetRequestFileType) Set(val *V1RefGeneCatalogDatasetRequestFileType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1RefGeneCatalogDatasetRequestFileType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1RefGeneCatalogDatasetRequestFileType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1RefGeneCatalogDatasetRequestFileType(val *V1RefGeneCatalogDatasetRequestFileType) *NullableV1RefGeneCatalogDatasetRequestFileType {
	return &NullableV1RefGeneCatalogDatasetRequestFileType{value: val, isSet: true}
}

func (v NullableV1RefGeneCatalogDatasetRequestFileType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1RefGeneCatalogDatasetRequestFileType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

