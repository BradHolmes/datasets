/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 1 API is considred stable and will not be subject to breaking changes. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1GeneDescriptorGeneType the model 'V1GeneDescriptorGeneType'
type V1GeneDescriptorGeneType string

// List of v1GeneDescriptorGeneType
const (
	V1GENEDESCRIPTORGENETYPE_UNKNOWN V1GeneDescriptorGeneType = "UNKNOWN"
	V1GENEDESCRIPTORGENETYPE_T_RNA V1GeneDescriptorGeneType = "tRNA"
	V1GENEDESCRIPTORGENETYPE_R_RNA V1GeneDescriptorGeneType = "rRNA"
	V1GENEDESCRIPTORGENETYPE_SN_RNA V1GeneDescriptorGeneType = "snRNA"
	V1GENEDESCRIPTORGENETYPE_SC_RNA V1GeneDescriptorGeneType = "scRNA"
	V1GENEDESCRIPTORGENETYPE_SNO_RNA V1GeneDescriptorGeneType = "snoRNA"
	V1GENEDESCRIPTORGENETYPE_PROTEIN_CODING V1GeneDescriptorGeneType = "PROTEIN_CODING"
	V1GENEDESCRIPTORGENETYPE_PSEUDO V1GeneDescriptorGeneType = "PSEUDO"
	V1GENEDESCRIPTORGENETYPE_TRANSPOSON V1GeneDescriptorGeneType = "TRANSPOSON"
	V1GENEDESCRIPTORGENETYPE_MISC_RNA V1GeneDescriptorGeneType = "miscRNA"
	V1GENEDESCRIPTORGENETYPE_NC_RNA V1GeneDescriptorGeneType = "ncRNA"
	V1GENEDESCRIPTORGENETYPE_BIOLOGICAL_REGION V1GeneDescriptorGeneType = "BIOLOGICAL_REGION"
	V1GENEDESCRIPTORGENETYPE_OTHER V1GeneDescriptorGeneType = "OTHER"
)

// All allowed values of V1GeneDescriptorGeneType enum
var AllowedV1GeneDescriptorGeneTypeEnumValues = []V1GeneDescriptorGeneType{
	"UNKNOWN",
	"tRNA",
	"rRNA",
	"snRNA",
	"scRNA",
	"snoRNA",
	"PROTEIN_CODING",
	"PSEUDO",
	"TRANSPOSON",
	"miscRNA",
	"ncRNA",
	"BIOLOGICAL_REGION",
	"OTHER",
}

func (v *V1GeneDescriptorGeneType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1GeneDescriptorGeneType(value)
	for _, existing := range AllowedV1GeneDescriptorGeneTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1GeneDescriptorGeneType", value)
}

// NewV1GeneDescriptorGeneTypeFromValue returns a pointer to a valid V1GeneDescriptorGeneType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1GeneDescriptorGeneTypeFromValue(v string) (*V1GeneDescriptorGeneType, error) {
	ev := V1GeneDescriptorGeneType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1GeneDescriptorGeneType: valid values are %v", v, AllowedV1GeneDescriptorGeneTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1GeneDescriptorGeneType) IsValid() bool {
	for _, existing := range AllowedV1GeneDescriptorGeneTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1GeneDescriptorGeneType value
func (v V1GeneDescriptorGeneType) Ptr() *V1GeneDescriptorGeneType {
	return &v
}

type NullableV1GeneDescriptorGeneType struct {
	value *V1GeneDescriptorGeneType
	isSet bool
}

func (v NullableV1GeneDescriptorGeneType) Get() *V1GeneDescriptorGeneType {
	return v.value
}

func (v *NullableV1GeneDescriptorGeneType) Set(val *V1GeneDescriptorGeneType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GeneDescriptorGeneType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GeneDescriptorGeneType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GeneDescriptorGeneType(val *V1GeneDescriptorGeneType) *NullableV1GeneDescriptorGeneType {
	return &NullableV1GeneDescriptorGeneType{value: val, isSet: true}
}

func (v NullableV1GeneDescriptorGeneType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GeneDescriptorGeneType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

