/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 1 API is considred stable and will not be subject to breaking changes. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1SeqRangeSet struct for V1SeqRangeSet
type V1SeqRangeSet struct {
	AccessionVersion *string `json:"accession_version,omitempty"`
	Range *[]V1Range `json:"range,omitempty"`
}

// NewV1SeqRangeSet instantiates a new V1SeqRangeSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SeqRangeSet() *V1SeqRangeSet {
	this := V1SeqRangeSet{}
	return &this
}

// NewV1SeqRangeSetWithDefaults instantiates a new V1SeqRangeSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SeqRangeSetWithDefaults() *V1SeqRangeSet {
	this := V1SeqRangeSet{}
	return &this
}

// GetAccessionVersion returns the AccessionVersion field value if set, zero value otherwise.
func (o *V1SeqRangeSet) GetAccessionVersion() string {
	if o == nil || o.AccessionVersion == nil {
		var ret string
		return ret
	}
	return *o.AccessionVersion
}

// GetAccessionVersionOk returns a tuple with the AccessionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SeqRangeSet) GetAccessionVersionOk() (*string, bool) {
	if o == nil || o.AccessionVersion == nil {
		return nil, false
	}
	return o.AccessionVersion, true
}

// HasAccessionVersion returns a boolean if a field has been set.
func (o *V1SeqRangeSet) HasAccessionVersion() bool {
	if o != nil && o.AccessionVersion != nil {
		return true
	}

	return false
}

// SetAccessionVersion gets a reference to the given string and assigns it to the AccessionVersion field.
func (o *V1SeqRangeSet) SetAccessionVersion(v string) {
	o.AccessionVersion = &v
}

// GetRange returns the Range field value if set, zero value otherwise.
func (o *V1SeqRangeSet) GetRange() []V1Range {
	if o == nil || o.Range == nil {
		var ret []V1Range
		return ret
	}
	return *o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SeqRangeSet) GetRangeOk() (*[]V1Range, bool) {
	if o == nil || o.Range == nil {
		return nil, false
	}
	return o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *V1SeqRangeSet) HasRange() bool {
	if o != nil && o.Range != nil {
		return true
	}

	return false
}

// SetRange gets a reference to the given []V1Range and assigns it to the Range field.
func (o *V1SeqRangeSet) SetRange(v []V1Range) {
	o.Range = &v
}

func (o V1SeqRangeSet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessionVersion != nil  {
		toSerialize["accession_version"] = o.AccessionVersion
	}
	if o.Range != nil && len(o.GetRange()) > 0  {
		toSerialize["range"] = o.Range
	}
	return json.Marshal(toSerialize)
}

type NullableV1SeqRangeSet struct {
	value *V1SeqRangeSet
	isSet bool
}

func (v NullableV1SeqRangeSet) Get() *V1SeqRangeSet {
	return v.value
}

func (v *NullableV1SeqRangeSet) Set(val *V1SeqRangeSet) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SeqRangeSet) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SeqRangeSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SeqRangeSet(val *V1SeqRangeSet) *NullableV1SeqRangeSet {
	return &NullableV1SeqRangeSet{value: val, isSet: true}
}

func (v NullableV1SeqRangeSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SeqRangeSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


