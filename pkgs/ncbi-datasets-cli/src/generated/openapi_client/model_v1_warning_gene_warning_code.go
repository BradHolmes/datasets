/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1WarningGeneWarningCode the model 'V1WarningGeneWarningCode'
type V1WarningGeneWarningCode string

// List of v1WarningGeneWarningCode
const (
	V1WARNINGGENEWARNINGCODE_UNKNOWN_GENE_WARNING_CODE V1WarningGeneWarningCode = "UNKNOWN_GENE_WARNING_CODE"
	V1WARNINGGENEWARNINGCODE_ACCESSION_VERSION_MISMATCH V1WarningGeneWarningCode = "ACCESSION_VERSION_MISMATCH"
	V1WARNINGGENEWARNINGCODE_REPLACED_GENE_ID V1WarningGeneWarningCode = "REPLACED_GENE_ID"
	V1WARNINGGENEWARNINGCODE_DISCONTINUED_GENE_ID V1WarningGeneWarningCode = "DISCONTINUED_GENE_ID"
	V1WARNINGGENEWARNINGCODE_UNRECOGNIZED_GENE_ID V1WarningGeneWarningCode = "UNRECOGNIZED_GENE_ID"
	V1WARNINGGENEWARNINGCODE_UNRECOGNIZED_GENE_SYMBOL V1WarningGeneWarningCode = "UNRECOGNIZED_GENE_SYMBOL"
	V1WARNINGGENEWARNINGCODE_UNRECOGNIZED_ACCESSION V1WarningGeneWarningCode = "UNRECOGNIZED_ACCESSION"
	V1WARNINGGENEWARNINGCODE_UNRECOGNIZED_TAX_TOKEN V1WarningGeneWarningCode = "UNRECOGNIZED_TAX_TOKEN"
)

// All allowed values of V1WarningGeneWarningCode enum
var AllowedV1WarningGeneWarningCodeEnumValues = []V1WarningGeneWarningCode{
	"UNKNOWN_GENE_WARNING_CODE",
	"ACCESSION_VERSION_MISMATCH",
	"REPLACED_GENE_ID",
	"DISCONTINUED_GENE_ID",
	"UNRECOGNIZED_GENE_ID",
	"UNRECOGNIZED_GENE_SYMBOL",
	"UNRECOGNIZED_ACCESSION",
	"UNRECOGNIZED_TAX_TOKEN",
}

func (v *V1WarningGeneWarningCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1WarningGeneWarningCode(value)
	for _, existing := range AllowedV1WarningGeneWarningCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1WarningGeneWarningCode", value)
}

// NewV1WarningGeneWarningCodeFromValue returns a pointer to a valid V1WarningGeneWarningCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1WarningGeneWarningCodeFromValue(v string) (*V1WarningGeneWarningCode, error) {
	ev := V1WarningGeneWarningCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1WarningGeneWarningCode: valid values are %v", v, AllowedV1WarningGeneWarningCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1WarningGeneWarningCode) IsValid() bool {
	for _, existing := range AllowedV1WarningGeneWarningCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1WarningGeneWarningCode value
func (v V1WarningGeneWarningCode) Ptr() *V1WarningGeneWarningCode {
	return &v
}

type NullableV1WarningGeneWarningCode struct {
	value *V1WarningGeneWarningCode
	isSet bool
}

func (v NullableV1WarningGeneWarningCode) Get() *V1WarningGeneWarningCode {
	return v.value
}

func (v *NullableV1WarningGeneWarningCode) Set(val *V1WarningGeneWarningCode) {
	v.value = val
	v.isSet = true
}

func (v NullableV1WarningGeneWarningCode) IsSet() bool {
	return v.isSet
}

func (v *NullableV1WarningGeneWarningCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1WarningGeneWarningCode(val *V1WarningGeneWarningCode) *NullableV1WarningGeneWarningCode {
	return &NullableV1WarningGeneWarningCode{value: val, isSet: true}
}

func (v NullableV1WarningGeneWarningCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1WarningGeneWarningCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

