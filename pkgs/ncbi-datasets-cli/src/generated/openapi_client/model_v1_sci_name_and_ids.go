/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1SciNameAndIds struct for V1SciNameAndIds
type V1SciNameAndIds struct {
	SciNameAndIds *[]V1SciNameAndIdsSciNameAndId `json:"sci_name_and_ids,omitempty"`
}

// NewV1SciNameAndIds instantiates a new V1SciNameAndIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SciNameAndIds() *V1SciNameAndIds {
	this := V1SciNameAndIds{}
	return &this
}

// NewV1SciNameAndIdsWithDefaults instantiates a new V1SciNameAndIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SciNameAndIdsWithDefaults() *V1SciNameAndIds {
	this := V1SciNameAndIds{}
	return &this
}

// GetSciNameAndIds returns the SciNameAndIds field value if set, zero value otherwise.
func (o *V1SciNameAndIds) GetSciNameAndIds() []V1SciNameAndIdsSciNameAndId {
	if o == nil || o.SciNameAndIds == nil {
		var ret []V1SciNameAndIdsSciNameAndId
		return ret
	}
	return *o.SciNameAndIds
}

// GetSciNameAndIdsOk returns a tuple with the SciNameAndIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SciNameAndIds) GetSciNameAndIdsOk() (*[]V1SciNameAndIdsSciNameAndId, bool) {
	if o == nil || o.SciNameAndIds == nil {
		return nil, false
	}
	return o.SciNameAndIds, true
}

// HasSciNameAndIds returns a boolean if a field has been set.
func (o *V1SciNameAndIds) HasSciNameAndIds() bool {
	if o != nil && o.SciNameAndIds != nil {
		return true
	}

	return false
}

// SetSciNameAndIds gets a reference to the given []V1SciNameAndIdsSciNameAndId and assigns it to the SciNameAndIds field.
func (o *V1SciNameAndIds) SetSciNameAndIds(v []V1SciNameAndIdsSciNameAndId) {
	o.SciNameAndIds = &v
}

func (o V1SciNameAndIds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SciNameAndIds != nil && len(o.GetSciNameAndIds()) > 0  {
		toSerialize["sci_name_and_ids"] = o.SciNameAndIds
	}
	return json.Marshal(toSerialize)
}

type NullableV1SciNameAndIds struct {
	value *V1SciNameAndIds
	isSet bool
}

func (v NullableV1SciNameAndIds) Get() *V1SciNameAndIds {
	return v.value
}

func (v *NullableV1SciNameAndIds) Set(val *V1SciNameAndIds) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SciNameAndIds) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SciNameAndIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SciNameAndIds(val *V1SciNameAndIds) *NullableV1SciNameAndIds {
	return &NullableV1SciNameAndIds{value: val, isSet: true}
}

func (v NullableV1SciNameAndIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SciNameAndIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


