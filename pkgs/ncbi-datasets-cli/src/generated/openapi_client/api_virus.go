/*
 * NCBI Datasets API
 *
 * NCBI service to query and download biological sequence data across all domains of life from NCBI databases.
 *
 * API version: v1alpha
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package datasets

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
	"github.com/antihax/optional"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// VirusApiService VirusApi service
type VirusApiService service

// Sars2ProteinDownloadOpts Optional parameters for the method 'Sars2ProteinDownload'
type Sars2ProteinDownloadOpts struct {
    RefseqOnly optional.Bool
    AnnotatedOnly optional.Bool
    ReleasedSince optional.Time
    Host optional.String
    GeoLocation optional.String
    CompleteOnly optional.Bool
    IncludeAnnotationType optional.Interface
    Filename optional.String
}

/*
Sars2ProteinDownload Download SARS-CoV-2 protein and CDS datasets by protein name
Download a SARS-CoV-2 protein datasets
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param proteins Which proteins to retrieve in the data package
 * @param optional nil or *Sars2ProteinDownloadOpts - Optional Parameters:
 * @param "RefseqOnly" (optional.Bool) -  If true, limit results to RefSeq genomes.
 * @param "AnnotatedOnly" (optional.Bool) -  If true, limit results to annotated genomes.
 * @param "ReleasedSince" (optional.Time) -  If set, limit results to viral genomes that have been released after a specified date and time. April 1, 2020 midnight UTC should be formatted as follows: 2020-04-01T00:00:00.000Z.
 * @param "Host" (optional.String) -  If set, limit results to genomes extracted from this host (Taxonomy ID or name).
 * @param "GeoLocation" (optional.String) -  Assemblies from this location (country and state, or continent).
 * @param "CompleteOnly" (optional.Bool) -  only include complete genomes.
 * @param "IncludeAnnotationType" (optional.Interface of []string) -  Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
 * @param "Filename" (optional.String) -  Output file name.
@return *os.File
*/
func (a *VirusApiService) Sars2ProteinDownload(ctx _context.Context, proteins []string, localVarOptionals *Sars2ProteinDownloadOpts) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/virus/taxon/sars2/protein/{proteins}/download"
	localVarPath = strings.Replace(localVarPath, "{"+"proteins"+"}", _neturl.PathEscape(parameterToString(proteins, "csv")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if len(proteins) < 1 {
		return localVarReturnValue, nil, reportError("proteins must have at least 1 elements")
	}

	if localVarOptionals != nil && localVarOptionals.RefseqOnly.IsSet() {
		localVarQueryParams.Add("refseq_only", parameterToString(localVarOptionals.RefseqOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AnnotatedOnly.IsSet() {
		localVarQueryParams.Add("annotated_only", parameterToString(localVarOptionals.AnnotatedOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReleasedSince.IsSet() {
		localVarQueryParams.Add("released_since", parameterToString(localVarOptionals.ReleasedSince.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Host.IsSet() {
		localVarQueryParams.Add("host", parameterToString(localVarOptionals.Host.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GeoLocation.IsSet() {
		localVarQueryParams.Add("geo_location", parameterToString(localVarOptionals.GeoLocation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompleteOnly.IsSet() {
		localVarQueryParams.Add("complete_only", parameterToString(localVarOptionals.CompleteOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeAnnotationType.IsSet() {
		t:=localVarOptionals.IncludeAnnotationType.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include_annotation_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include_annotation_type", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Filename.IsSet() {
		localVarQueryParams.Add("filename", parameterToString(localVarOptionals.Filename.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/zip"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarHTTPHeaderAccept == "application/zip" {
		localVarHeaderParams["Accept-encoding"] = "identity"
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["api-key"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if localVarHTTPResponse.Header.Get("Content-Type") != "application/json" {
		return localVarReturnValue, localVarHTTPResponse, nil
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// Sars2ProteinSummaryOpts Optional parameters for the method 'Sars2ProteinSummary'
type Sars2ProteinSummaryOpts struct {
    RefseqOnly optional.Bool
    AnnotatedOnly optional.Bool
    ReleasedSince optional.Time
    Host optional.String
    GeoLocation optional.String
    CompleteOnly optional.Bool
    IncludeAnnotationType optional.Interface
}

/*
Sars2ProteinSummary Summary of SARS-CoV-2 protein and CDS datasets by protein name
Download a summary of available SARS-CoV-2 protein datasets
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param proteins Which proteins to retrieve in the data package
 * @param optional nil or *Sars2ProteinSummaryOpts - Optional Parameters:
 * @param "RefseqOnly" (optional.Bool) -  If true, limit results to RefSeq genomes.
 * @param "AnnotatedOnly" (optional.Bool) -  If true, limit results to annotated genomes.
 * @param "ReleasedSince" (optional.Time) -  If set, limit results to viral genomes that have been released after a specified date and time. April 1, 2020 midnight UTC should be formatted as follows: 2020-04-01T00:00:00.000Z.
 * @param "Host" (optional.String) -  If set, limit results to genomes extracted from this host (Taxonomy ID or name).
 * @param "GeoLocation" (optional.String) -  Assemblies from this location (country and state, or continent).
 * @param "CompleteOnly" (optional.Bool) -  only include complete genomes.
 * @param "IncludeAnnotationType" (optional.Interface of []string) -  Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
@return V1alpha1DownloadSummary
*/
func (a *VirusApiService) Sars2ProteinSummary(ctx _context.Context, proteins []string, localVarOptionals *Sars2ProteinSummaryOpts) (V1alpha1DownloadSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V1alpha1DownloadSummary
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/virus/taxon/sars2/protein/{proteins}"
	localVarPath = strings.Replace(localVarPath, "{"+"proteins"+"}", _neturl.PathEscape(parameterToString(proteins, "csv")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if len(proteins) < 1 {
		return localVarReturnValue, nil, reportError("proteins must have at least 1 elements")
	}

	if localVarOptionals != nil && localVarOptionals.RefseqOnly.IsSet() {
		localVarQueryParams.Add("refseq_only", parameterToString(localVarOptionals.RefseqOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AnnotatedOnly.IsSet() {
		localVarQueryParams.Add("annotated_only", parameterToString(localVarOptionals.AnnotatedOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReleasedSince.IsSet() {
		localVarQueryParams.Add("released_since", parameterToString(localVarOptionals.ReleasedSince.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Host.IsSet() {
		localVarQueryParams.Add("host", parameterToString(localVarOptionals.Host.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GeoLocation.IsSet() {
		localVarQueryParams.Add("geo_location", parameterToString(localVarOptionals.GeoLocation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompleteOnly.IsSet() {
		localVarQueryParams.Add("complete_only", parameterToString(localVarOptionals.CompleteOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeAnnotationType.IsSet() {
		t:=localVarOptionals.IncludeAnnotationType.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include_annotation_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include_annotation_type", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarHTTPHeaderAccept == "application/zip" {
		localVarHeaderParams["Accept-encoding"] = "identity"
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["api-key"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if localVarHTTPResponse.Header.Get("Content-Type") != "application/json" {
		return localVarReturnValue, localVarHTTPResponse, nil
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// Sars2ProteinTableOpts Optional parameters for the method 'Sars2ProteinTable'
type Sars2ProteinTableOpts struct {
    RefseqOnly optional.Bool
    AnnotatedOnly optional.Bool
    ReleasedSince optional.Time
    Host optional.String
    GeoLocation optional.String
    CompleteOnly optional.Bool
    TableFields optional.Interface
    Format optional.String
}

/*
Sars2ProteinTable Get SARS-CoV-2 protein metadata in a tabular format.
Get protein metadata in tabular format for SARS-CoV-2 genomes.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param proteins Which proteins to retrieve in the data package
 * @param optional nil or *Sars2ProteinTableOpts - Optional Parameters:
 * @param "RefseqOnly" (optional.Bool) -  If true, limit results to RefSeq genomes.
 * @param "AnnotatedOnly" (optional.Bool) -  If true, limit results to annotated genomes.
 * @param "ReleasedSince" (optional.Time) -  If set, limit results to viral genomes that have been released after a specified date and time. April 1, 2020 midnight UTC should be formatted as follows: 2020-04-01T00:00:00.000Z.
 * @param "Host" (optional.String) -  If set, limit results to genomes extracted from this host (Taxonomy ID or name).
 * @param "GeoLocation" (optional.String) -  Assemblies from this location (country and state, or continent).
 * @param "CompleteOnly" (optional.Bool) -  only include complete genomes.
 * @param "TableFields" (optional.Interface of []string) -  Specify which fields to include in the tabular report.
 * @param "Format" (optional.String) -  Choose download format.
@return StreamResultOfV1alpha1TabularOutput
*/
func (a *VirusApiService) Sars2ProteinTable(ctx _context.Context, proteins []string, localVarOptionals *Sars2ProteinTableOpts) (StreamResultOfV1alpha1TabularOutput, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StreamResultOfV1alpha1TabularOutput
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/virus/taxon/sars2/protein/{proteins}/table"
	localVarPath = strings.Replace(localVarPath, "{"+"proteins"+"}", _neturl.PathEscape(parameterToString(proteins, "csv")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if len(proteins) < 1 {
		return localVarReturnValue, nil, reportError("proteins must have at least 1 elements")
	}

	if localVarOptionals != nil && localVarOptionals.RefseqOnly.IsSet() {
		localVarQueryParams.Add("refseq_only", parameterToString(localVarOptionals.RefseqOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AnnotatedOnly.IsSet() {
		localVarQueryParams.Add("annotated_only", parameterToString(localVarOptionals.AnnotatedOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReleasedSince.IsSet() {
		localVarQueryParams.Add("released_since", parameterToString(localVarOptionals.ReleasedSince.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Host.IsSet() {
		localVarQueryParams.Add("host", parameterToString(localVarOptionals.Host.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GeoLocation.IsSet() {
		localVarQueryParams.Add("geo_location", parameterToString(localVarOptionals.GeoLocation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompleteOnly.IsSet() {
		localVarQueryParams.Add("complete_only", parameterToString(localVarOptionals.CompleteOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TableFields.IsSet() {
		t:=localVarOptionals.TableFields.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("table_fields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("table_fields", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Format.IsSet() {
		localVarQueryParams.Add("format", parameterToString(localVarOptionals.Format.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/tsv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarHTTPHeaderAccept == "application/zip" {
		localVarHeaderParams["Accept-encoding"] = "identity"
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["api-key"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if localVarHTTPResponse.Header.Get("Content-Type") != "application/json" {
		return localVarReturnValue, localVarHTTPResponse, nil
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// VirusGenomeDownloadOpts Optional parameters for the method 'VirusGenomeDownload'
type VirusGenomeDownloadOpts struct {
    RefseqOnly optional.Bool
    AnnotatedOnly optional.Bool
    ReleasedSince optional.Time
    Host optional.String
    PangolinClassification optional.String
    GeoLocation optional.String
    CompleteOnly optional.Bool
    ExcludeSequence optional.Bool
    IncludeAnnotationType optional.Interface
    Filename optional.String
}

/*
VirusGenomeDownload Download Coronavirus genome datasets by taxon
Download a Coronavirus genome datasets by taxon
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taxon NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank
 * @param optional nil or *VirusGenomeDownloadOpts - Optional Parameters:
 * @param "RefseqOnly" (optional.Bool) -  If true, limit results to RefSeq genomes.
 * @param "AnnotatedOnly" (optional.Bool) -  If true, limit results to annotated genomes.
 * @param "ReleasedSince" (optional.Time) -  If set, limit results to viral genomes that have been released after a specified date (and optionally, time). April 1, 2020 midnight UTC should be formatted as follows: 2020-04-01T00:00:00.000Z.
 * @param "Host" (optional.String) -  If set, limit results to genomes extracted from this host (Taxonomy ID or name).
 * @param "PangolinClassification" (optional.String) -  If set, limit results to genomes classified to this lineage by the PangoLearn tool.
 * @param "GeoLocation" (optional.String) -  Assemblies from this location (country and state, or continent).
 * @param "CompleteOnly" (optional.Bool) -  only include complete genomes.
 * @param "ExcludeSequence" (optional.Bool) -  Set to true to omit the genomic sequence.
 * @param "IncludeAnnotationType" (optional.Interface of []string) -  Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
 * @param "Filename" (optional.String) -  Output file name.
@return *os.File
*/
func (a *VirusApiService) VirusGenomeDownload(ctx _context.Context, taxon string, localVarOptionals *VirusGenomeDownloadOpts) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/virus/taxon/{taxon}/genome/download"
	localVarPath = strings.Replace(localVarPath, "{"+"taxon"+"}", _neturl.PathEscape(parameterToString(taxon, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.RefseqOnly.IsSet() {
		localVarQueryParams.Add("refseq_only", parameterToString(localVarOptionals.RefseqOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AnnotatedOnly.IsSet() {
		localVarQueryParams.Add("annotated_only", parameterToString(localVarOptionals.AnnotatedOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReleasedSince.IsSet() {
		localVarQueryParams.Add("released_since", parameterToString(localVarOptionals.ReleasedSince.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Host.IsSet() {
		localVarQueryParams.Add("host", parameterToString(localVarOptionals.Host.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PangolinClassification.IsSet() {
		localVarQueryParams.Add("pangolin_classification", parameterToString(localVarOptionals.PangolinClassification.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GeoLocation.IsSet() {
		localVarQueryParams.Add("geo_location", parameterToString(localVarOptionals.GeoLocation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompleteOnly.IsSet() {
		localVarQueryParams.Add("complete_only", parameterToString(localVarOptionals.CompleteOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeSequence.IsSet() {
		localVarQueryParams.Add("exclude_sequence", parameterToString(localVarOptionals.ExcludeSequence.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeAnnotationType.IsSet() {
		t:=localVarOptionals.IncludeAnnotationType.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include_annotation_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include_annotation_type", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Filename.IsSet() {
		localVarQueryParams.Add("filename", parameterToString(localVarOptionals.Filename.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/zip"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarHTTPHeaderAccept == "application/zip" {
		localVarHeaderParams["Accept-encoding"] = "identity"
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["api-key"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if localVarHTTPResponse.Header.Get("Content-Type") != "application/json" {
		return localVarReturnValue, localVarHTTPResponse, nil
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// VirusGenomeSummaryOpts Optional parameters for the method 'VirusGenomeSummary'
type VirusGenomeSummaryOpts struct {
    RefseqOnly optional.Bool
    AnnotatedOnly optional.Bool
    ReleasedSince optional.Time
    Host optional.String
    PangolinClassification optional.String
    GeoLocation optional.String
    CompleteOnly optional.Bool
    ExcludeSequence optional.Bool
    IncludeAnnotationType optional.Interface
}

/*
VirusGenomeSummary Get summary data for Coronaviridae genomes by taxon
Get summary data and download by command line instructions for Coronaviridae genomes by taxon.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taxon NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank
 * @param optional nil or *VirusGenomeSummaryOpts - Optional Parameters:
 * @param "RefseqOnly" (optional.Bool) -  If true, limit results to RefSeq genomes.
 * @param "AnnotatedOnly" (optional.Bool) -  If true, limit results to annotated genomes.
 * @param "ReleasedSince" (optional.Time) -  If set, limit results to viral genomes that have been released after a specified date (and optionally, time). April 1, 2020 midnight UTC should be formatted as follows: 2020-04-01T00:00:00.000Z.
 * @param "Host" (optional.String) -  If set, limit results to genomes extracted from this host (Taxonomy ID or name).
 * @param "PangolinClassification" (optional.String) -  If set, limit results to genomes classified to this lineage by the PangoLearn tool.
 * @param "GeoLocation" (optional.String) -  Assemblies from this location (country and state, or continent).
 * @param "CompleteOnly" (optional.Bool) -  only include complete genomes.
 * @param "ExcludeSequence" (optional.Bool) -  Set to true to omit the genomic sequence.
 * @param "IncludeAnnotationType" (optional.Interface of []string) -  Select additional types of annotation to include in the data package.  If unset, no annotation is provided.
@return V1alpha1DownloadSummary
*/
func (a *VirusApiService) VirusGenomeSummary(ctx _context.Context, taxon string, localVarOptionals *VirusGenomeSummaryOpts) (V1alpha1DownloadSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V1alpha1DownloadSummary
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/virus/taxon/{taxon}/genome"
	localVarPath = strings.Replace(localVarPath, "{"+"taxon"+"}", _neturl.PathEscape(parameterToString(taxon, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.RefseqOnly.IsSet() {
		localVarQueryParams.Add("refseq_only", parameterToString(localVarOptionals.RefseqOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AnnotatedOnly.IsSet() {
		localVarQueryParams.Add("annotated_only", parameterToString(localVarOptionals.AnnotatedOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReleasedSince.IsSet() {
		localVarQueryParams.Add("released_since", parameterToString(localVarOptionals.ReleasedSince.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Host.IsSet() {
		localVarQueryParams.Add("host", parameterToString(localVarOptionals.Host.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PangolinClassification.IsSet() {
		localVarQueryParams.Add("pangolin_classification", parameterToString(localVarOptionals.PangolinClassification.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GeoLocation.IsSet() {
		localVarQueryParams.Add("geo_location", parameterToString(localVarOptionals.GeoLocation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompleteOnly.IsSet() {
		localVarQueryParams.Add("complete_only", parameterToString(localVarOptionals.CompleteOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ExcludeSequence.IsSet() {
		localVarQueryParams.Add("exclude_sequence", parameterToString(localVarOptionals.ExcludeSequence.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.IncludeAnnotationType.IsSet() {
		t:=localVarOptionals.IncludeAnnotationType.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include_annotation_type", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include_annotation_type", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarHTTPHeaderAccept == "application/zip" {
		localVarHeaderParams["Accept-encoding"] = "identity"
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["api-key"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if localVarHTTPResponse.Header.Get("Content-Type") != "application/json" {
		return localVarReturnValue, localVarHTTPResponse, nil
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// VirusGenomeTableOpts Optional parameters for the method 'VirusGenomeTable'
type VirusGenomeTableOpts struct {
    RefseqOnly optional.Bool
    AnnotatedOnly optional.Bool
    ReleasedSince optional.Time
    Host optional.String
    PangolinClassification optional.String
    GeoLocation optional.String
    CompleteOnly optional.Bool
    TableFields optional.Interface
    Format optional.String
}

/*
VirusGenomeTable Get viral genomic metadata in a tabular format.
Get viral genomic metadata in tabular format for Coronaviridae genomes by taxon.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param taxon NCBI Taxonomy ID or name (common or scientific) at any taxonomic rank
 * @param optional nil or *VirusGenomeTableOpts - Optional Parameters:
 * @param "RefseqOnly" (optional.Bool) -  If true, limit results to RefSeq genomes.
 * @param "AnnotatedOnly" (optional.Bool) -  If true, limit results to annotated genomes.
 * @param "ReleasedSince" (optional.Time) -  If set, limit results to viral genomes that have been released after a specified date (and optionally, time). April 1, 2020 midnight UTC should be formatted as follows: 2020-04-01T00:00:00.000Z.
 * @param "Host" (optional.String) -  If set, limit results to genomes extracted from this host (Taxonomy ID or name).
 * @param "PangolinClassification" (optional.String) -  If set, limit results to genomes classified to this lineage by the PangoLearn tool.
 * @param "GeoLocation" (optional.String) -  Assemblies from this location (country and state, or continent).
 * @param "CompleteOnly" (optional.Bool) -  only include complete genomes.
 * @param "TableFields" (optional.Interface of []string) -  Specify which fields to include in the tabular report.
 * @param "Format" (optional.String) -  Choose download format (tsv, csv or jsonl).
@return StreamResultOfV1alpha1TabularOutput
*/
func (a *VirusApiService) VirusGenomeTable(ctx _context.Context, taxon string, localVarOptionals *VirusGenomeTableOpts) (StreamResultOfV1alpha1TabularOutput, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  StreamResultOfV1alpha1TabularOutput
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/virus/taxon/{taxon}/genome/table"
	localVarPath = strings.Replace(localVarPath, "{"+"taxon"+"}", _neturl.PathEscape(parameterToString(taxon, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.RefseqOnly.IsSet() {
		localVarQueryParams.Add("refseq_only", parameterToString(localVarOptionals.RefseqOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.AnnotatedOnly.IsSet() {
		localVarQueryParams.Add("annotated_only", parameterToString(localVarOptionals.AnnotatedOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ReleasedSince.IsSet() {
		localVarQueryParams.Add("released_since", parameterToString(localVarOptionals.ReleasedSince.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Host.IsSet() {
		localVarQueryParams.Add("host", parameterToString(localVarOptionals.Host.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PangolinClassification.IsSet() {
		localVarQueryParams.Add("pangolin_classification", parameterToString(localVarOptionals.PangolinClassification.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.GeoLocation.IsSet() {
		localVarQueryParams.Add("geo_location", parameterToString(localVarOptionals.GeoLocation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.CompleteOnly.IsSet() {
		localVarQueryParams.Add("complete_only", parameterToString(localVarOptionals.CompleteOnly.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TableFields.IsSet() {
		t:=localVarOptionals.TableFields.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("table_fields", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("table_fields", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Format.IsSet() {
		localVarQueryParams.Add("format", parameterToString(localVarOptionals.Format.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/tsv"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if localVarHTTPHeaderAccept == "application/zip" {
		localVarHeaderParams["Accept-encoding"] = "identity"
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["api-key"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}
	if localVarHTTPResponse.Header.Get("Content-Type") != "application/json" {
		return localVarReturnValue, localVarHTTPResponse, nil
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RpcStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
