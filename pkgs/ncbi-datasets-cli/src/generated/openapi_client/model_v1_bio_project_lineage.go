/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1BioProjectLineage struct for V1BioProjectLineage
type V1BioProjectLineage struct {
	Bioprojects *[]V1BioProject `json:"bioprojects,omitempty"`
}

// NewV1BioProjectLineage instantiates a new V1BioProjectLineage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1BioProjectLineage() *V1BioProjectLineage {
	this := V1BioProjectLineage{}
	return &this
}

// NewV1BioProjectLineageWithDefaults instantiates a new V1BioProjectLineage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1BioProjectLineageWithDefaults() *V1BioProjectLineage {
	this := V1BioProjectLineage{}
	return &this
}

// GetBioprojects returns the Bioprojects field value if set, zero value otherwise.
func (o *V1BioProjectLineage) GetBioprojects() []V1BioProject {
	if o == nil || o.Bioprojects == nil {
		var ret []V1BioProject
		return ret
	}
	return *o.Bioprojects
}

// GetBioprojectsOk returns a tuple with the Bioprojects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1BioProjectLineage) GetBioprojectsOk() (*[]V1BioProject, bool) {
	if o == nil || o.Bioprojects == nil {
		return nil, false
	}
	return o.Bioprojects, true
}

// HasBioprojects returns a boolean if a field has been set.
func (o *V1BioProjectLineage) HasBioprojects() bool {
	if o != nil && o.Bioprojects != nil {
		return true
	}

	return false
}

// SetBioprojects gets a reference to the given []V1BioProject and assigns it to the Bioprojects field.
func (o *V1BioProjectLineage) SetBioprojects(v []V1BioProject) {
	o.Bioprojects = &v
}

func (o V1BioProjectLineage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bioprojects != nil && len(o.GetBioprojects()) > 0  {
		toSerialize["bioprojects"] = o.Bioprojects
	}
	return json.Marshal(toSerialize)
}

type NullableV1BioProjectLineage struct {
	value *V1BioProjectLineage
	isSet bool
}

func (v NullableV1BioProjectLineage) Get() *V1BioProjectLineage {
	return v.value
}

func (v *NullableV1BioProjectLineage) Set(val *V1BioProjectLineage) {
	v.value = val
	v.isSet = true
}

func (v NullableV1BioProjectLineage) IsSet() bool {
	return v.isSet
}

func (v *NullableV1BioProjectLineage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1BioProjectLineage(val *V1BioProjectLineage) *NullableV1BioProjectLineage {
	return &NullableV1BioProjectLineage{value: val, isSet: true}
}

func (v NullableV1BioProjectLineage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1BioProjectLineage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


