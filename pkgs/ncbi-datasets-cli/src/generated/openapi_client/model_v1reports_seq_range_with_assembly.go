/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsSeqRangeWithAssembly struct for V1reportsSeqRangeWithAssembly
type V1reportsSeqRangeWithAssembly struct {
	AssemblyAccession *string `json:"assembly_accession,omitempty"`
	SequenceRange *V1reportsSeqRangeSet `json:"sequence_range,omitempty"`
}

// NewV1reportsSeqRangeWithAssembly instantiates a new V1reportsSeqRangeWithAssembly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsSeqRangeWithAssembly() *V1reportsSeqRangeWithAssembly {
	this := V1reportsSeqRangeWithAssembly{}
	return &this
}

// NewV1reportsSeqRangeWithAssemblyWithDefaults instantiates a new V1reportsSeqRangeWithAssembly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsSeqRangeWithAssemblyWithDefaults() *V1reportsSeqRangeWithAssembly {
	this := V1reportsSeqRangeWithAssembly{}
	return &this
}

// GetAssemblyAccession returns the AssemblyAccession field value if set, zero value otherwise.
func (o *V1reportsSeqRangeWithAssembly) GetAssemblyAccession() string {
	if o == nil || o.AssemblyAccession == nil {
		var ret string
		return ret
	}
	return *o.AssemblyAccession
}

// GetAssemblyAccessionOk returns a tuple with the AssemblyAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsSeqRangeWithAssembly) GetAssemblyAccessionOk() (*string, bool) {
	if o == nil || o.AssemblyAccession == nil {
		return nil, false
	}
	return o.AssemblyAccession, true
}

// HasAssemblyAccession returns a boolean if a field has been set.
func (o *V1reportsSeqRangeWithAssembly) HasAssemblyAccession() bool {
	if o != nil && o.AssemblyAccession != nil {
		return true
	}

	return false
}

// SetAssemblyAccession gets a reference to the given string and assigns it to the AssemblyAccession field.
func (o *V1reportsSeqRangeWithAssembly) SetAssemblyAccession(v string) {
	o.AssemblyAccession = &v
}

// GetSequenceRange returns the SequenceRange field value if set, zero value otherwise.
func (o *V1reportsSeqRangeWithAssembly) GetSequenceRange() V1reportsSeqRangeSet {
	if o == nil || o.SequenceRange == nil {
		var ret V1reportsSeqRangeSet
		return ret
	}
	return *o.SequenceRange
}

// GetSequenceRangeOk returns a tuple with the SequenceRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsSeqRangeWithAssembly) GetSequenceRangeOk() (*V1reportsSeqRangeSet, bool) {
	if o == nil || o.SequenceRange == nil {
		return nil, false
	}
	return o.SequenceRange, true
}

// HasSequenceRange returns a boolean if a field has been set.
func (o *V1reportsSeqRangeWithAssembly) HasSequenceRange() bool {
	if o != nil && o.SequenceRange != nil {
		return true
	}

	return false
}

// SetSequenceRange gets a reference to the given V1reportsSeqRangeSet and assigns it to the SequenceRange field.
func (o *V1reportsSeqRangeWithAssembly) SetSequenceRange(v V1reportsSeqRangeSet) {
	o.SequenceRange = &v
}

func (o V1reportsSeqRangeWithAssembly) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssemblyAccession != nil  {
		toSerialize["assembly_accession"] = o.AssemblyAccession
	}
	if o.SequenceRange != nil  {
		toSerialize["sequence_range"] = o.SequenceRange
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsSeqRangeWithAssembly struct {
	value *V1reportsSeqRangeWithAssembly
	isSet bool
}

func (v NullableV1reportsSeqRangeWithAssembly) Get() *V1reportsSeqRangeWithAssembly {
	return v.value
}

func (v *NullableV1reportsSeqRangeWithAssembly) Set(val *V1reportsSeqRangeWithAssembly) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsSeqRangeWithAssembly) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsSeqRangeWithAssembly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsSeqRangeWithAssembly(val *V1reportsSeqRangeWithAssembly) *NullableV1reportsSeqRangeWithAssembly {
	return &NullableV1reportsSeqRangeWithAssembly{value: val, isSet: true}
}

func (v NullableV1reportsSeqRangeWithAssembly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsSeqRangeWithAssembly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


