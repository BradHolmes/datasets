/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1OrganismRankType the model 'V1OrganismRankType'
type V1OrganismRankType string

// List of v1OrganismRankType
const (
	V1ORGANISMRANKTYPE_NO_RANK V1OrganismRankType = "NO_RANK"
	V1ORGANISMRANKTYPE_SUPERKINGDOM V1OrganismRankType = "SUPERKINGDOM"
	V1ORGANISMRANKTYPE_KINGDOM V1OrganismRankType = "KINGDOM"
	V1ORGANISMRANKTYPE_SUBKINGDOM V1OrganismRankType = "SUBKINGDOM"
	V1ORGANISMRANKTYPE_SUPERPHYLUM V1OrganismRankType = "SUPERPHYLUM"
	V1ORGANISMRANKTYPE_SUBPHYLUM V1OrganismRankType = "SUBPHYLUM"
	V1ORGANISMRANKTYPE_PHYLUM V1OrganismRankType = "PHYLUM"
	V1ORGANISMRANKTYPE_CLADE V1OrganismRankType = "CLADE"
	V1ORGANISMRANKTYPE_SUPERCLASS V1OrganismRankType = "SUPERCLASS"
	V1ORGANISMRANKTYPE_CLASS V1OrganismRankType = "CLASS"
	V1ORGANISMRANKTYPE_SUBCLASS V1OrganismRankType = "SUBCLASS"
	V1ORGANISMRANKTYPE_INFRACLASS V1OrganismRankType = "INFRACLASS"
	V1ORGANISMRANKTYPE_COHORT V1OrganismRankType = "COHORT"
	V1ORGANISMRANKTYPE_SUBCOHORT V1OrganismRankType = "SUBCOHORT"
	V1ORGANISMRANKTYPE_SUPERORDER V1OrganismRankType = "SUPERORDER"
	V1ORGANISMRANKTYPE_ORDER V1OrganismRankType = "ORDER"
	V1ORGANISMRANKTYPE_SUBORDER V1OrganismRankType = "SUBORDER"
	V1ORGANISMRANKTYPE_INFRAORDER V1OrganismRankType = "INFRAORDER"
	V1ORGANISMRANKTYPE_PARVORDER V1OrganismRankType = "PARVORDER"
	V1ORGANISMRANKTYPE_SUPERFAMILY V1OrganismRankType = "SUPERFAMILY"
	V1ORGANISMRANKTYPE_FAMILY V1OrganismRankType = "FAMILY"
	V1ORGANISMRANKTYPE_SUBFAMILY V1OrganismRankType = "SUBFAMILY"
	V1ORGANISMRANKTYPE_GENUS V1OrganismRankType = "GENUS"
	V1ORGANISMRANKTYPE_SUBGENUS V1OrganismRankType = "SUBGENUS"
	V1ORGANISMRANKTYPE_SPECIES_GROUP V1OrganismRankType = "SPECIES_GROUP"
	V1ORGANISMRANKTYPE_SPECIES_SUBGROUP V1OrganismRankType = "SPECIES_SUBGROUP"
	V1ORGANISMRANKTYPE_SPECIES V1OrganismRankType = "SPECIES"
	V1ORGANISMRANKTYPE_SUBSPECIES V1OrganismRankType = "SUBSPECIES"
	V1ORGANISMRANKTYPE_TRIBE V1OrganismRankType = "TRIBE"
	V1ORGANISMRANKTYPE_SUBTRIBE V1OrganismRankType = "SUBTRIBE"
	V1ORGANISMRANKTYPE_FORMA V1OrganismRankType = "FORMA"
	V1ORGANISMRANKTYPE_VARIETAS V1OrganismRankType = "VARIETAS"
	V1ORGANISMRANKTYPE_STRAIN V1OrganismRankType = "STRAIN"
	V1ORGANISMRANKTYPE_SECTION V1OrganismRankType = "SECTION"
	V1ORGANISMRANKTYPE_SUBSECTION V1OrganismRankType = "SUBSECTION"
	V1ORGANISMRANKTYPE_PATHOGROUP V1OrganismRankType = "PATHOGROUP"
	V1ORGANISMRANKTYPE_SUBVARIETY V1OrganismRankType = "SUBVARIETY"
	V1ORGANISMRANKTYPE_GENOTYPE V1OrganismRankType = "GENOTYPE"
	V1ORGANISMRANKTYPE_SEROTYPE V1OrganismRankType = "SEROTYPE"
	V1ORGANISMRANKTYPE_ISOLATE V1OrganismRankType = "ISOLATE"
	V1ORGANISMRANKTYPE_MORPH V1OrganismRankType = "MORPH"
	V1ORGANISMRANKTYPE_SERIES V1OrganismRankType = "SERIES"
	V1ORGANISMRANKTYPE_FORMA_SPECIALIS V1OrganismRankType = "FORMA_SPECIALIS"
	V1ORGANISMRANKTYPE_SEROGROUP V1OrganismRankType = "SEROGROUP"
	V1ORGANISMRANKTYPE_BIOTYPE V1OrganismRankType = "BIOTYPE"
)

// All allowed values of V1OrganismRankType enum
var AllowedV1OrganismRankTypeEnumValues = []V1OrganismRankType{
	"NO_RANK",
	"SUPERKINGDOM",
	"KINGDOM",
	"SUBKINGDOM",
	"SUPERPHYLUM",
	"SUBPHYLUM",
	"PHYLUM",
	"CLADE",
	"SUPERCLASS",
	"CLASS",
	"SUBCLASS",
	"INFRACLASS",
	"COHORT",
	"SUBCOHORT",
	"SUPERORDER",
	"ORDER",
	"SUBORDER",
	"INFRAORDER",
	"PARVORDER",
	"SUPERFAMILY",
	"FAMILY",
	"SUBFAMILY",
	"GENUS",
	"SUBGENUS",
	"SPECIES_GROUP",
	"SPECIES_SUBGROUP",
	"SPECIES",
	"SUBSPECIES",
	"TRIBE",
	"SUBTRIBE",
	"FORMA",
	"VARIETAS",
	"STRAIN",
	"SECTION",
	"SUBSECTION",
	"PATHOGROUP",
	"SUBVARIETY",
	"GENOTYPE",
	"SEROTYPE",
	"ISOLATE",
	"MORPH",
	"SERIES",
	"FORMA_SPECIALIS",
	"SEROGROUP",
	"BIOTYPE",
}

func (v *V1OrganismRankType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1OrganismRankType(value)
	for _, existing := range AllowedV1OrganismRankTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1OrganismRankType", value)
}

// NewV1OrganismRankTypeFromValue returns a pointer to a valid V1OrganismRankType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1OrganismRankTypeFromValue(v string) (*V1OrganismRankType, error) {
	ev := V1OrganismRankType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1OrganismRankType: valid values are %v", v, AllowedV1OrganismRankTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1OrganismRankType) IsValid() bool {
	for _, existing := range AllowedV1OrganismRankTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1OrganismRankType value
func (v V1OrganismRankType) Ptr() *V1OrganismRankType {
	return &v
}

type NullableV1OrganismRankType struct {
	value *V1OrganismRankType
	isSet bool
}

func (v NullableV1OrganismRankType) Get() *V1OrganismRankType {
	return v.value
}

func (v *NullableV1OrganismRankType) Set(val *V1OrganismRankType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1OrganismRankType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1OrganismRankType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1OrganismRankType(val *V1OrganismRankType) *NullableV1OrganismRankType {
	return &NullableV1OrganismRankType{value: val, isSet: true}
}

func (v NullableV1OrganismRankType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1OrganismRankType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

