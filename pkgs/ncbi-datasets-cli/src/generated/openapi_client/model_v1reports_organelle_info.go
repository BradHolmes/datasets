/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsOrganelleInfo struct for V1reportsOrganelleInfo
type V1reportsOrganelleInfo struct {
	AssemblyName *string `json:"assembly_name,omitempty"`
	InfraspecificName *string `json:"infraspecific_name,omitempty"`
	Bioproject *[]string `json:"bioproject,omitempty"`
	Description *string `json:"description,omitempty"`
	TotalSeqLength *string `json:"total_seq_length,omitempty"`
	Submitter *string `json:"submitter,omitempty"`
}

// NewV1reportsOrganelleInfo instantiates a new V1reportsOrganelleInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsOrganelleInfo() *V1reportsOrganelleInfo {
	this := V1reportsOrganelleInfo{}
	return &this
}

// NewV1reportsOrganelleInfoWithDefaults instantiates a new V1reportsOrganelleInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsOrganelleInfoWithDefaults() *V1reportsOrganelleInfo {
	this := V1reportsOrganelleInfo{}
	return &this
}

// GetAssemblyName returns the AssemblyName field value if set, zero value otherwise.
func (o *V1reportsOrganelleInfo) GetAssemblyName() string {
	if o == nil || o.AssemblyName == nil {
		var ret string
		return ret
	}
	return *o.AssemblyName
}

// GetAssemblyNameOk returns a tuple with the AssemblyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsOrganelleInfo) GetAssemblyNameOk() (*string, bool) {
	if o == nil || o.AssemblyName == nil {
		return nil, false
	}
	return o.AssemblyName, true
}

// HasAssemblyName returns a boolean if a field has been set.
func (o *V1reportsOrganelleInfo) HasAssemblyName() bool {
	if o != nil && o.AssemblyName != nil {
		return true
	}

	return false
}

// SetAssemblyName gets a reference to the given string and assigns it to the AssemblyName field.
func (o *V1reportsOrganelleInfo) SetAssemblyName(v string) {
	o.AssemblyName = &v
}

// GetInfraspecificName returns the InfraspecificName field value if set, zero value otherwise.
func (o *V1reportsOrganelleInfo) GetInfraspecificName() string {
	if o == nil || o.InfraspecificName == nil {
		var ret string
		return ret
	}
	return *o.InfraspecificName
}

// GetInfraspecificNameOk returns a tuple with the InfraspecificName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsOrganelleInfo) GetInfraspecificNameOk() (*string, bool) {
	if o == nil || o.InfraspecificName == nil {
		return nil, false
	}
	return o.InfraspecificName, true
}

// HasInfraspecificName returns a boolean if a field has been set.
func (o *V1reportsOrganelleInfo) HasInfraspecificName() bool {
	if o != nil && o.InfraspecificName != nil {
		return true
	}

	return false
}

// SetInfraspecificName gets a reference to the given string and assigns it to the InfraspecificName field.
func (o *V1reportsOrganelleInfo) SetInfraspecificName(v string) {
	o.InfraspecificName = &v
}

// GetBioproject returns the Bioproject field value if set, zero value otherwise.
func (o *V1reportsOrganelleInfo) GetBioproject() []string {
	if o == nil || o.Bioproject == nil {
		var ret []string
		return ret
	}
	return *o.Bioproject
}

// GetBioprojectOk returns a tuple with the Bioproject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsOrganelleInfo) GetBioprojectOk() (*[]string, bool) {
	if o == nil || o.Bioproject == nil {
		return nil, false
	}
	return o.Bioproject, true
}

// HasBioproject returns a boolean if a field has been set.
func (o *V1reportsOrganelleInfo) HasBioproject() bool {
	if o != nil && o.Bioproject != nil {
		return true
	}

	return false
}

// SetBioproject gets a reference to the given []string and assigns it to the Bioproject field.
func (o *V1reportsOrganelleInfo) SetBioproject(v []string) {
	o.Bioproject = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V1reportsOrganelleInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsOrganelleInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V1reportsOrganelleInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V1reportsOrganelleInfo) SetDescription(v string) {
	o.Description = &v
}

// GetTotalSeqLength returns the TotalSeqLength field value if set, zero value otherwise.
func (o *V1reportsOrganelleInfo) GetTotalSeqLength() string {
	if o == nil || o.TotalSeqLength == nil {
		var ret string
		return ret
	}
	return *o.TotalSeqLength
}

// GetTotalSeqLengthOk returns a tuple with the TotalSeqLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsOrganelleInfo) GetTotalSeqLengthOk() (*string, bool) {
	if o == nil || o.TotalSeqLength == nil {
		return nil, false
	}
	return o.TotalSeqLength, true
}

// HasTotalSeqLength returns a boolean if a field has been set.
func (o *V1reportsOrganelleInfo) HasTotalSeqLength() bool {
	if o != nil && o.TotalSeqLength != nil {
		return true
	}

	return false
}

// SetTotalSeqLength gets a reference to the given string and assigns it to the TotalSeqLength field.
func (o *V1reportsOrganelleInfo) SetTotalSeqLength(v string) {
	o.TotalSeqLength = &v
}

// GetSubmitter returns the Submitter field value if set, zero value otherwise.
func (o *V1reportsOrganelleInfo) GetSubmitter() string {
	if o == nil || o.Submitter == nil {
		var ret string
		return ret
	}
	return *o.Submitter
}

// GetSubmitterOk returns a tuple with the Submitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsOrganelleInfo) GetSubmitterOk() (*string, bool) {
	if o == nil || o.Submitter == nil {
		return nil, false
	}
	return o.Submitter, true
}

// HasSubmitter returns a boolean if a field has been set.
func (o *V1reportsOrganelleInfo) HasSubmitter() bool {
	if o != nil && o.Submitter != nil {
		return true
	}

	return false
}

// SetSubmitter gets a reference to the given string and assigns it to the Submitter field.
func (o *V1reportsOrganelleInfo) SetSubmitter(v string) {
	o.Submitter = &v
}

func (o V1reportsOrganelleInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssemblyName != nil  {
		toSerialize["assembly_name"] = o.AssemblyName
	}
	if o.InfraspecificName != nil  {
		toSerialize["infraspecific_name"] = o.InfraspecificName
	}
	if o.Bioproject != nil && len(o.GetBioproject()) > 0  {
		toSerialize["bioproject"] = o.Bioproject
	}
	if o.Description != nil  {
		toSerialize["description"] = o.Description
	}
	if o.TotalSeqLength != nil  {
		toSerialize["total_seq_length"] = o.TotalSeqLength
	}
	if o.Submitter != nil  {
		toSerialize["submitter"] = o.Submitter
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsOrganelleInfo struct {
	value *V1reportsOrganelleInfo
	isSet bool
}

func (v NullableV1reportsOrganelleInfo) Get() *V1reportsOrganelleInfo {
	return v.value
}

func (v *NullableV1reportsOrganelleInfo) Set(val *V1reportsOrganelleInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsOrganelleInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsOrganelleInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsOrganelleInfo(val *V1reportsOrganelleInfo) *NullableV1reportsOrganelleInfo {
	return &NullableV1reportsOrganelleInfo{value: val, isSet: true}
}

func (v NullableV1reportsOrganelleInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsOrganelleInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


