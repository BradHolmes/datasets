/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsBioSampleOwner struct for V1reportsBioSampleOwner
type V1reportsBioSampleOwner struct {
	Name *string `json:"name,omitempty"`
	Contacts *[]V1reportsBioSampleContact `json:"contacts,omitempty"`
}

// NewV1reportsBioSampleOwner instantiates a new V1reportsBioSampleOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsBioSampleOwner() *V1reportsBioSampleOwner {
	this := V1reportsBioSampleOwner{}
	return &this
}

// NewV1reportsBioSampleOwnerWithDefaults instantiates a new V1reportsBioSampleOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsBioSampleOwnerWithDefaults() *V1reportsBioSampleOwner {
	this := V1reportsBioSampleOwner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1reportsBioSampleOwner) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsBioSampleOwner) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1reportsBioSampleOwner) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1reportsBioSampleOwner) SetName(v string) {
	o.Name = &v
}

// GetContacts returns the Contacts field value if set, zero value otherwise.
func (o *V1reportsBioSampleOwner) GetContacts() []V1reportsBioSampleContact {
	if o == nil || o.Contacts == nil {
		var ret []V1reportsBioSampleContact
		return ret
	}
	return *o.Contacts
}

// GetContactsOk returns a tuple with the Contacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsBioSampleOwner) GetContactsOk() (*[]V1reportsBioSampleContact, bool) {
	if o == nil || o.Contacts == nil {
		return nil, false
	}
	return o.Contacts, true
}

// HasContacts returns a boolean if a field has been set.
func (o *V1reportsBioSampleOwner) HasContacts() bool {
	if o != nil && o.Contacts != nil {
		return true
	}

	return false
}

// SetContacts gets a reference to the given []V1reportsBioSampleContact and assigns it to the Contacts field.
func (o *V1reportsBioSampleOwner) SetContacts(v []V1reportsBioSampleContact) {
	o.Contacts = &v
}

func (o V1reportsBioSampleOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil  {
		toSerialize["name"] = o.Name
	}
	if o.Contacts != nil && len(o.GetContacts()) > 0  {
		toSerialize["contacts"] = o.Contacts
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsBioSampleOwner struct {
	value *V1reportsBioSampleOwner
	isSet bool
}

func (v NullableV1reportsBioSampleOwner) Get() *V1reportsBioSampleOwner {
	return v.value
}

func (v *NullableV1reportsBioSampleOwner) Set(val *V1reportsBioSampleOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsBioSampleOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsBioSampleOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsBioSampleOwner(val *V1reportsBioSampleOwner) *NullableV1reportsBioSampleOwner {
	return &NullableV1reportsBioSampleOwner{value: val, isSet: true}
}

func (v NullableV1reportsBioSampleOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsBioSampleOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


