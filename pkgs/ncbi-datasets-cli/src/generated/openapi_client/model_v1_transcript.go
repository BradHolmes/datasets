/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1Transcript struct for V1Transcript
type V1Transcript struct {
	AccessionVersion *string `json:"accession_version,omitempty"`
	Name *string `json:"name,omitempty"`
	Length *int32 `json:"length,omitempty"`
	GenomicRange *V1SeqRangeSet `json:"genomic_range,omitempty"`
	Exons *V1SeqRangeSet `json:"exons,omitempty"`
	Cds *V1SeqRangeSet `json:"cds,omitempty"`
	GenomicLocations *[]V1GenomicLocation `json:"genomic_locations,omitempty"`
	EnsemblTranscript *string `json:"ensembl_transcript,omitempty"`
	Protein *V1Protein `json:"protein,omitempty"`
	Type *V1TranscriptTranscriptType `json:"type,omitempty"`
}

// NewV1Transcript instantiates a new V1Transcript object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Transcript() *V1Transcript {
	this := V1Transcript{}
	var type_ V1TranscriptTranscriptType = V1TRANSCRIPTTRANSCRIPTTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// NewV1TranscriptWithDefaults instantiates a new V1Transcript object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TranscriptWithDefaults() *V1Transcript {
	this := V1Transcript{}
	var type_ V1TranscriptTranscriptType = V1TRANSCRIPTTRANSCRIPTTYPE_UNKNOWN
	this.Type = &type_
	return &this
}

// GetAccessionVersion returns the AccessionVersion field value if set, zero value otherwise.
func (o *V1Transcript) GetAccessionVersion() string {
	if o == nil || o.AccessionVersion == nil {
		var ret string
		return ret
	}
	return *o.AccessionVersion
}

// GetAccessionVersionOk returns a tuple with the AccessionVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetAccessionVersionOk() (*string, bool) {
	if o == nil || o.AccessionVersion == nil {
		return nil, false
	}
	return o.AccessionVersion, true
}

// HasAccessionVersion returns a boolean if a field has been set.
func (o *V1Transcript) HasAccessionVersion() bool {
	if o != nil && o.AccessionVersion != nil {
		return true
	}

	return false
}

// SetAccessionVersion gets a reference to the given string and assigns it to the AccessionVersion field.
func (o *V1Transcript) SetAccessionVersion(v string) {
	o.AccessionVersion = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1Transcript) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1Transcript) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1Transcript) SetName(v string) {
	o.Name = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *V1Transcript) GetLength() int32 {
	if o == nil || o.Length == nil {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetLengthOk() (*int32, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *V1Transcript) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *V1Transcript) SetLength(v int32) {
	o.Length = &v
}

// GetGenomicRange returns the GenomicRange field value if set, zero value otherwise.
func (o *V1Transcript) GetGenomicRange() V1SeqRangeSet {
	if o == nil || o.GenomicRange == nil {
		var ret V1SeqRangeSet
		return ret
	}
	return *o.GenomicRange
}

// GetGenomicRangeOk returns a tuple with the GenomicRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetGenomicRangeOk() (*V1SeqRangeSet, bool) {
	if o == nil || o.GenomicRange == nil {
		return nil, false
	}
	return o.GenomicRange, true
}

// HasGenomicRange returns a boolean if a field has been set.
func (o *V1Transcript) HasGenomicRange() bool {
	if o != nil && o.GenomicRange != nil {
		return true
	}

	return false
}

// SetGenomicRange gets a reference to the given V1SeqRangeSet and assigns it to the GenomicRange field.
func (o *V1Transcript) SetGenomicRange(v V1SeqRangeSet) {
	o.GenomicRange = &v
}

// GetExons returns the Exons field value if set, zero value otherwise.
func (o *V1Transcript) GetExons() V1SeqRangeSet {
	if o == nil || o.Exons == nil {
		var ret V1SeqRangeSet
		return ret
	}
	return *o.Exons
}

// GetExonsOk returns a tuple with the Exons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetExonsOk() (*V1SeqRangeSet, bool) {
	if o == nil || o.Exons == nil {
		return nil, false
	}
	return o.Exons, true
}

// HasExons returns a boolean if a field has been set.
func (o *V1Transcript) HasExons() bool {
	if o != nil && o.Exons != nil {
		return true
	}

	return false
}

// SetExons gets a reference to the given V1SeqRangeSet and assigns it to the Exons field.
func (o *V1Transcript) SetExons(v V1SeqRangeSet) {
	o.Exons = &v
}

// GetCds returns the Cds field value if set, zero value otherwise.
func (o *V1Transcript) GetCds() V1SeqRangeSet {
	if o == nil || o.Cds == nil {
		var ret V1SeqRangeSet
		return ret
	}
	return *o.Cds
}

// GetCdsOk returns a tuple with the Cds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetCdsOk() (*V1SeqRangeSet, bool) {
	if o == nil || o.Cds == nil {
		return nil, false
	}
	return o.Cds, true
}

// HasCds returns a boolean if a field has been set.
func (o *V1Transcript) HasCds() bool {
	if o != nil && o.Cds != nil {
		return true
	}

	return false
}

// SetCds gets a reference to the given V1SeqRangeSet and assigns it to the Cds field.
func (o *V1Transcript) SetCds(v V1SeqRangeSet) {
	o.Cds = &v
}

// GetGenomicLocations returns the GenomicLocations field value if set, zero value otherwise.
func (o *V1Transcript) GetGenomicLocations() []V1GenomicLocation {
	if o == nil || o.GenomicLocations == nil {
		var ret []V1GenomicLocation
		return ret
	}
	return *o.GenomicLocations
}

// GetGenomicLocationsOk returns a tuple with the GenomicLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetGenomicLocationsOk() (*[]V1GenomicLocation, bool) {
	if o == nil || o.GenomicLocations == nil {
		return nil, false
	}
	return o.GenomicLocations, true
}

// HasGenomicLocations returns a boolean if a field has been set.
func (o *V1Transcript) HasGenomicLocations() bool {
	if o != nil && o.GenomicLocations != nil {
		return true
	}

	return false
}

// SetGenomicLocations gets a reference to the given []V1GenomicLocation and assigns it to the GenomicLocations field.
func (o *V1Transcript) SetGenomicLocations(v []V1GenomicLocation) {
	o.GenomicLocations = &v
}

// GetEnsemblTranscript returns the EnsemblTranscript field value if set, zero value otherwise.
func (o *V1Transcript) GetEnsemblTranscript() string {
	if o == nil || o.EnsemblTranscript == nil {
		var ret string
		return ret
	}
	return *o.EnsemblTranscript
}

// GetEnsemblTranscriptOk returns a tuple with the EnsemblTranscript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetEnsemblTranscriptOk() (*string, bool) {
	if o == nil || o.EnsemblTranscript == nil {
		return nil, false
	}
	return o.EnsemblTranscript, true
}

// HasEnsemblTranscript returns a boolean if a field has been set.
func (o *V1Transcript) HasEnsemblTranscript() bool {
	if o != nil && o.EnsemblTranscript != nil {
		return true
	}

	return false
}

// SetEnsemblTranscript gets a reference to the given string and assigns it to the EnsemblTranscript field.
func (o *V1Transcript) SetEnsemblTranscript(v string) {
	o.EnsemblTranscript = &v
}

// GetProtein returns the Protein field value if set, zero value otherwise.
func (o *V1Transcript) GetProtein() V1Protein {
	if o == nil || o.Protein == nil {
		var ret V1Protein
		return ret
	}
	return *o.Protein
}

// GetProteinOk returns a tuple with the Protein field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetProteinOk() (*V1Protein, bool) {
	if o == nil || o.Protein == nil {
		return nil, false
	}
	return o.Protein, true
}

// HasProtein returns a boolean if a field has been set.
func (o *V1Transcript) HasProtein() bool {
	if o != nil && o.Protein != nil {
		return true
	}

	return false
}

// SetProtein gets a reference to the given V1Protein and assigns it to the Protein field.
func (o *V1Transcript) SetProtein(v V1Protein) {
	o.Protein = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V1Transcript) GetType() V1TranscriptTranscriptType {
	if o == nil || o.Type == nil {
		var ret V1TranscriptTranscriptType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Transcript) GetTypeOk() (*V1TranscriptTranscriptType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V1Transcript) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given V1TranscriptTranscriptType and assigns it to the Type field.
func (o *V1Transcript) SetType(v V1TranscriptTranscriptType) {
	o.Type = &v
}

func (o V1Transcript) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessionVersion != nil  {
		toSerialize["accession_version"] = o.AccessionVersion
	}
	if o.Name != nil  {
		toSerialize["name"] = o.Name
	}
	if o.Length != nil  {
		toSerialize["length"] = o.Length
	}
	if o.GenomicRange != nil  {
		toSerialize["genomic_range"] = o.GenomicRange
	}
	if o.Exons != nil  {
		toSerialize["exons"] = o.Exons
	}
	if o.Cds != nil  {
		toSerialize["cds"] = o.Cds
	}
	if o.GenomicLocations != nil && len(o.GetGenomicLocations()) > 0  {
		toSerialize["genomic_locations"] = o.GenomicLocations
	}
	if o.EnsemblTranscript != nil  {
		toSerialize["ensembl_transcript"] = o.EnsemblTranscript
	}
	if o.Protein != nil  {
		toSerialize["protein"] = o.Protein
	}
	if o.Type != nil  {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableV1Transcript struct {
	value *V1Transcript
	isSet bool
}

func (v NullableV1Transcript) Get() *V1Transcript {
	return v.value
}

func (v *NullableV1Transcript) Set(val *V1Transcript) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Transcript) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Transcript) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Transcript(val *V1Transcript) *NullableV1Transcript {
	return &NullableV1Transcript{value: val, isSet: true}
}

func (v NullableV1Transcript) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Transcript) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


