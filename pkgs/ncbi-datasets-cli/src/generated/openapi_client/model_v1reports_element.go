/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsElement struct for V1reportsElement
type V1reportsElement struct {
	Symbol *string `json:"symbol,omitempty"`
	Name *string `json:"name,omitempty"`
	Length *int32 `json:"length,omitempty"`
	ReferenceLength *int32 `json:"reference_length,omitempty"`
}

// NewV1reportsElement instantiates a new V1reportsElement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsElement() *V1reportsElement {
	this := V1reportsElement{}
	return &this
}

// NewV1reportsElementWithDefaults instantiates a new V1reportsElement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsElementWithDefaults() *V1reportsElement {
	this := V1reportsElement{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *V1reportsElement) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsElement) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *V1reportsElement) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *V1reportsElement) SetSymbol(v string) {
	o.Symbol = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1reportsElement) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsElement) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1reportsElement) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1reportsElement) SetName(v string) {
	o.Name = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *V1reportsElement) GetLength() int32 {
	if o == nil || o.Length == nil {
		var ret int32
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsElement) GetLengthOk() (*int32, bool) {
	if o == nil || o.Length == nil {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *V1reportsElement) HasLength() bool {
	if o != nil && o.Length != nil {
		return true
	}

	return false
}

// SetLength gets a reference to the given int32 and assigns it to the Length field.
func (o *V1reportsElement) SetLength(v int32) {
	o.Length = &v
}

// GetReferenceLength returns the ReferenceLength field value if set, zero value otherwise.
func (o *V1reportsElement) GetReferenceLength() int32 {
	if o == nil || o.ReferenceLength == nil {
		var ret int32
		return ret
	}
	return *o.ReferenceLength
}

// GetReferenceLengthOk returns a tuple with the ReferenceLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsElement) GetReferenceLengthOk() (*int32, bool) {
	if o == nil || o.ReferenceLength == nil {
		return nil, false
	}
	return o.ReferenceLength, true
}

// HasReferenceLength returns a boolean if a field has been set.
func (o *V1reportsElement) HasReferenceLength() bool {
	if o != nil && o.ReferenceLength != nil {
		return true
	}

	return false
}

// SetReferenceLength gets a reference to the given int32 and assigns it to the ReferenceLength field.
func (o *V1reportsElement) SetReferenceLength(v int32) {
	o.ReferenceLength = &v
}

func (o V1reportsElement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Symbol != nil  {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Name != nil  {
		toSerialize["name"] = o.Name
	}
	if o.Length != nil  {
		toSerialize["length"] = o.Length
	}
	if o.ReferenceLength != nil  {
		toSerialize["reference_length"] = o.ReferenceLength
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsElement struct {
	value *V1reportsElement
	isSet bool
}

func (v NullableV1reportsElement) Get() *V1reportsElement {
	return v.value
}

func (v *NullableV1reportsElement) Set(val *V1reportsElement) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsElement) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsElement(val *V1reportsElement) *NullableV1reportsElement {
	return &NullableV1reportsElement{value: val, isSet: true}
}

func (v NullableV1reportsElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


