/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsProkaryoteGene struct for V1reportsProkaryoteGene
type V1reportsProkaryoteGene struct {
	Accession *string `json:"accession,omitempty"`
	GeneSymbol *string `json:"gene_symbol,omitempty"`
	ProteinName *string `json:"protein_name,omitempty"`
	ProteinLength *int32 `json:"protein_length,omitempty"`
	TaxonomyScope *V1reportsOrganism `json:"taxonomy_scope,omitempty"`
	NumberOfGenomeMappings *int32 `json:"number_of_genome_mappings,omitempty"`
	ProteinNameEvidence *V1reportsProkaryoteGeneProteinNameEvidence `json:"protein_name_evidence,omitempty"`
	Description *string `json:"description,omitempty"`
	EcNumber *[]string `json:"ec_number,omitempty"`
}

// NewV1reportsProkaryoteGene instantiates a new V1reportsProkaryoteGene object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsProkaryoteGene() *V1reportsProkaryoteGene {
	this := V1reportsProkaryoteGene{}
	return &this
}

// NewV1reportsProkaryoteGeneWithDefaults instantiates a new V1reportsProkaryoteGene object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsProkaryoteGeneWithDefaults() *V1reportsProkaryoteGene {
	this := V1reportsProkaryoteGene{}
	return &this
}

// GetAccession returns the Accession field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGene) GetAccession() string {
	if o == nil || o.Accession == nil {
		var ret string
		return ret
	}
	return *o.Accession
}

// GetAccessionOk returns a tuple with the Accession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGene) GetAccessionOk() (*string, bool) {
	if o == nil || o.Accession == nil {
		return nil, false
	}
	return o.Accession, true
}

// HasAccession returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGene) HasAccession() bool {
	if o != nil && o.Accession != nil {
		return true
	}

	return false
}

// SetAccession gets a reference to the given string and assigns it to the Accession field.
func (o *V1reportsProkaryoteGene) SetAccession(v string) {
	o.Accession = &v
}

// GetGeneSymbol returns the GeneSymbol field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGene) GetGeneSymbol() string {
	if o == nil || o.GeneSymbol == nil {
		var ret string
		return ret
	}
	return *o.GeneSymbol
}

// GetGeneSymbolOk returns a tuple with the GeneSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGene) GetGeneSymbolOk() (*string, bool) {
	if o == nil || o.GeneSymbol == nil {
		return nil, false
	}
	return o.GeneSymbol, true
}

// HasGeneSymbol returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGene) HasGeneSymbol() bool {
	if o != nil && o.GeneSymbol != nil {
		return true
	}

	return false
}

// SetGeneSymbol gets a reference to the given string and assigns it to the GeneSymbol field.
func (o *V1reportsProkaryoteGene) SetGeneSymbol(v string) {
	o.GeneSymbol = &v
}

// GetProteinName returns the ProteinName field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGene) GetProteinName() string {
	if o == nil || o.ProteinName == nil {
		var ret string
		return ret
	}
	return *o.ProteinName
}

// GetProteinNameOk returns a tuple with the ProteinName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGene) GetProteinNameOk() (*string, bool) {
	if o == nil || o.ProteinName == nil {
		return nil, false
	}
	return o.ProteinName, true
}

// HasProteinName returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGene) HasProteinName() bool {
	if o != nil && o.ProteinName != nil {
		return true
	}

	return false
}

// SetProteinName gets a reference to the given string and assigns it to the ProteinName field.
func (o *V1reportsProkaryoteGene) SetProteinName(v string) {
	o.ProteinName = &v
}

// GetProteinLength returns the ProteinLength field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGene) GetProteinLength() int32 {
	if o == nil || o.ProteinLength == nil {
		var ret int32
		return ret
	}
	return *o.ProteinLength
}

// GetProteinLengthOk returns a tuple with the ProteinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGene) GetProteinLengthOk() (*int32, bool) {
	if o == nil || o.ProteinLength == nil {
		return nil, false
	}
	return o.ProteinLength, true
}

// HasProteinLength returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGene) HasProteinLength() bool {
	if o != nil && o.ProteinLength != nil {
		return true
	}

	return false
}

// SetProteinLength gets a reference to the given int32 and assigns it to the ProteinLength field.
func (o *V1reportsProkaryoteGene) SetProteinLength(v int32) {
	o.ProteinLength = &v
}

// GetTaxonomyScope returns the TaxonomyScope field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGene) GetTaxonomyScope() V1reportsOrganism {
	if o == nil || o.TaxonomyScope == nil {
		var ret V1reportsOrganism
		return ret
	}
	return *o.TaxonomyScope
}

// GetTaxonomyScopeOk returns a tuple with the TaxonomyScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGene) GetTaxonomyScopeOk() (*V1reportsOrganism, bool) {
	if o == nil || o.TaxonomyScope == nil {
		return nil, false
	}
	return o.TaxonomyScope, true
}

// HasTaxonomyScope returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGene) HasTaxonomyScope() bool {
	if o != nil && o.TaxonomyScope != nil {
		return true
	}

	return false
}

// SetTaxonomyScope gets a reference to the given V1reportsOrganism and assigns it to the TaxonomyScope field.
func (o *V1reportsProkaryoteGene) SetTaxonomyScope(v V1reportsOrganism) {
	o.TaxonomyScope = &v
}

// GetNumberOfGenomeMappings returns the NumberOfGenomeMappings field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGene) GetNumberOfGenomeMappings() int32 {
	if o == nil || o.NumberOfGenomeMappings == nil {
		var ret int32
		return ret
	}
	return *o.NumberOfGenomeMappings
}

// GetNumberOfGenomeMappingsOk returns a tuple with the NumberOfGenomeMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGene) GetNumberOfGenomeMappingsOk() (*int32, bool) {
	if o == nil || o.NumberOfGenomeMappings == nil {
		return nil, false
	}
	return o.NumberOfGenomeMappings, true
}

// HasNumberOfGenomeMappings returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGene) HasNumberOfGenomeMappings() bool {
	if o != nil && o.NumberOfGenomeMappings != nil {
		return true
	}

	return false
}

// SetNumberOfGenomeMappings gets a reference to the given int32 and assigns it to the NumberOfGenomeMappings field.
func (o *V1reportsProkaryoteGene) SetNumberOfGenomeMappings(v int32) {
	o.NumberOfGenomeMappings = &v
}

// GetProteinNameEvidence returns the ProteinNameEvidence field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGene) GetProteinNameEvidence() V1reportsProkaryoteGeneProteinNameEvidence {
	if o == nil || o.ProteinNameEvidence == nil {
		var ret V1reportsProkaryoteGeneProteinNameEvidence
		return ret
	}
	return *o.ProteinNameEvidence
}

// GetProteinNameEvidenceOk returns a tuple with the ProteinNameEvidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGene) GetProteinNameEvidenceOk() (*V1reportsProkaryoteGeneProteinNameEvidence, bool) {
	if o == nil || o.ProteinNameEvidence == nil {
		return nil, false
	}
	return o.ProteinNameEvidence, true
}

// HasProteinNameEvidence returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGene) HasProteinNameEvidence() bool {
	if o != nil && o.ProteinNameEvidence != nil {
		return true
	}

	return false
}

// SetProteinNameEvidence gets a reference to the given V1reportsProkaryoteGeneProteinNameEvidence and assigns it to the ProteinNameEvidence field.
func (o *V1reportsProkaryoteGene) SetProteinNameEvidence(v V1reportsProkaryoteGeneProteinNameEvidence) {
	o.ProteinNameEvidence = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGene) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGene) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGene) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V1reportsProkaryoteGene) SetDescription(v string) {
	o.Description = &v
}

// GetEcNumber returns the EcNumber field value if set, zero value otherwise.
func (o *V1reportsProkaryoteGene) GetEcNumber() []string {
	if o == nil || o.EcNumber == nil {
		var ret []string
		return ret
	}
	return *o.EcNumber
}

// GetEcNumberOk returns a tuple with the EcNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsProkaryoteGene) GetEcNumberOk() (*[]string, bool) {
	if o == nil || o.EcNumber == nil {
		return nil, false
	}
	return o.EcNumber, true
}

// HasEcNumber returns a boolean if a field has been set.
func (o *V1reportsProkaryoteGene) HasEcNumber() bool {
	if o != nil && o.EcNumber != nil {
		return true
	}

	return false
}

// SetEcNumber gets a reference to the given []string and assigns it to the EcNumber field.
func (o *V1reportsProkaryoteGene) SetEcNumber(v []string) {
	o.EcNumber = &v
}

func (o V1reportsProkaryoteGene) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Accession != nil  {
		toSerialize["accession"] = o.Accession
	}
	if o.GeneSymbol != nil  {
		toSerialize["gene_symbol"] = o.GeneSymbol
	}
	if o.ProteinName != nil  {
		toSerialize["protein_name"] = o.ProteinName
	}
	if o.ProteinLength != nil  {
		toSerialize["protein_length"] = o.ProteinLength
	}
	if o.TaxonomyScope != nil  {
		toSerialize["taxonomy_scope"] = o.TaxonomyScope
	}
	if o.NumberOfGenomeMappings != nil  {
		toSerialize["number_of_genome_mappings"] = o.NumberOfGenomeMappings
	}
	if o.ProteinNameEvidence != nil  {
		toSerialize["protein_name_evidence"] = o.ProteinNameEvidence
	}
	if o.Description != nil  {
		toSerialize["description"] = o.Description
	}
	if o.EcNumber != nil && len(o.GetEcNumber()) > 0  {
		toSerialize["ec_number"] = o.EcNumber
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsProkaryoteGene struct {
	value *V1reportsProkaryoteGene
	isSet bool
}

func (v NullableV1reportsProkaryoteGene) Get() *V1reportsProkaryoteGene {
	return v.value
}

func (v *NullableV1reportsProkaryoteGene) Set(val *V1reportsProkaryoteGene) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsProkaryoteGene) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsProkaryoteGene) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsProkaryoteGene(val *V1reportsProkaryoteGene) *NullableV1reportsProkaryoteGene {
	return &NullableV1reportsProkaryoteGene{value: val, isSet: true}
}

func (v NullableV1reportsProkaryoteGene) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsProkaryoteGene) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


