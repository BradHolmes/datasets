/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 1 API is considred stable and will not be subject to breaking changes. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1Error struct for V1Error
type V1Error struct {
	AssemblyErrorCode *V1ErrorAssemblyErrorCode `json:"assembly_error_code,omitempty"`
	GeneErrorCode *V1ErrorGeneErrorCode `json:"gene_error_code,omitempty"`
	VirusErrorCode *V1ErrorVirusErrorCode `json:"virus_error_code,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Message *string `json:"message,omitempty"`
	ValidIdentifiers *[]string `json:"valid_identifiers,omitempty"`
	InvalidIdentifiers *[]string `json:"invalid_identifiers,omitempty"`
}

// NewV1Error instantiates a new V1Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Error() *V1Error {
	this := V1Error{}
	var assemblyErrorCode V1ErrorAssemblyErrorCode = V1ERRORASSEMBLYERRORCODE_UNKNOWN_ASSEMBLY_ERROR_CODE
	this.AssemblyErrorCode = &assemblyErrorCode
	var geneErrorCode V1ErrorGeneErrorCode = V1ERRORGENEERRORCODE_UNKNOWN_GENE_ERROR_CODE
	this.GeneErrorCode = &geneErrorCode
	var virusErrorCode V1ErrorVirusErrorCode = V1ERRORVIRUSERRORCODE_UNKNOWN_VIRUS_ERROR_CODE
	this.VirusErrorCode = &virusErrorCode
	return &this
}

// NewV1ErrorWithDefaults instantiates a new V1Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ErrorWithDefaults() *V1Error {
	this := V1Error{}
	var assemblyErrorCode V1ErrorAssemblyErrorCode = V1ERRORASSEMBLYERRORCODE_UNKNOWN_ASSEMBLY_ERROR_CODE
	this.AssemblyErrorCode = &assemblyErrorCode
	var geneErrorCode V1ErrorGeneErrorCode = V1ERRORGENEERRORCODE_UNKNOWN_GENE_ERROR_CODE
	this.GeneErrorCode = &geneErrorCode
	var virusErrorCode V1ErrorVirusErrorCode = V1ERRORVIRUSERRORCODE_UNKNOWN_VIRUS_ERROR_CODE
	this.VirusErrorCode = &virusErrorCode
	return &this
}

// GetAssemblyErrorCode returns the AssemblyErrorCode field value if set, zero value otherwise.
func (o *V1Error) GetAssemblyErrorCode() V1ErrorAssemblyErrorCode {
	if o == nil || o.AssemblyErrorCode == nil {
		var ret V1ErrorAssemblyErrorCode
		return ret
	}
	return *o.AssemblyErrorCode
}

// GetAssemblyErrorCodeOk returns a tuple with the AssemblyErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Error) GetAssemblyErrorCodeOk() (*V1ErrorAssemblyErrorCode, bool) {
	if o == nil || o.AssemblyErrorCode == nil {
		return nil, false
	}
	return o.AssemblyErrorCode, true
}

// HasAssemblyErrorCode returns a boolean if a field has been set.
func (o *V1Error) HasAssemblyErrorCode() bool {
	if o != nil && o.AssemblyErrorCode != nil {
		return true
	}

	return false
}

// SetAssemblyErrorCode gets a reference to the given V1ErrorAssemblyErrorCode and assigns it to the AssemblyErrorCode field.
func (o *V1Error) SetAssemblyErrorCode(v V1ErrorAssemblyErrorCode) {
	o.AssemblyErrorCode = &v
}

// GetGeneErrorCode returns the GeneErrorCode field value if set, zero value otherwise.
func (o *V1Error) GetGeneErrorCode() V1ErrorGeneErrorCode {
	if o == nil || o.GeneErrorCode == nil {
		var ret V1ErrorGeneErrorCode
		return ret
	}
	return *o.GeneErrorCode
}

// GetGeneErrorCodeOk returns a tuple with the GeneErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Error) GetGeneErrorCodeOk() (*V1ErrorGeneErrorCode, bool) {
	if o == nil || o.GeneErrorCode == nil {
		return nil, false
	}
	return o.GeneErrorCode, true
}

// HasGeneErrorCode returns a boolean if a field has been set.
func (o *V1Error) HasGeneErrorCode() bool {
	if o != nil && o.GeneErrorCode != nil {
		return true
	}

	return false
}

// SetGeneErrorCode gets a reference to the given V1ErrorGeneErrorCode and assigns it to the GeneErrorCode field.
func (o *V1Error) SetGeneErrorCode(v V1ErrorGeneErrorCode) {
	o.GeneErrorCode = &v
}

// GetVirusErrorCode returns the VirusErrorCode field value if set, zero value otherwise.
func (o *V1Error) GetVirusErrorCode() V1ErrorVirusErrorCode {
	if o == nil || o.VirusErrorCode == nil {
		var ret V1ErrorVirusErrorCode
		return ret
	}
	return *o.VirusErrorCode
}

// GetVirusErrorCodeOk returns a tuple with the VirusErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Error) GetVirusErrorCodeOk() (*V1ErrorVirusErrorCode, bool) {
	if o == nil || o.VirusErrorCode == nil {
		return nil, false
	}
	return o.VirusErrorCode, true
}

// HasVirusErrorCode returns a boolean if a field has been set.
func (o *V1Error) HasVirusErrorCode() bool {
	if o != nil && o.VirusErrorCode != nil {
		return true
	}

	return false
}

// SetVirusErrorCode gets a reference to the given V1ErrorVirusErrorCode and assigns it to the VirusErrorCode field.
func (o *V1Error) SetVirusErrorCode(v V1ErrorVirusErrorCode) {
	o.VirusErrorCode = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *V1Error) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Error) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *V1Error) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *V1Error) SetReason(v string) {
	o.Reason = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *V1Error) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Error) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *V1Error) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *V1Error) SetMessage(v string) {
	o.Message = &v
}

// GetValidIdentifiers returns the ValidIdentifiers field value if set, zero value otherwise.
func (o *V1Error) GetValidIdentifiers() []string {
	if o == nil || o.ValidIdentifiers == nil {
		var ret []string
		return ret
	}
	return *o.ValidIdentifiers
}

// GetValidIdentifiersOk returns a tuple with the ValidIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Error) GetValidIdentifiersOk() (*[]string, bool) {
	if o == nil || o.ValidIdentifiers == nil {
		return nil, false
	}
	return o.ValidIdentifiers, true
}

// HasValidIdentifiers returns a boolean if a field has been set.
func (o *V1Error) HasValidIdentifiers() bool {
	if o != nil && o.ValidIdentifiers != nil {
		return true
	}

	return false
}

// SetValidIdentifiers gets a reference to the given []string and assigns it to the ValidIdentifiers field.
func (o *V1Error) SetValidIdentifiers(v []string) {
	o.ValidIdentifiers = &v
}

// GetInvalidIdentifiers returns the InvalidIdentifiers field value if set, zero value otherwise.
func (o *V1Error) GetInvalidIdentifiers() []string {
	if o == nil || o.InvalidIdentifiers == nil {
		var ret []string
		return ret
	}
	return *o.InvalidIdentifiers
}

// GetInvalidIdentifiersOk returns a tuple with the InvalidIdentifiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Error) GetInvalidIdentifiersOk() (*[]string, bool) {
	if o == nil || o.InvalidIdentifiers == nil {
		return nil, false
	}
	return o.InvalidIdentifiers, true
}

// HasInvalidIdentifiers returns a boolean if a field has been set.
func (o *V1Error) HasInvalidIdentifiers() bool {
	if o != nil && o.InvalidIdentifiers != nil {
		return true
	}

	return false
}

// SetInvalidIdentifiers gets a reference to the given []string and assigns it to the InvalidIdentifiers field.
func (o *V1Error) SetInvalidIdentifiers(v []string) {
	o.InvalidIdentifiers = &v
}

func (o V1Error) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssemblyErrorCode != nil  {
		toSerialize["assembly_error_code"] = o.AssemblyErrorCode
	}
	if o.GeneErrorCode != nil  {
		toSerialize["gene_error_code"] = o.GeneErrorCode
	}
	if o.VirusErrorCode != nil  {
		toSerialize["virus_error_code"] = o.VirusErrorCode
	}
	if o.Reason != nil  {
		toSerialize["reason"] = o.Reason
	}
	if o.Message != nil  {
		toSerialize["message"] = o.Message
	}
	if o.ValidIdentifiers != nil && len(o.GetValidIdentifiers()) > 0  {
		toSerialize["valid_identifiers"] = o.ValidIdentifiers
	}
	if o.InvalidIdentifiers != nil && len(o.GetInvalidIdentifiers()) > 0  {
		toSerialize["invalid_identifiers"] = o.InvalidIdentifiers
	}
	return json.Marshal(toSerialize)
}

type NullableV1Error struct {
	value *V1Error
	isSet bool
}

func (v NullableV1Error) Get() *V1Error {
	return v.value
}

func (v *NullableV1Error) Set(val *V1Error) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Error) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Error) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Error(val *V1Error) *NullableV1Error {
	return &NullableV1Error{value: val, isSet: true}
}

func (v NullableV1Error) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Error) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


