/*
 * NCBI Datasets API
 *
 * ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 
 *
 * API version: v1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1reportsAssemblyInfo struct for V1reportsAssemblyInfo
type V1reportsAssemblyInfo struct {
	AssemblyAccession *string `json:"assembly_accession,omitempty"`
	PairedAssemblyAccession *string `json:"paired_assembly_accession,omitempty"`
	AssemblyLevel *string `json:"assembly_level,omitempty"`
	AssemblyName *string `json:"assembly_name,omitempty"`
	AssemblyType *string `json:"assembly_type,omitempty"`
	BioprojectLineage *[]V1reportsBioProjectLineage `json:"bioproject_lineage,omitempty"`
	SubmissionDate *string `json:"submission_date,omitempty"`
	Description *string `json:"description,omitempty"`
	GenbankAssmAccession *string `json:"genbank_assm_accession,omitempty"`
	Submitter *string `json:"submitter,omitempty"`
	RefseqCategory *string `json:"refseq_category,omitempty"`
	RefseqAssmAccession *string `json:"refseq_assm_accession,omitempty"`
	UcscAssmName *string `json:"ucsc_assm_name,omitempty"`
	LinkedAssembly *string `json:"linked_assembly,omitempty"`
	SequencingTech *string `json:"sequencing_tech,omitempty"`
	BiosampleAccession *string `json:"biosample_accession,omitempty"`
	BlastUrl *string `json:"blast_url,omitempty"`
}

// NewV1reportsAssemblyInfo instantiates a new V1reportsAssemblyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1reportsAssemblyInfo() *V1reportsAssemblyInfo {
	this := V1reportsAssemblyInfo{}
	return &this
}

// NewV1reportsAssemblyInfoWithDefaults instantiates a new V1reportsAssemblyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1reportsAssemblyInfoWithDefaults() *V1reportsAssemblyInfo {
	this := V1reportsAssemblyInfo{}
	return &this
}

// GetAssemblyAccession returns the AssemblyAccession field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetAssemblyAccession() string {
	if o == nil || o.AssemblyAccession == nil {
		var ret string
		return ret
	}
	return *o.AssemblyAccession
}

// GetAssemblyAccessionOk returns a tuple with the AssemblyAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetAssemblyAccessionOk() (*string, bool) {
	if o == nil || o.AssemblyAccession == nil {
		return nil, false
	}
	return o.AssemblyAccession, true
}

// HasAssemblyAccession returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasAssemblyAccession() bool {
	if o != nil && o.AssemblyAccession != nil {
		return true
	}

	return false
}

// SetAssemblyAccession gets a reference to the given string and assigns it to the AssemblyAccession field.
func (o *V1reportsAssemblyInfo) SetAssemblyAccession(v string) {
	o.AssemblyAccession = &v
}

// GetPairedAssemblyAccession returns the PairedAssemblyAccession field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetPairedAssemblyAccession() string {
	if o == nil || o.PairedAssemblyAccession == nil {
		var ret string
		return ret
	}
	return *o.PairedAssemblyAccession
}

// GetPairedAssemblyAccessionOk returns a tuple with the PairedAssemblyAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetPairedAssemblyAccessionOk() (*string, bool) {
	if o == nil || o.PairedAssemblyAccession == nil {
		return nil, false
	}
	return o.PairedAssemblyAccession, true
}

// HasPairedAssemblyAccession returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasPairedAssemblyAccession() bool {
	if o != nil && o.PairedAssemblyAccession != nil {
		return true
	}

	return false
}

// SetPairedAssemblyAccession gets a reference to the given string and assigns it to the PairedAssemblyAccession field.
func (o *V1reportsAssemblyInfo) SetPairedAssemblyAccession(v string) {
	o.PairedAssemblyAccession = &v
}

// GetAssemblyLevel returns the AssemblyLevel field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetAssemblyLevel() string {
	if o == nil || o.AssemblyLevel == nil {
		var ret string
		return ret
	}
	return *o.AssemblyLevel
}

// GetAssemblyLevelOk returns a tuple with the AssemblyLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetAssemblyLevelOk() (*string, bool) {
	if o == nil || o.AssemblyLevel == nil {
		return nil, false
	}
	return o.AssemblyLevel, true
}

// HasAssemblyLevel returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasAssemblyLevel() bool {
	if o != nil && o.AssemblyLevel != nil {
		return true
	}

	return false
}

// SetAssemblyLevel gets a reference to the given string and assigns it to the AssemblyLevel field.
func (o *V1reportsAssemblyInfo) SetAssemblyLevel(v string) {
	o.AssemblyLevel = &v
}

// GetAssemblyName returns the AssemblyName field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetAssemblyName() string {
	if o == nil || o.AssemblyName == nil {
		var ret string
		return ret
	}
	return *o.AssemblyName
}

// GetAssemblyNameOk returns a tuple with the AssemblyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetAssemblyNameOk() (*string, bool) {
	if o == nil || o.AssemblyName == nil {
		return nil, false
	}
	return o.AssemblyName, true
}

// HasAssemblyName returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasAssemblyName() bool {
	if o != nil && o.AssemblyName != nil {
		return true
	}

	return false
}

// SetAssemblyName gets a reference to the given string and assigns it to the AssemblyName field.
func (o *V1reportsAssemblyInfo) SetAssemblyName(v string) {
	o.AssemblyName = &v
}

// GetAssemblyType returns the AssemblyType field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetAssemblyType() string {
	if o == nil || o.AssemblyType == nil {
		var ret string
		return ret
	}
	return *o.AssemblyType
}

// GetAssemblyTypeOk returns a tuple with the AssemblyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetAssemblyTypeOk() (*string, bool) {
	if o == nil || o.AssemblyType == nil {
		return nil, false
	}
	return o.AssemblyType, true
}

// HasAssemblyType returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasAssemblyType() bool {
	if o != nil && o.AssemblyType != nil {
		return true
	}

	return false
}

// SetAssemblyType gets a reference to the given string and assigns it to the AssemblyType field.
func (o *V1reportsAssemblyInfo) SetAssemblyType(v string) {
	o.AssemblyType = &v
}

// GetBioprojectLineage returns the BioprojectLineage field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetBioprojectLineage() []V1reportsBioProjectLineage {
	if o == nil || o.BioprojectLineage == nil {
		var ret []V1reportsBioProjectLineage
		return ret
	}
	return *o.BioprojectLineage
}

// GetBioprojectLineageOk returns a tuple with the BioprojectLineage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetBioprojectLineageOk() (*[]V1reportsBioProjectLineage, bool) {
	if o == nil || o.BioprojectLineage == nil {
		return nil, false
	}
	return o.BioprojectLineage, true
}

// HasBioprojectLineage returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasBioprojectLineage() bool {
	if o != nil && o.BioprojectLineage != nil {
		return true
	}

	return false
}

// SetBioprojectLineage gets a reference to the given []V1reportsBioProjectLineage and assigns it to the BioprojectLineage field.
func (o *V1reportsAssemblyInfo) SetBioprojectLineage(v []V1reportsBioProjectLineage) {
	o.BioprojectLineage = &v
}

// GetSubmissionDate returns the SubmissionDate field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetSubmissionDate() string {
	if o == nil || o.SubmissionDate == nil {
		var ret string
		return ret
	}
	return *o.SubmissionDate
}

// GetSubmissionDateOk returns a tuple with the SubmissionDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetSubmissionDateOk() (*string, bool) {
	if o == nil || o.SubmissionDate == nil {
		return nil, false
	}
	return o.SubmissionDate, true
}

// HasSubmissionDate returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasSubmissionDate() bool {
	if o != nil && o.SubmissionDate != nil {
		return true
	}

	return false
}

// SetSubmissionDate gets a reference to the given string and assigns it to the SubmissionDate field.
func (o *V1reportsAssemblyInfo) SetSubmissionDate(v string) {
	o.SubmissionDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V1reportsAssemblyInfo) SetDescription(v string) {
	o.Description = &v
}

// GetGenbankAssmAccession returns the GenbankAssmAccession field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetGenbankAssmAccession() string {
	if o == nil || o.GenbankAssmAccession == nil {
		var ret string
		return ret
	}
	return *o.GenbankAssmAccession
}

// GetGenbankAssmAccessionOk returns a tuple with the GenbankAssmAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetGenbankAssmAccessionOk() (*string, bool) {
	if o == nil || o.GenbankAssmAccession == nil {
		return nil, false
	}
	return o.GenbankAssmAccession, true
}

// HasGenbankAssmAccession returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasGenbankAssmAccession() bool {
	if o != nil && o.GenbankAssmAccession != nil {
		return true
	}

	return false
}

// SetGenbankAssmAccession gets a reference to the given string and assigns it to the GenbankAssmAccession field.
func (o *V1reportsAssemblyInfo) SetGenbankAssmAccession(v string) {
	o.GenbankAssmAccession = &v
}

// GetSubmitter returns the Submitter field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetSubmitter() string {
	if o == nil || o.Submitter == nil {
		var ret string
		return ret
	}
	return *o.Submitter
}

// GetSubmitterOk returns a tuple with the Submitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetSubmitterOk() (*string, bool) {
	if o == nil || o.Submitter == nil {
		return nil, false
	}
	return o.Submitter, true
}

// HasSubmitter returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasSubmitter() bool {
	if o != nil && o.Submitter != nil {
		return true
	}

	return false
}

// SetSubmitter gets a reference to the given string and assigns it to the Submitter field.
func (o *V1reportsAssemblyInfo) SetSubmitter(v string) {
	o.Submitter = &v
}

// GetRefseqCategory returns the RefseqCategory field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetRefseqCategory() string {
	if o == nil || o.RefseqCategory == nil {
		var ret string
		return ret
	}
	return *o.RefseqCategory
}

// GetRefseqCategoryOk returns a tuple with the RefseqCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetRefseqCategoryOk() (*string, bool) {
	if o == nil || o.RefseqCategory == nil {
		return nil, false
	}
	return o.RefseqCategory, true
}

// HasRefseqCategory returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasRefseqCategory() bool {
	if o != nil && o.RefseqCategory != nil {
		return true
	}

	return false
}

// SetRefseqCategory gets a reference to the given string and assigns it to the RefseqCategory field.
func (o *V1reportsAssemblyInfo) SetRefseqCategory(v string) {
	o.RefseqCategory = &v
}

// GetRefseqAssmAccession returns the RefseqAssmAccession field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetRefseqAssmAccession() string {
	if o == nil || o.RefseqAssmAccession == nil {
		var ret string
		return ret
	}
	return *o.RefseqAssmAccession
}

// GetRefseqAssmAccessionOk returns a tuple with the RefseqAssmAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetRefseqAssmAccessionOk() (*string, bool) {
	if o == nil || o.RefseqAssmAccession == nil {
		return nil, false
	}
	return o.RefseqAssmAccession, true
}

// HasRefseqAssmAccession returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasRefseqAssmAccession() bool {
	if o != nil && o.RefseqAssmAccession != nil {
		return true
	}

	return false
}

// SetRefseqAssmAccession gets a reference to the given string and assigns it to the RefseqAssmAccession field.
func (o *V1reportsAssemblyInfo) SetRefseqAssmAccession(v string) {
	o.RefseqAssmAccession = &v
}

// GetUcscAssmName returns the UcscAssmName field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetUcscAssmName() string {
	if o == nil || o.UcscAssmName == nil {
		var ret string
		return ret
	}
	return *o.UcscAssmName
}

// GetUcscAssmNameOk returns a tuple with the UcscAssmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetUcscAssmNameOk() (*string, bool) {
	if o == nil || o.UcscAssmName == nil {
		return nil, false
	}
	return o.UcscAssmName, true
}

// HasUcscAssmName returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasUcscAssmName() bool {
	if o != nil && o.UcscAssmName != nil {
		return true
	}

	return false
}

// SetUcscAssmName gets a reference to the given string and assigns it to the UcscAssmName field.
func (o *V1reportsAssemblyInfo) SetUcscAssmName(v string) {
	o.UcscAssmName = &v
}

// GetLinkedAssembly returns the LinkedAssembly field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetLinkedAssembly() string {
	if o == nil || o.LinkedAssembly == nil {
		var ret string
		return ret
	}
	return *o.LinkedAssembly
}

// GetLinkedAssemblyOk returns a tuple with the LinkedAssembly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetLinkedAssemblyOk() (*string, bool) {
	if o == nil || o.LinkedAssembly == nil {
		return nil, false
	}
	return o.LinkedAssembly, true
}

// HasLinkedAssembly returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasLinkedAssembly() bool {
	if o != nil && o.LinkedAssembly != nil {
		return true
	}

	return false
}

// SetLinkedAssembly gets a reference to the given string and assigns it to the LinkedAssembly field.
func (o *V1reportsAssemblyInfo) SetLinkedAssembly(v string) {
	o.LinkedAssembly = &v
}

// GetSequencingTech returns the SequencingTech field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetSequencingTech() string {
	if o == nil || o.SequencingTech == nil {
		var ret string
		return ret
	}
	return *o.SequencingTech
}

// GetSequencingTechOk returns a tuple with the SequencingTech field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetSequencingTechOk() (*string, bool) {
	if o == nil || o.SequencingTech == nil {
		return nil, false
	}
	return o.SequencingTech, true
}

// HasSequencingTech returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasSequencingTech() bool {
	if o != nil && o.SequencingTech != nil {
		return true
	}

	return false
}

// SetSequencingTech gets a reference to the given string and assigns it to the SequencingTech field.
func (o *V1reportsAssemblyInfo) SetSequencingTech(v string) {
	o.SequencingTech = &v
}

// GetBiosampleAccession returns the BiosampleAccession field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetBiosampleAccession() string {
	if o == nil || o.BiosampleAccession == nil {
		var ret string
		return ret
	}
	return *o.BiosampleAccession
}

// GetBiosampleAccessionOk returns a tuple with the BiosampleAccession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetBiosampleAccessionOk() (*string, bool) {
	if o == nil || o.BiosampleAccession == nil {
		return nil, false
	}
	return o.BiosampleAccession, true
}

// HasBiosampleAccession returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasBiosampleAccession() bool {
	if o != nil && o.BiosampleAccession != nil {
		return true
	}

	return false
}

// SetBiosampleAccession gets a reference to the given string and assigns it to the BiosampleAccession field.
func (o *V1reportsAssemblyInfo) SetBiosampleAccession(v string) {
	o.BiosampleAccession = &v
}

// GetBlastUrl returns the BlastUrl field value if set, zero value otherwise.
func (o *V1reportsAssemblyInfo) GetBlastUrl() string {
	if o == nil || o.BlastUrl == nil {
		var ret string
		return ret
	}
	return *o.BlastUrl
}

// GetBlastUrlOk returns a tuple with the BlastUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1reportsAssemblyInfo) GetBlastUrlOk() (*string, bool) {
	if o == nil || o.BlastUrl == nil {
		return nil, false
	}
	return o.BlastUrl, true
}

// HasBlastUrl returns a boolean if a field has been set.
func (o *V1reportsAssemblyInfo) HasBlastUrl() bool {
	if o != nil && o.BlastUrl != nil {
		return true
	}

	return false
}

// SetBlastUrl gets a reference to the given string and assigns it to the BlastUrl field.
func (o *V1reportsAssemblyInfo) SetBlastUrl(v string) {
	o.BlastUrl = &v
}

func (o V1reportsAssemblyInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssemblyAccession != nil  {
		toSerialize["assembly_accession"] = o.AssemblyAccession
	}
	if o.PairedAssemblyAccession != nil  {
		toSerialize["paired_assembly_accession"] = o.PairedAssemblyAccession
	}
	if o.AssemblyLevel != nil  {
		toSerialize["assembly_level"] = o.AssemblyLevel
	}
	if o.AssemblyName != nil  {
		toSerialize["assembly_name"] = o.AssemblyName
	}
	if o.AssemblyType != nil  {
		toSerialize["assembly_type"] = o.AssemblyType
	}
	if o.BioprojectLineage != nil && len(o.GetBioprojectLineage()) > 0  {
		toSerialize["bioproject_lineage"] = o.BioprojectLineage
	}
	if o.SubmissionDate != nil  {
		toSerialize["submission_date"] = o.SubmissionDate
	}
	if o.Description != nil  {
		toSerialize["description"] = o.Description
	}
	if o.GenbankAssmAccession != nil  {
		toSerialize["genbank_assm_accession"] = o.GenbankAssmAccession
	}
	if o.Submitter != nil  {
		toSerialize["submitter"] = o.Submitter
	}
	if o.RefseqCategory != nil  {
		toSerialize["refseq_category"] = o.RefseqCategory
	}
	if o.RefseqAssmAccession != nil  {
		toSerialize["refseq_assm_accession"] = o.RefseqAssmAccession
	}
	if o.UcscAssmName != nil  {
		toSerialize["ucsc_assm_name"] = o.UcscAssmName
	}
	if o.LinkedAssembly != nil  {
		toSerialize["linked_assembly"] = o.LinkedAssembly
	}
	if o.SequencingTech != nil  {
		toSerialize["sequencing_tech"] = o.SequencingTech
	}
	if o.BiosampleAccession != nil  {
		toSerialize["biosample_accession"] = o.BiosampleAccession
	}
	if o.BlastUrl != nil  {
		toSerialize["blast_url"] = o.BlastUrl
	}
	return json.Marshal(toSerialize)
}

type NullableV1reportsAssemblyInfo struct {
	value *V1reportsAssemblyInfo
	isSet bool
}

func (v NullableV1reportsAssemblyInfo) Get() *V1reportsAssemblyInfo {
	return v.value
}

func (v *NullableV1reportsAssemblyInfo) Set(val *V1reportsAssemblyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableV1reportsAssemblyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableV1reportsAssemblyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1reportsAssemblyInfo(val *V1reportsAssemblyInfo) *NullableV1reportsAssemblyInfo {
	return &NullableV1reportsAssemblyInfo{value: val, isSet: true}
}

func (v NullableV1reportsAssemblyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1reportsAssemblyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


