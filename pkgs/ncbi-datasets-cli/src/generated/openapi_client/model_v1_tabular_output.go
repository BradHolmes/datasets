/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
)

// V1TabularOutput struct for V1TabularOutput
type V1TabularOutput struct {
	Data *string `json:"data,omitempty"`
}

// NewV1TabularOutput instantiates a new V1TabularOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1TabularOutput() *V1TabularOutput {
	this := V1TabularOutput{}
	return &this
}

// NewV1TabularOutputWithDefaults instantiates a new V1TabularOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1TabularOutputWithDefaults() *V1TabularOutput {
	this := V1TabularOutput{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *V1TabularOutput) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1TabularOutput) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *V1TabularOutput) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *V1TabularOutput) SetData(v string) {
	o.Data = &v
}

func (o V1TabularOutput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil  {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableV1TabularOutput struct {
	value *V1TabularOutput
	isSet bool
}

func (v NullableV1TabularOutput) Get() *V1TabularOutput {
	return v.value
}

func (v *NullableV1TabularOutput) Set(val *V1TabularOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TabularOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TabularOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TabularOutput(val *V1TabularOutput) *NullableV1TabularOutput {
	return &NullableV1TabularOutput{value: val, isSet: true}
}

func (v NullableV1TabularOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TabularOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


