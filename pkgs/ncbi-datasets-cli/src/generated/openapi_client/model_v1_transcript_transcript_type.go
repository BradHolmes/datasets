/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/v1/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1TranscriptTranscriptType the model 'V1TranscriptTranscriptType'
type V1TranscriptTranscriptType string

// List of v1TranscriptTranscriptType
const (
	V1TRANSCRIPTTRANSCRIPTTYPE_UNKNOWN V1TranscriptTranscriptType = "UNKNOWN"
	V1TRANSCRIPTTRANSCRIPTTYPE_PROTEIN_CODING V1TranscriptTranscriptType = "PROTEIN_CODING"
	V1TRANSCRIPTTRANSCRIPTTYPE_NON_CODING V1TranscriptTranscriptType = "NON_CODING"
	V1TRANSCRIPTTRANSCRIPTTYPE_PROTEIN_CODING_MODEL V1TranscriptTranscriptType = "PROTEIN_CODING_MODEL"
	V1TRANSCRIPTTRANSCRIPTTYPE_NON_CODING_MODEL V1TranscriptTranscriptType = "NON_CODING_MODEL"
)

// All allowed values of V1TranscriptTranscriptType enum
var AllowedV1TranscriptTranscriptTypeEnumValues = []V1TranscriptTranscriptType{
	"UNKNOWN",
	"PROTEIN_CODING",
	"NON_CODING",
	"PROTEIN_CODING_MODEL",
	"NON_CODING_MODEL",
}

func (v *V1TranscriptTranscriptType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1TranscriptTranscriptType(value)
	for _, existing := range AllowedV1TranscriptTranscriptTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1TranscriptTranscriptType", value)
}

// NewV1TranscriptTranscriptTypeFromValue returns a pointer to a valid V1TranscriptTranscriptType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1TranscriptTranscriptTypeFromValue(v string) (*V1TranscriptTranscriptType, error) {
	ev := V1TranscriptTranscriptType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1TranscriptTranscriptType: valid values are %v", v, AllowedV1TranscriptTranscriptTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1TranscriptTranscriptType) IsValid() bool {
	for _, existing := range AllowedV1TranscriptTranscriptTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1TranscriptTranscriptType value
func (v V1TranscriptTranscriptType) Ptr() *V1TranscriptTranscriptType {
	return &v
}

type NullableV1TranscriptTranscriptType struct {
	value *V1TranscriptTranscriptType
	isSet bool
}

func (v NullableV1TranscriptTranscriptType) Get() *V1TranscriptTranscriptType {
	return v.value
}

func (v *NullableV1TranscriptTranscriptType) Set(val *V1TranscriptTranscriptType) {
	v.value = val
	v.isSet = true
}

func (v NullableV1TranscriptTranscriptType) IsSet() bool {
	return v.isSet
}

func (v *NullableV1TranscriptTranscriptType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1TranscriptTranscriptType(val *V1TranscriptTranscriptType) *NullableV1TranscriptTranscriptType {
	return &NullableV1TranscriptTranscriptType{value: val, isSet: true}
}

func (v NullableV1TranscriptTranscriptType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1TranscriptTranscriptType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

