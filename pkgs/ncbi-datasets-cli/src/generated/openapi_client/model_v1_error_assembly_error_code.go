/*
NCBI Datasets API

### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated bag](https://www.ncbi.nlm.nih.gov/datasets/docs/rehydrate/), and retrieve the individual data files at a later time. 

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package datasets

import (
	"encoding/json"
	"fmt"
)

// V1ErrorAssemblyErrorCode the model 'V1ErrorAssemblyErrorCode'
type V1ErrorAssemblyErrorCode string

// List of v1ErrorAssemblyErrorCode
const (
	V1ERRORASSEMBLYERRORCODE_UNKNOWN_ASSEMBLY_ERROR_CODE V1ErrorAssemblyErrorCode = "UNKNOWN_ASSEMBLY_ERROR_CODE"
	V1ERRORASSEMBLYERRORCODE_INVALID_BIOPROJECT_IDS V1ErrorAssemblyErrorCode = "INVALID_BIOPROJECT_IDS"
	V1ERRORASSEMBLYERRORCODE_NO_ASSEMBLIES_FOR_BIOPROJECTS V1ErrorAssemblyErrorCode = "NO_ASSEMBLIES_FOR_BIOPROJECTS"
	V1ERRORASSEMBLYERRORCODE_INVALID_TAXON V1ErrorAssemblyErrorCode = "INVALID_TAXON"
)

// All allowed values of V1ErrorAssemblyErrorCode enum
var AllowedV1ErrorAssemblyErrorCodeEnumValues = []V1ErrorAssemblyErrorCode{
	"UNKNOWN_ASSEMBLY_ERROR_CODE",
	"INVALID_BIOPROJECT_IDS",
	"NO_ASSEMBLIES_FOR_BIOPROJECTS",
	"INVALID_TAXON",
}

func (v *V1ErrorAssemblyErrorCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := V1ErrorAssemblyErrorCode(value)
	for _, existing := range AllowedV1ErrorAssemblyErrorCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid V1ErrorAssemblyErrorCode", value)
}

// NewV1ErrorAssemblyErrorCodeFromValue returns a pointer to a valid V1ErrorAssemblyErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewV1ErrorAssemblyErrorCodeFromValue(v string) (*V1ErrorAssemblyErrorCode, error) {
	ev := V1ErrorAssemblyErrorCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for V1ErrorAssemblyErrorCode: valid values are %v", v, AllowedV1ErrorAssemblyErrorCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v V1ErrorAssemblyErrorCode) IsValid() bool {
	for _, existing := range AllowedV1ErrorAssemblyErrorCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to v1ErrorAssemblyErrorCode value
func (v V1ErrorAssemblyErrorCode) Ptr() *V1ErrorAssemblyErrorCode {
	return &v
}

type NullableV1ErrorAssemblyErrorCode struct {
	value *V1ErrorAssemblyErrorCode
	isSet bool
}

func (v NullableV1ErrorAssemblyErrorCode) Get() *V1ErrorAssemblyErrorCode {
	return v.value
}

func (v *NullableV1ErrorAssemblyErrorCode) Set(val *V1ErrorAssemblyErrorCode) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ErrorAssemblyErrorCode) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ErrorAssemblyErrorCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ErrorAssemblyErrorCode(val *V1ErrorAssemblyErrorCode) *NullableV1ErrorAssemblyErrorCode {
	return &NullableV1ErrorAssemblyErrorCode{value: val, isSet: true}
}

func (v NullableV1ErrorAssemblyErrorCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ErrorAssemblyErrorCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

